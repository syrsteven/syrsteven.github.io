<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>syrsteven</title>
  
  
  <link href="http://syrsteven.github.io/atom.xml" rel="self"/>
  
  <link href="http://syrsteven.github.io/"/>
  <updated>2023-09-02T10:07:03.478Z</updated>
  <id>http://syrsteven.github.io/</id>
  
  <author>
    <name>syrsteven</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于langchain的本地知识库构建</title>
    <link href="http://syrsteven.github.io/post/26a10e9f.html"/>
    <id>http://syrsteven.github.io/post/26a10e9f.html</id>
    <published>2023-09-02T10:06:49.000Z</published>
    <updated>2023-09-02T10:07:03.478Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>langchain学习</title>
    <link href="http://syrsteven.github.io/post/d622260e.html"/>
    <id>http://syrsteven.github.io/post/d622260e.html</id>
    <published>2023-09-02T10:06:25.000Z</published>
    <updated>2023-09-02T10:07:03.476Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Auto-GPT的安装与应用</title>
    <link href="http://syrsteven.github.io/post/4a6b62a6.html"/>
    <id>http://syrsteven.github.io/post/4a6b62a6.html</id>
    <published>2023-09-02T10:06:07.000Z</published>
    <updated>2023-09-02T10:07:03.472Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>embedding_test</title>
    <link href="http://syrsteven.github.io/post/eed7d42c.html"/>
    <id>http://syrsteven.github.io/post/eed7d42c.html</id>
    <published>2023-09-02T10:05:46.000Z</published>
    <updated>2023-09-02T10:07:03.476Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Chromadb</title>
    <link href="http://syrsteven.github.io/post/59574ad.html"/>
    <id>http://syrsteven.github.io/post/59574ad.html</id>
    <published>2023-09-02T10:05:24.000Z</published>
    <updated>2023-09-02T10:07:03.474Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>顺序结构与选择</title>
    <link href="http://syrsteven.github.io/post/48aa0c4a.html"/>
    <id>http://syrsteven.github.io/post/48aa0c4a.html</id>
    <published>2020-07-28T11:31:02.000Z</published>
    <updated>2023-09-01T20:06:21.721Z</updated>
    
    <content type="html"><![CDATA[<h1 id="顺序结构与选择"><a href="#顺序结构与选择" class="headerlink" title="顺序结构与选择"></a>顺序结构与选择</h1><h2 id="循序结构"><a href="#循序结构" class="headerlink" title="循序结构"></a>循序结构</h2><p>程序由若干条语句组成，各语句按照顺序一条一条地执行，这种结构叫做顺序结构。顺序结构是程序的最基本结构。</p><p>如下便是一个简单的顺序结构</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b,s;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">    s=a+b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><p>在主函数中，按照从上到下的顺序一次运行语句：</p><ul><li>首先定义三个变量s,a,b</li><li>输入a,b</li><li>将a+b的值赋予s</li><li>输出s</li></ul><h2 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h2><p>在现实世界中，在解决问题的过程中，不可避免地遇到需要进行选择的情况。这时，程序执行的顺序需要发生变化，而非从前向后逐一执行。此时我们便需要用到选择结构。</p><p>选择类语句包括if语句和switch语句，用它们来解决实际应用中按不同的情况进行不同处理的问题。</p><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><p>if语句是最基础，常用的选择语句。基本结构如下：</p><pre><code>if(条件1)&#123;    若满足条件1，则进入该大括号，按顺序向下执行，&#125;else if(条件2)&#123;    若不满足条件1，但满足条件2，则进入该大括号，按顺序向下执行。&#125;...else if(条件n)&#123;    若不满足以上所有条件，但满足条件n，则进入该大括号，按顺序向下执行。&#125;else&#123;    若所有条件都不满足，则进入该大括号，按顺序向下执行。&#125;</code></pre><p>解释 ：其中 else if 语句的数量没有限制，据实际应用而定。但是，else if 必须跟在 if 后使用，else 必须跟在 if 或 else if 后使用。if 可以单独使用。</p><p>举个栗子：</p><h3 id="小明，小红，小亮有点无聊，于是决定玩一个游戏，他们从一堆数字中，随意抽出两个未知的数字-a-b-。小明猜测-a-b-小红猜测-a"><a href="#小明，小红，小亮有点无聊，于是决定玩一个游戏，他们从一堆数字中，随意抽出两个未知的数字-a-b-。小明猜测-a-b-小红猜测-a" class="headerlink" title="小明，小红，小亮有点无聊，于是决定玩一个游戏，他们从一堆数字中，随意抽出两个未知的数字 a,b 。小明猜测 a&gt;b , 小红猜测 a&lt;b , 小亮猜测 a&#x3D;b。现在他们请你写一个程序对给定的两个数 a,b 判断谁猜的正确。"></a>小明，小红，小亮有点无聊，于是决定玩一个游戏，他们从一堆数字中，随意抽出两个未知的数字 a,b 。小明猜测 a&gt;b , 小红猜测 a&lt;b , 小亮猜测 a&#x3D;b。现在他们请你写一个程序对给定的两个数 a,b 判断谁猜的正确。</h3><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>一行输入两个数字a,b</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>若小明正确，则输出1，若小红正确，则输出2，若小亮正确，则输出3，</p><h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><p>输入：<br>1   2</p><p>输出：<br>2</p><p>程序如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">    <span class="keyword">if</span>(a&gt;b) <span class="built_in">printf</span>(<span class="string">&quot;1\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a&lt;b) <span class="built_in">printf</span>(<span class="string">&quot;2\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;3\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h2><p>应用条件语句可以很方便地使程序实现分支，但是出现分支比较多的时候，虽然可以用嵌套的if语句来解决，但是程序结构会显得复杂，其至凌乱。为方便实现多情况选择，C++提供了一种switch开关语句。</p><p>switch的基本结构如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">switch</span>（表达式）</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span>  常量表达式<span class="number">1</span>:</span><br><span class="line">        语句序列<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">case</span>  常量表达式<span class="number">2</span>:</span><br><span class="line">        语句序列<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    …… </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">case</span>  常量表达式n:</span><br><span class="line">        语句序列n;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">         语句序列n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">该语句中可以使用一次或多次case标号，但只能使用一次default标号，或者省略整个default部分；多个case标号也允许使用在同一个语句序列的前面；每个语句标号有保留字case和后面的常量表达式及冒号组成，每个常量表达式通常为字面常量，如常数或字符。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h3><pre><code>switch语句执行过程分为以下3步描述。      (1)计算出switch后面圆括号内表达式的值，假定为M，若它不是整型，系统将自动舍去其小数部分，只取其整数部分作为结果值。      (2)依次计算出每个case后常量表达式的值，假定它们为M1、M2、…，同样若它们的值不是整型，则自动转换为整型。      (3)让M依次同M1、M2、…进行比较，一旦遇到M与某个值相等，则就从对应标号的语句开始执行；在碰不到相等的情况下，若存在default子句，则就执行其冒号后面的语句序列，否则不执行任何操作；当执行到复合语句最后的右花括号时就结束整个switch语句的执行。</code></pre><p>举个栗子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(a)</span><br><span class="line">     &#123;  </span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            x++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            y++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            z++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;error&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(ch)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">case</span> ‘a‘:</span><br><span class="line">        <span class="keyword">case</span> ‘A‘:</span><br><span class="line">            d1=(x+y)/<span class="number">2</span>;</span><br><span class="line">            d2=x*y<span class="number">-2</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ‘b‘:</span><br><span class="line">        <span class="keyword">case</span> ‘B‘:</span><br><span class="line">            d1=(a+b)/<span class="number">2</span>;</span><br><span class="line">            d2=a*b<span class="number">-2</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;input error!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><pre><code>1.case语句后的各常量表达式的值不能相同，否则会出现错误码。2.每个case或default后，可以包含多条语句，不需要使用“&#123;”和“&#125;”括起来。3.各case和default子句的先后顺序可以变动，这不会影响程序执行结果。4. default子句可以省略，default后面的语句末尾可以不必写break。</code></pre><p>例题：根据从键盘上输入的表示星期几的数字，对应输出它的英文名称。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">      <span class="type">int</span> weekday;</span><br><span class="line">      cin&gt;&gt;weekday;</span><br><span class="line">      <span class="keyword">switch</span>(weekday)</span><br><span class="line">      &#123;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">1</span>:cout&lt;&lt;<span class="string">&quot;Monday&quot;</span>&lt;&lt;endl; <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">2</span>: cout&lt;&lt;<span class="string">&quot;Tuesday&quot;</span>&lt;&lt;endl; <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">3</span>: cout&lt;&lt;<span class="string">&quot;Wednesday&quot;</span>&lt;&lt;endl; <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">4</span>: cout&lt;&lt;<span class="string">&quot;Thursday&quot;</span>&lt;&lt;endl; <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">5</span>: cout&lt;&lt;<span class="string">&quot;Friday&quot;</span>&lt;&lt;endl; <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">6</span>: cout&lt;&lt;<span class="string">&quot;Saturday&quot;</span>&lt;&lt;endl; <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">7</span>: cout&lt;&lt;<span class="string">&quot;Sunday&quot;</span>&lt;&lt;endl; <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">default</span>:cout&lt;&lt;<span class="string">&quot;input  error!&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习："><a href="#练习：" class="headerlink" title="练习："></a>练习：</h2><p>1、输入三个数a，b，c，打印出最大者。</p><p>2、输入三角形的三边，判断它是否是直角三角形。</p><p>3、输入三角形的三个边，判断它是何类型的三角形（等边DB？等腰DY？一般YB？）。</p><p>4、输入三个数，按由大到小顺序打印出来。</p><p>5、对一批货物征收税金。价格在1万元以上的货物征税5%，在5000元以上，1万元以下的货物征税3%，在1000元以上，5000元以下的货物征税2%，1000元以下的货物免税。编写一程序，读入货物价格，计算并输出税金。</p><p>6、输入某学生成绩，根据成绩的好坏输出相应评语。如果成绩在90分以上，输出评语：优秀（outstanding）。如果成绩在60分到90分之间，输出评语：良好（satisfactory）。如果成绩不足60分，输出评语：不及格（unsatisfactory）。</p><p>更多练习请见：<a href="https://www.luogu.com.cn/training/101#problems">https://www.luogu.com.cn/training/101#problems</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;顺序结构与选择&quot;&gt;&lt;a href=&quot;#顺序结构与选择&quot; class=&quot;headerlink&quot; title=&quot;顺序结构与选择&quot;&gt;&lt;/a&gt;顺序结构与选择&lt;/h1&gt;&lt;h2 id=&quot;循序结构&quot;&gt;&lt;a href=&quot;#循序结构&quot; class=&quot;headerlink&quot; title=&quot;循序结构&quot;&gt;&lt;/a&gt;循序结构&lt;/h2&gt;&lt;p&gt;程序由若干条语句组成，各语句按照顺序一条一条地执行，这种结构叫做顺序结构。顺序结构是程序的最基本结构。&lt;/p&gt;
&lt;p&gt;如下便是一个简单的顺序结构&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; std;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; a,b,s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;%d%d&amp;quot;&lt;/span&gt;,&amp;amp;a,&amp;amp;b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s=a+b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;,s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>OI省选知识点</title>
    <link href="http://syrsteven.github.io/post/56008cdb.html"/>
    <id>http://syrsteven.github.io/post/56008cdb.html</id>
    <published>2019-03-17T03:42:00.000Z</published>
    <updated>2023-09-01T20:06:21.714Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><ol><li>带权并查集</li><li>线段树合并</li><li>平衡树 <ul><li>Treap 随机平衡二叉树 </li><li>FHQ Treap</li></ul></li><li>分块 </li><li>树套树 <ul><li>线段树套平衡树 </li><li>平衡树套线段树</li></ul></li><li>可并堆 <ul><li>左偏树</li></ul></li><li>KDtree,四分树</li><li>可持久化数据结构(主席树等)</li></ol><span id="more"></span><h1 id="字符串相关算法及数据结构"><a href="#字符串相关算法及数据结构" class="headerlink" title="字符串相关算法及数据结构"></a>字符串相关算法及数据结构</h1><ol><li>KMP </li><li>AC自动机 </li><li>后缀数组 </li><li>后缀自动机 </li><li>字典树 Trie </li><li>manacher</li></ol><h1 id="图论相关"><a href="#图论相关" class="headerlink" title="图论相关"></a>图论相关</h1><ol><li>最小生成树 <ul><li>prim </li><li>kruskal</li></ul></li><li>最短路，次短路，K短路 <ul><li>spfa </li><li>dijkstra </li><li>floyd</li></ul></li><li>图的连通 <ul><li>连通分量 </li><li>割点，割边</li></ul></li><li>网络流 <ul><li>最大流 </li><li>最小割 </li><li>费用流 </li><li>分数规划</li></ul></li><li>树相关 <ul><li>树上倍增，公共祖先 </li><li>树链剖分 </li><li>树的分治算法（点分治，边分治，树分治） </li><li>动态树 （LCT，树分块） </li><li>虚树</li></ul></li><li>拓扑排序 </li><li>欧拉图 </li><li>二分图</li></ol><h1 id="数学相关"><a href="#数学相关" class="headerlink" title="数学相关"></a>数学相关</h1><ol><li>（扩展）欧几里得算法，筛法，快速幂 <ul><li>斐蜀定理 </li><li>更相减损术</li></ul></li><li>欧拉函数与*降幂大法 </li><li>费马小定理 </li><li>排列组合 <ul><li>lucas定理</li></ul></li><li>乘法逆元 </li><li>矩阵乘法 </li><li>数学期望与概率 </li><li>博弈论 <ul><li>sg函数 </li><li>树上删边游戏</li></ul></li><li>拉格朗日乘子法 </li><li>中国剩余定理 </li><li>线性规划与网络流 </li><li>单纯型线性规划 </li><li>辛普森积分 </li><li>模线性方程组 </li><li>容斥原理与莫比乌斯反演 </li><li>置换群 </li><li>快速傅里叶变换</li></ol><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><ol><li>一般，背包，状压，区间，环形，树形，数位动态规划 <ul><li>记忆化搜索 </li><li>斯坦纳树 </li><li>背包九讲</li></ul></li><li>斜率优化与四边形不等式优化 </li><li>环 + 外向树上的动态规划 </li><li>插头动态规划</li></ol><h1 id="计算几何"><a href="#计算几何" class="headerlink" title="计算几何"></a>计算几何</h1><ol><li>计算几何基础 </li><li>三维计算几何初步 </li><li>梯形剖分与三角形剖分 </li><li>旋转卡壳 </li><li>半平面交 </li><li>pick定理 </li><li>扫描线</li></ol><h1 id="搜索相关"><a href="#搜索相关" class="headerlink" title="搜索相关"></a>搜索相关</h1><ol><li>bfs，dfs </li><li>A* 算法 </li><li>迭代加深搜索，双向广搜</li></ol><h1 id="特殊算法"><a href="#特殊算法" class="headerlink" title="特殊算法"></a>特殊算法</h1><ol><li>莫队算法，*树上莫队 </li><li>模拟退火 </li><li>爬山算法 </li><li>随机增量法</li></ol><h1 id="其它重要工具与方法"><a href="#其它重要工具与方法" class="headerlink" title="其它重要工具与方法"></a>其它重要工具与方法</h1><ol><li>模拟与贪心 </li><li>二分，三分法（求偏导） </li><li>分治，CDQ分治 </li><li>高精度 </li><li>离线 </li><li>ST表</li></ol><h1 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h1><ol><li>map </li><li>priority_queue </li><li>set </li><li>bitset </li><li>rope</li></ol><h1 id="非常见算法"><a href="#非常见算法" class="headerlink" title="非常见算法"></a>非常见算法</h1><ol><li>*朱刘算法 </li><li>*弦图与区间图</li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;数据结构&quot;&gt;&lt;a href=&quot;#数据结构&quot; class=&quot;headerlink&quot; title=&quot;数据结构&quot;&gt;&lt;/a&gt;数据结构&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;带权并查集&lt;/li&gt;
&lt;li&gt;线段树合并&lt;/li&gt;
&lt;li&gt;平衡树 &lt;ul&gt;
&lt;li&gt;Treap 随机平衡二叉树 &lt;/li&gt;
&lt;li&gt;FHQ Treap&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分块 &lt;/li&gt;
&lt;li&gt;树套树 &lt;ul&gt;
&lt;li&gt;线段树套平衡树 &lt;/li&gt;
&lt;li&gt;平衡树套线段树&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可并堆 &lt;ul&gt;
&lt;li&gt;左偏树&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;KDtree,四分树&lt;/li&gt;
&lt;li&gt;可持久化数据结构(主席树等)&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
    <category term="黑科技" scheme="http://syrsteven.github.io/tags/%E9%BB%91%E7%A7%91%E6%8A%80/"/>
    
  </entry>
  
  <entry>
    <title>字符串算法集锦</title>
    <link href="http://syrsteven.github.io/post/b1c0144b.html"/>
    <id>http://syrsteven.github.io/post/b1c0144b.html</id>
    <published>2019-03-02T04:04:00.000Z</published>
    <updated>2023-09-01T20:06:21.715Z</updated>
    
    <content type="html"><![CDATA[<h1 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h1><p>时间复杂度为O(n)的字符串匹配算法。</p><h2 id="应用："><a href="#应用：" class="headerlink" title="应用："></a>应用：</h2><h2 id="1-单一子串和模式串匹配"><a href="#1-单一子串和模式串匹配" class="headerlink" title="1.单一子串和模式串匹配"></a>1.单一子串和模式串匹配</h2><h4 id="P3375-【模板】KMP字符串匹配"><a href="#P3375-【模板】KMP字符串匹配" class="headerlink" title="P3375 【模板】KMP字符串匹配"></a><a href="https://www.luogu.org/problemnew/show/P3375">P3375 【模板】KMP字符串匹配</a></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> f[<span class="number">1001000</span>];<span class="comment">//fail数组下标从1开始 </span></span><br><span class="line"><span class="type">char</span> s1[<span class="number">1001000</span>],s2[<span class="number">1001000</span>];<span class="comment">//字符串下表从0开始 </span></span><br><span class="line"><span class="type">int</span> l1,l2;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">kmp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;l2;i++) <span class="comment">//处理2~l2的fail数组(f[1]=0) </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> j=f[i];</span><br><span class="line"><span class="keyword">while</span>(j&amp;&amp;s2[j]!=s2[i]) j=f[j];</span><br><span class="line">f[i+<span class="number">1</span>]=(s2[j]==s2[i])?j+<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;=l1;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(j&amp;&amp;s1[i]!=s2[j]) j=f[j];</span><br><span class="line"><span class="keyword">if</span>(s1[i]==s2[j]) j++;</span><br><span class="line"><span class="keyword">if</span>(j==l2) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i-j+<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s1);<span class="comment">//主串 </span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s2);<span class="comment">//模式串 </span></span><br><span class="line">l1=<span class="built_in">strlen</span>(s1);</span><br><span class="line">l2=<span class="built_in">strlen</span>(s2);</span><br><span class="line"><span class="built_in">kmp</span>();</span><br><span class="line"><span class="built_in">get</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=l2;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,f[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="2-求最小循环节"><a href="#2-求最小循环节" class="headerlink" title="2.求最小循环节"></a>2.求最小循环节</h2><h4 id="SP263-PERIOD-Period"><a href="#SP263-PERIOD-Period" class="headerlink" title="SP263 PERIOD - Period"></a><a href="https://www.luogu.org/problemnew/show/SP263">SP263 PERIOD - Period</a></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> T,n;</span><br><span class="line"><span class="type">char</span> s[<span class="number">1001000</span>];</span><br><span class="line"><span class="type">int</span> f[<span class="number">1001000</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">kmp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line"><span class="type">int</span> j;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">j=f[i];</span><br><span class="line"><span class="keyword">while</span>(j&amp;&amp;s[i]!=s[j]) j=f[j];</span><br><span class="line">f[i+<span class="number">1</span>]=(s[i]==s[j])?j+<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(f[i+<span class="number">1</span>]&amp;&amp;((i+<span class="number">1</span>)%(i+<span class="number">1</span>-f[i+<span class="number">1</span>]))==<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,i+<span class="number">1</span>,(i+<span class="number">1</span>)/(i+<span class="number">1</span>-f[i+<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> t=<span class="number">1</span>;t&lt;=T;t++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Test case #%d\n&quot;</span>,t);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line"><span class="built_in">kmp</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="很显然，如果该字符串有循环节且-f-i-0-时-i-f-i-即为该字符串的最小循环节。"><a href="#很显然，如果该字符串有循环节且-f-i-0-时-i-f-i-即为该字符串的最小循环节。" class="headerlink" title="很显然，如果该字符串有循环节且$f[i]!&#x3D;0$时$i-f[i]$即为该字符串的最小循环节。"></a>很显然，如果该字符串有循环节且$f[i]!&#x3D;0$时$i-f[i]$即为该字符串的最小循环节。</h4><h2 id="3-求一个字符串所有相同的前后缀"><a href="#3-求一个字符串所有相同的前后缀" class="headerlink" title="3.求一个字符串所有相同的前后缀"></a>3.求一个字符串所有相同的前后缀</h2><h4 id="P2375-NOI2014-动物园"><a href="#P2375-NOI2014-动物园" class="headerlink" title="P2375 [NOI2014]动物园"></a><a href="https://www.luogu.org/problemnew/show/P2375">P2375 [NOI2014]动物园</a></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> p = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> n,len;</span><br><span class="line"><span class="type">char</span> s[<span class="number">1001000</span>];</span><br><span class="line"><span class="type">int</span> f[<span class="number">1001000</span>],num[<span class="number">1001000</span>];<span class="comment">//这里num并不直接是该题的答案，它代表1~n中所有的相等前后缀(可重复)。</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">getfail</span><span class="params">(<span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line"><span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="built_in">sizeof</span>(num));</span><br><span class="line">num[<span class="number">0</span>]=<span class="number">0</span>;num[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">ll ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> j=f[i];</span><br><span class="line"><span class="keyword">while</span>(j&amp;&amp;s[i]!=s[j]) j=f[j];</span><br><span class="line">f[i+<span class="number">1</span>]=(s[i]==s[j])?j+<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">j=f[i+<span class="number">1</span>];num[i+<span class="number">1</span>]=num[j]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(j&amp;&amp;s[i]!=s[j]) j=f[j];</span><br><span class="line"><span class="keyword">if</span>(s[i]==s[j]) j++;</span><br><span class="line"><span class="keyword">while</span>(j*<span class="number">2</span>&gt;i+<span class="number">1</span>) j=f[j];</span><br><span class="line">ans*=(num[j]+<span class="number">1</span>),ans%=p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">len=<span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="built_in">getfail</span>(len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="这道题不是单一的求一个字符串的答案，而是一个字符串所有前缀答案的乘积。但本质上还是对next数组的应用。"><a href="#这道题不是单一的求一个字符串的答案，而是一个字符串所有前缀答案的乘积。但本质上还是对next数组的应用。" class="headerlink" title="这道题不是单一的求一个字符串的答案，而是一个字符串所有前缀答案的乘积。但本质上还是对next数组的应用。"></a>这道题不是单一的求一个字符串的答案，而是一个字符串所有前缀答案的乘积。但本质上还是对next数组的应用。</h4><h4 id="思考可得-next-i-next-next-i-next-next-next-i-…都是前缀1-i的相等前后缀，递归统计即可。"><a href="#思考可得-next-i-next-next-i-next-next-next-i-…都是前缀1-i的相等前后缀，递归统计即可。" class="headerlink" title="思考可得$next[i]$,$next[next[i]]$,$next[next[next[i]]]$,…都是前缀1~i的相等前后缀，递归统计即可。"></a>思考可得$next[i]$,$next[next[i]]$,$next[next[next[i]]]$,…都是前缀1~i的相等前后缀，递归统计即可。</h4><h4 id="然而如果输入n个’a’的时候，算法便被卡成了O-n-2-了，但我们发现每次递归都会有大量重复计算的相等前后缀，因此求完next数组后，再一次遍历整个字符串，不过这回我们不再把变量j从新赋值，接着用上一次的值，并判断其是否合法，这样便省掉了许多重复操作。"><a href="#然而如果输入n个’a’的时候，算法便被卡成了O-n-2-了，但我们发现每次递归都会有大量重复计算的相等前后缀，因此求完next数组后，再一次遍历整个字符串，不过这回我们不再把变量j从新赋值，接着用上一次的值，并判断其是否合法，这样便省掉了许多重复操作。" class="headerlink" title="然而如果输入n个’a’的时候，算法便被卡成了O(n^2)了，但我们发现每次递归都会有大量重复计算的相等前后缀，因此求完next数组后，再一次遍历整个字符串，不过这回我们不再把变量j从新赋值，接着用上一次的值，并判断其是否合法，这样便省掉了许多重复操作。"></a>然而如果输入n个’a’的时候，算法便被卡成了O(n^2)了，但我们发现每次递归都会有大量重复计算的相等前后缀，因此求完next数组后，再一次遍历整个字符串，不过这回我们不再把变量j从新赋值，接着用上一次的值，并判断其是否合法，这样便省掉了许多重复操作。</h4><h1 id="AC自动机"><a href="#AC自动机" class="headerlink" title="AC自动机"></a>AC自动机</h1><p>KMP+trie树</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h2 id="1-多个模式串和主串进行匹配"><a href="#1-多个模式串和主串进行匹配" class="headerlink" title="1.多个模式串和主串进行匹配"></a>1.多个模式串和主串进行匹配</h2><h4 id="P3808-【模板】AC自动机-简单版"><a href="#P3808-【模板】AC自动机-简单版" class="headerlink" title="P3808 【模板】AC自动机(简单版)"></a><a href="https://www.luogu.org/problemnew/show/P3808">P3808 【模板】AC自动机(简单版)</a></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> s[<span class="number">1001000</span>];</span><br><span class="line"><span class="type">int</span> ch[<span class="number">1001000</span>][<span class="number">26</span>],tot,tag[<span class="number">1001000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ins</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n=<span class="built_in">strlen</span>(s),x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> t=s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!ch[x][t]) ch[x][t]=++tot;</span><br><span class="line">x=ch[x][t];</span><br><span class="line">&#125;</span><br><span class="line">tag[x]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> f[<span class="number">1001000</span>];<span class="comment">//以该节点为结尾的子串的 最长与任意模式串的前缀相等的 后缀。 </span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">getfail</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++) </span><br><span class="line"><span class="keyword">if</span>(ch[<span class="number">0</span>][i]) q.<span class="built_in">push</span>(ch[<span class="number">0</span>][i]);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x=q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch[x][i]) f[ch[x][i]]=ch[f[x]][i],q.<span class="built_in">push</span>(ch[x][i]);</span><br><span class="line"><span class="keyword">else</span> ch[x][i]=ch[f[x]][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">find</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n=<span class="built_in">strlen</span>(s),x=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">x=ch[x][s[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=x;j&amp;&amp;~tag[j];j=f[j]) ans+=tag[j],tag[j]=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line"><span class="built_in">ins</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">getfail</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line"><span class="built_in">find</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="这位大佬的文章挺详细的。"><a href="#这位大佬的文章挺详细的。" class="headerlink" title="这位大佬的文章挺详细的。"></a><a href="https://www.luogu.org/blog/42196/qiang-shi-tu-xie-ac-zi-dong-ji">这位大佬</a>的文章挺详细的。</h4><h4 id="P3796-【模板】AC自动机（加强版）"><a href="#P3796-【模板】AC自动机（加强版）" class="headerlink" title="P3796 【模板】AC自动机（加强版）"></a><a href="https://www.luogu.org/problemnew/show/P3796">P3796 【模板】AC自动机（加强版）</a></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">char</span> s1[<span class="number">1001000</span>];</span><br><span class="line"><span class="type">char</span> s2[<span class="number">200</span>][<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> f[<span class="number">500000</span>],l[<span class="number">500000</span>];</span><br><span class="line"><span class="type">int</span> ch[<span class="number">500000</span>][<span class="number">26</span>],tot,tag[<span class="number">500000</span>];</span><br><span class="line"><span class="type">int</span> ans[<span class="number">200</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> idx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>,n=<span class="built_in">strlen</span>(s2[idx]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> t=s2[idx][i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!ch[x][t]) ch[x][t]=++tot;</span><br><span class="line">x=ch[x][t];</span><br><span class="line">&#125;</span><br><span class="line">tag[x]=idx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">getfail</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line"><span class="keyword">if</span>(ch[<span class="number">0</span>][i]) q.<span class="built_in">push</span>(ch[<span class="number">0</span>][i]);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x=q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tag[ch[f[x]][i]]) l[ch[x][i]]=ch[f[x]][i];</span><br><span class="line"><span class="keyword">else</span> l[ch[x][i]]=l[ch[f[x]][i]];</span><br><span class="line"><span class="keyword">if</span>(ch[x][i]) f[ch[x][i]]=ch[f[x]][i],q.<span class="built_in">push</span>(ch[x][i]);</span><br><span class="line"><span class="keyword">else</span> ch[x][i]=ch[f[x]][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">find</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n=<span class="built_in">strlen</span>(s1),x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">x=ch[x][s1[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=x;j;j=l[j]) ans[tag[j]]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n)&amp;&amp;n!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(tag,<span class="number">0</span>,<span class="built_in">sizeof</span>(tag));</span><br><span class="line"><span class="built_in">memset</span>(ch,<span class="number">0</span>,<span class="built_in">sizeof</span>(ch));</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line"><span class="built_in">memset</span>(l,<span class="number">0</span>,<span class="built_in">sizeof</span>(l));</span><br><span class="line"><span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="built_in">sizeof</span>(ans));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s2[i]),<span class="built_in">ins</span>(i);</span><br><span class="line"><span class="built_in">getfail</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s1);</span><br><span class="line"><span class="built_in">find</span>();</span><br><span class="line"><span class="type">int</span> mx=*<span class="built_in">max_element</span>(ans+<span class="number">1</span>,ans+<span class="number">1</span>+n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,mx);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(ans[i]==mx) <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,s2[i]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="这道题新引入了一个优化，-l-x-表示以节点x为结尾的后缀所包含的最长单词。这样就可以快速找到单词节点而不用一个一个的跳fail数组了。"><a href="#这道题新引入了一个优化，-l-x-表示以节点x为结尾的后缀所包含的最长单词。这样就可以快速找到单词节点而不用一个一个的跳fail数组了。" class="headerlink" title="这道题新引入了一个优化，$l[x]$表示以节点x为结尾的后缀所包含的最长单词。这样就可以快速找到单词节点而不用一个一个的跳fail数组了。"></a>这道题新引入了一个优化，$l[x]$表示以节点x为结尾的后缀所包含的最长单词。这样就可以快速找到单词节点而不用一个一个的跳fail数组了。</h4><h4 id="P2292-HNOI2004-L语言"><a href="#P2292-HNOI2004-L语言" class="headerlink" title="P2292[HNOI2004]L语言"></a><a href="https://www.luogu.org/problemnew/show/P2292">P2292[HNOI2004]L语言</a></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T f=<span class="number">1</span>;a=<span class="number">0</span>;<span class="type">char</span> s=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(s&lt;<span class="string">&#x27;0&#x27;</span>||s&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(s==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(s&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;s&gt;=<span class="string">&#x27;0&#x27;</span>)&#123;a=a*<span class="number">10</span>+s-<span class="string">&#x27;0&#x27;</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">a*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> ch[<span class="number">10000</span>][<span class="number">26</span>],tot,tag[<span class="number">10000</span>],len[<span class="number">10000</span>];</span><br><span class="line"><span class="type">int</span> l[<span class="number">10000</span>],f[<span class="number">10000</span>];</span><br><span class="line"><span class="type">char</span> s[<span class="number">1100000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ins</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> le=<span class="built_in">strlen</span>(s),x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;le;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!ch[x][s[i]-<span class="string">&#x27;a&#x27;</span>]) ch[x][s[i]-<span class="string">&#x27;a&#x27;</span>]=++tot;</span><br><span class="line">x=ch[x][s[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line">tag[x]=<span class="number">1</span>;</span><br><span class="line">len[x]=le;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">getfail</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line"><span class="keyword">if</span>(ch[<span class="number">0</span>][i]) q.<span class="built_in">push</span>(ch[<span class="number">0</span>][i]);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x=q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tag[ch[f[x]][i]]) l[ch[x][i]]=ch[f[x]][i];</span><br><span class="line"><span class="keyword">else</span> l[ch[x][i]]=l[ch[f[x]][i]];</span><br><span class="line"><span class="keyword">if</span>(ch[x][i]) f[ch[x][i]]=ch[f[x]][i],q.<span class="built_in">push</span>(ch[x][i]);</span><br><span class="line"><span class="keyword">else</span> ch[x][i]=ch[f[x]][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> vis[<span class="number">1100000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">find</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">vis[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> le=<span class="built_in">strlen</span>(s),x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;le;i++)</span><br><span class="line">&#123;</span><br><span class="line">x=ch[x][s[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=x;j;j=l[j])</span><br><span class="line"><span class="keyword">if</span>(tag[j]&amp;&amp;vis[i-len[j]+<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">vis[i+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=le;i;i--) <span class="keyword">if</span>(vis[i]) <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">read</span>(n),<span class="built_in">read</span>(m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line"><span class="built_in">ins</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">getfail</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">find</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="这道题也是一道多个模式串和主串进行匹配的题，我们只需在主串进行匹配的同时，判断是否能通过模式串到达该位置。"><a href="#这道题也是一道多个模式串和主串进行匹配的题，我们只需在主串进行匹配的同时，判断是否能通过模式串到达该位置。" class="headerlink" title="这道题也是一道多个模式串和主串进行匹配的题，我们只需在主串进行匹配的同时，判断是否能通过模式串到达该位置。"></a>这道题也是一道多个模式串和主串进行匹配的题，我们只需在主串进行匹配的同时，判断是否能通过模式串到达该位置。</h4><h2 id="2-在fail树-或l树-上跑树形DP"><a href="#2-在fail树-或l树-上跑树形DP" class="headerlink" title="2.在fail树(或l树)上跑树形DP"></a>2.在fail树(或l树)上跑树形DP</h2><h4 id="P2414-NOI2011-阿狸的打字机"><a href="#P2414-NOI2011-阿狸的打字机" class="headerlink" title="P2414 [NOI2011]阿狸的打字机"></a><a href="https://www.luogu.org/problemnew/show/P2414">P2414 [NOI2011]阿狸的打字机</a></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T f=<span class="number">1</span>;a=<span class="number">0</span>;<span class="type">char</span> s=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(s&lt;<span class="string">&#x27;0&#x27;</span>||s&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(s==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(s&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;s&gt;=<span class="string">&#x27;0&#x27;</span>)&#123;a=a*<span class="number">10</span>+s-<span class="string">&#x27;0&#x27;</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">a*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ch[<span class="number">100100</span>][<span class="number">26</span>],tot,tag[<span class="number">100100</span>];</span><br><span class="line"><span class="type">int</span> l[<span class="number">100100</span>],f[<span class="number">100100</span>],cnt,fa[<span class="number">100100</span>];</span><br><span class="line"><span class="type">char</span> s[<span class="number">100100</span>];</span><br><span class="line"><span class="type">int</span> m,ans[<span class="number">100100</span>],num[<span class="number">100100</span>],idx,ll[<span class="number">100100</span>],rr[<span class="number">100100</span>];</span><br><span class="line"><span class="type">int</span> tr[<span class="number">100100</span>];</span><br><span class="line"><span class="comment">//num与tag互为反函数  tot:总结点数 cnt:单词数 fa[]与ch[][]互为反函数 ll[],rr[]:子树dfs序左右两端  tr:树状数组 </span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;x&lt;=idx;x+=<span class="built_in">lowbit</span>(x)) tr[x]+=v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;x;x-=<span class="built_in">lowbit</span>(x)) sum+=tr[x];</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ne,to;</span><br><span class="line">&#125;e[<span class="number">100100</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> head[<span class="number">100100</span>],bcnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++bcnt].to=v;</span><br><span class="line">e[bcnt].ne=head[u];</span><br><span class="line">head[u]=bcnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll[x]=++idx;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=head[x];i;i=e[i].ne) <span class="built_in">dfs</span>(e[i].to);</span><br><span class="line">rr[x]=idx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x,y,id;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> node &amp;a) <span class="type">const</span>&#123; <span class="keyword">return</span> y&lt;a.y;&#125;</span><br><span class="line">&#125;q[<span class="number">100100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">getfail</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line"><span class="keyword">if</span>(ch[<span class="number">0</span>][i]) q.<span class="built_in">push</span>(ch[<span class="number">0</span>][i]);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x=q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tag[ch[f[x]][i]]) l[ch[x][i]]=ch[f[x]][i];</span><br><span class="line"><span class="keyword">else</span> l[ch[x][i]]=l[ch[f[x]][i]];</span><br><span class="line"><span class="keyword">if</span>(ch[x][i]) f[ch[x][i]]=ch[f[x]][i],q.<span class="built_in">push</span>(ch[x][i]);</span><br><span class="line"><span class="keyword">else</span> ch[x][i]=ch[f[x]][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line"><span class="type">int</span> n=<span class="built_in">strlen</span>(s),x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">&#x27;P&#x27;</span>) tag[x]=++cnt,num[cnt]=x;<span class="comment">//单词树 </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">&#x27;B&#x27;</span>) x=fa[x];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!ch[x][s[i]-<span class="string">&#x27;a&#x27;</span>]) ch[x][s[i]-<span class="string">&#x27;a&#x27;</span>]=++tot,fa[tot]=x;</span><br><span class="line">x=ch[x][s[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">getfail</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i++) <span class="built_in">add</span>(l[i],i);</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">read</span>(m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">read</span>(q[i].x),<span class="built_in">read</span>(q[i].y),q[i].id=i;</span><br><span class="line"><span class="built_in">sort</span>(q+<span class="number">1</span>,q+<span class="number">1</span>+m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>,p=<span class="number">1</span>;i&lt;=m;i=p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=num[q[i].y];j;j=fa[j])</span><br><span class="line"><span class="built_in">modify</span>(ll[j],<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(q[p].y==q[i].y)</span><br><span class="line">&#123;</span><br><span class="line">ans[q[p].id]=<span class="built_in">query</span>(rr[num[q[p].x]])-<span class="built_in">query</span>(ll[num[q[p].x]]<span class="number">-1</span>);</span><br><span class="line">p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(tr,<span class="number">0</span>,<span class="built_in">sizeof</span>(tr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T f=<span class="number">1</span>;a=<span class="number">0</span>;<span class="type">char</span> s=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(s&lt;<span class="string">&#x27;0&#x27;</span>||s&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(s==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(s&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;s&gt;=<span class="string">&#x27;0&#x27;</span>)&#123;a=a*<span class="number">10</span>+s-<span class="string">&#x27;0&#x27;</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">a*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ch[<span class="number">100100</span>][<span class="number">26</span>],tot,tag[<span class="number">100100</span>];</span><br><span class="line"><span class="type">int</span> l[<span class="number">100100</span>],f[<span class="number">100100</span>],cnt,fa[<span class="number">100100</span>];</span><br><span class="line"><span class="type">char</span> s[<span class="number">100100</span>];</span><br><span class="line"><span class="type">int</span> m,ans[<span class="number">100100</span>],num[<span class="number">100100</span>],idx,ll[<span class="number">100100</span>],rr[<span class="number">100100</span>];</span><br><span class="line"><span class="type">int</span> tr[<span class="number">100100</span>],ql[<span class="number">100100</span>],qr[<span class="number">100100</span>],tmp[<span class="number">100100</span>][<span class="number">26</span>];</span><br><span class="line"><span class="comment">//num与tag互为反函数  tot:总结点数 cnt:单词数 fa[]与ch[][]互为反函数 ll[],rr[]:子树dfs序左右两端  tr:树状数组 </span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;x&lt;=idx;x+=<span class="built_in">lowbit</span>(x)) tr[x]+=v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;x;x-=<span class="built_in">lowbit</span>(x)) sum+=tr[x];</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ne,to;</span><br><span class="line">&#125;e[<span class="number">100100</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> head[<span class="number">100100</span>],bcnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++bcnt].to=v;</span><br><span class="line">e[bcnt].ne=head[u];</span><br><span class="line">head[u]=bcnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll[x]=++idx;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=head[x];i;i=e[i].ne) <span class="built_in">dfs</span>(e[i].to);</span><br><span class="line">rr[x]=idx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x,y,id;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> node &amp;a) <span class="type">const</span>&#123; <span class="keyword">return</span> y&lt;a.y;&#125;</span><br><span class="line">&#125;q[<span class="number">100100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">getfail</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line"><span class="keyword">if</span>(ch[<span class="number">0</span>][i]) q.<span class="built_in">push</span>(ch[<span class="number">0</span>][i]);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x=q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tag[ch[f[x]][i]]) l[ch[x][i]]=ch[f[x]][i];</span><br><span class="line"><span class="keyword">else</span> l[ch[x][i]]=l[ch[f[x]][i]];</span><br><span class="line"><span class="keyword">if</span>(ch[x][i]) f[ch[x][i]]=ch[f[x]][i],q.<span class="built_in">push</span>(ch[x][i]);</span><br><span class="line"><span class="keyword">else</span> ch[x][i]=ch[f[x]][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFS</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">modify</span>(ll[x],<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(tag[x])</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=ql[tag[x]];i&lt;=qr[tag[x]];i++)</span><br><span class="line">ans[q[i].id]=<span class="built_in">query</span>(rr[num[q[i].x]])-<span class="built_in">query</span>(ll[num[q[i].x]]<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++) <span class="keyword">if</span>(tmp[x][i]) <span class="built_in">DFS</span>(tmp[x][i]);</span><br><span class="line"><span class="built_in">modify</span>(ll[x],<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line"><span class="type">int</span> n=<span class="built_in">strlen</span>(s),x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">&#x27;P&#x27;</span>) tag[x]=++cnt,num[cnt]=x;<span class="comment">//单词树 </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">&#x27;B&#x27;</span>) x=fa[x];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!ch[x][s[i]-<span class="string">&#x27;a&#x27;</span>]) ch[x][s[i]-<span class="string">&#x27;a&#x27;</span>]=++tot,fa[tot]=x,tmp[x][s[i]-<span class="string">&#x27;a&#x27;</span>]=tot;</span><br><span class="line">x=ch[x][s[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">getfail</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i++) <span class="built_in">add</span>(l[i],i);<span class="comment">//当然也可以用 add(f[i],i);</span></span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">read</span>(m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">read</span>(q[i].x),<span class="built_in">read</span>(q[i].y),q[i].id=i;</span><br><span class="line"><span class="built_in">sort</span>(q+<span class="number">1</span>,q+<span class="number">1</span>+m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>,p=<span class="number">1</span>;i&lt;=m;i=p)</span><br><span class="line">&#123;</span><br><span class="line">ql[q[i].y]=i;</span><br><span class="line"><span class="keyword">while</span>(q[p].y==q[i].y) p++;</span><br><span class="line">qr[q[i].y]=p<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">DFS</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="这道题我们引入了fail-tree。"><a href="#这道题我们引入了fail-tree。" class="headerlink" title="这道题我们引入了fail tree。"></a>这道题我们引入了fail tree。</h4><ul><li>在AC自动机中，我们知道，当我们从节点x出发一直沿着f指针进行跳跃直到0时，一路上所有单词节点都被包含在x在trie树中所表示的字符串中。</li><li>所以当我们想要找trie树中某一字符串y所包含的某一模式串x的次数时，我们便可以在trie树上从该字符串的结尾点向上跳，每跳一个，我们便要记录$f[y]$,$f[f[y]]$,$f[f[f[y]]]$,…,是不是单词节点x。</li><li>那问题如果反过来，询问一个模式串在其他几个模式串中出现过呢？</li><li>这时我们就想到了可以以每条fail为边建一颗fail tree(因为每个节点有且仅有一条fail边对应树中每个节点有且仅有一个父亲节点)，此时我们可以直接统计以节点x为根的子树中有几个单词节点即可。</li><li>好了，现在回到这道题上，对于询问(x,y),我们可以从单词y所对应的节点在trie上一直跳父边到0，并在每一节点上加上1，最后只需统计单词x所对应的节点为根的子树中有多少1即可。(见暴力70分)</li><li>但是对于单词aaaab和aaaaaa等包含大量重复节点的询问，这样是非常浪费的，所以便有了正解中的第二遍在trie树上跑的dfs,这样便省去了多余的运算。</li></ul><h1 id="后缀自动机"><a href="#后缀自动机" class="headerlink" title="后缀自动机"></a>后缀自动机</h1><p>将后缀树中相同结束位置的后缀节点合并为一个节点的最简状态自动机。</p><h2 id="P3804-【模板】后缀自动机"><a href="#P3804-【模板】后缀自动机" class="headerlink" title="P3804 【模板】后缀自动机"></a><a href="https://www.luogu.org/problemnew/show/P3804">P3804 【模板】后缀自动机</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="type">int</span> son[N&lt;&lt;<span class="number">1</span>][<span class="number">26</span>],link[N&lt;&lt;<span class="number">1</span>],size[N&lt;&lt;<span class="number">1</span>],l[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">1</span>,last=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> np=++cnt,p=last;</span><br><span class="line">last=np;l[np]=l[p]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;!son[p][s]&amp;&amp;p;p=link[p]) son[p][s]=np;</span><br><span class="line"><span class="keyword">if</span>(!p) link[np]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> q=son[p][s];</span><br><span class="line"><span class="keyword">if</span>(l[q]==l[p]+<span class="number">1</span>) link[np]=q;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> nq=++cnt;</span><br><span class="line">l[nq]=l[p]+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(son[nq],son[q],<span class="built_in">sizeof</span>(son[q]));</span><br><span class="line">link[nq]=link[q];link[q]=link[np]=nq;</span><br><span class="line"><span class="keyword">for</span>(;son[p][s]==q;p=link[p]) son[p][s]=nq;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">size[np]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tong[N&lt;&lt;<span class="number">1</span>],sa[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line">ll ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">ins</span>(s[i]-<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) tong[l[i]]++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) tong[i]+=tong[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) sa[tong[l[i]]--]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=cnt;i;i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> p=sa[i];</span><br><span class="line">size[link[p]]+=size[p];</span><br><span class="line"><span class="keyword">if</span>(size[p]&gt;<span class="number">1</span>) ans=<span class="built_in">max</span>(ans,<span class="number">1ll</span>*size[p]*l[p]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="一个节点x通过link连到初始点的路径的意义是该点所表示的最长字符串的后缀依次在状态-x-link-x-link-link-x-…-中。具体学习请看hihocoder。"><a href="#一个节点x通过link连到初始点的路径的意义是该点所表示的最长字符串的后缀依次在状态-x-link-x-link-link-x-…-中。具体学习请看hihocoder。" class="headerlink" title="一个节点x通过link连到初始点的路径的意义是该点所表示的最长字符串的后缀依次在状态$x,link[x],link[link[x]]…$中。具体学习请看hihocoder。"></a>一个节点x通过link连到初始点的路径的意义是该点所表示的最长字符串的后缀依次在状态$x,link[x],link[link[x]]…$中。具体学习请看<a href="http://hihocoder.com/problemset/problem/1441">hihocoder</a>。</h4><h2 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h2><h2 id="1-求本质不同的子串个数"><a href="#1-求本质不同的子串个数" class="headerlink" title="1.求本质不同的子串个数"></a>1.求本质不同的子串个数</h2><h3 id="1445-后缀自动机二·重复旋律5"><a href="#1445-后缀自动机二·重复旋律5" class="headerlink" title="1445 : 后缀自动机二·重复旋律5"></a><a href="http://hihocoder.com/problemset/problem/1445?sid=1462841">1445 : 后缀自动机二·重复旋律5</a></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="type">int</span> l[N&lt;&lt;<span class="number">1</span>],link[N&lt;&lt;<span class="number">1</span>],son[N&lt;&lt;<span class="number">1</span>][<span class="number">26</span>];</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">1</span>,last=<span class="number">1</span>;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> np=++cnt,p=last;</span><br><span class="line">last=np;l[np]=l[p]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;!son[p][s]&amp;&amp;p;p=link[p]) son[p][s]=np;</span><br><span class="line"><span class="keyword">if</span>(!p) link[np]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> q=son[p][s];</span><br><span class="line"><span class="keyword">if</span>(l[q]==l[p]+<span class="number">1</span>) link[np]=q;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> nq=++cnt;</span><br><span class="line">l[nq]=l[p]+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(son[nq],son[q],<span class="built_in">sizeof</span>(son[q]));</span><br><span class="line">link[nq]=link[q];link[q]=link[np]=nq;</span><br><span class="line"><span class="keyword">for</span>(;son[p][s]==q;p=link[p]) son[p][s]=nq;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans+=<span class="number">1ll</span>*(l[np]-l[link[np]]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line"><span class="type">int</span> n=<span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">ins</span>(s[i]-<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="性质：每新加入一个字符，他都会对答案贡献-l-p-l-link-p"><a href="#性质：每新加入一个字符，他都会对答案贡献-l-p-l-link-p" class="headerlink" title="性质：每新加入一个字符，他都会对答案贡献 $ l[p]-l[link[p]] $"></a>性质：每新加入一个字符，他都会对答案贡献 $ l[p]-l[link[p]] $</h4><h4 id="练习1：P4070-SDOI2016-生成魔咒-与上一道实际上是同一道题。"><a href="#练习1：P4070-SDOI2016-生成魔咒-与上一道实际上是同一道题。" class="headerlink" title="练习1：P4070 [SDOI2016]生成魔咒,与上一道实际上是同一道题。"></a>练习1：<a href="https://www.luogu.org/problemnew/show/P4070">P4070 [SDOI2016]生成魔咒</a>,<del>与上一道实际上是同一道题</del>。</h4><h4 id="练习2：P3975-TJOI2015-弦论-将信息放在节点上，然后从根节点往下，每个点从’a’到’z’搜索。具体看代码。"><a href="#练习2：P3975-TJOI2015-弦论-将信息放在节点上，然后从根节点往下，每个点从’a’到’z’搜索。具体看代码。" class="headerlink" title="练习2：P3975 [TJOI2015]弦论,将信息放在节点上，然后从根节点往下，每个点从’a’到’z’搜索。具体看代码。"></a>练习2：<a href="https://www.luogu.org/problemnew/show/P3975">P3975 [TJOI2015]弦论</a>,将信息放在节点上，然后从根节点往下，每个点从’a’到’z’搜索。具体看代码。</h4><h4 id="练习一"><a href="#练习一" class="headerlink" title="练习一"></a>练习一</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span>+<span class="number">100</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"></span><br><span class="line">ll ans; </span><br><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; son[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> l[N&lt;&lt;<span class="number">1</span>],link[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> cnt,last;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> np=++cnt,p=last;</span><br><span class="line">last=np;l[np]=l[p]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;p&amp;&amp;!son[p][s];p=link[p]) son[p][s]=np;</span><br><span class="line"><span class="keyword">if</span>(!p) link[np]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> q=son[p][s];</span><br><span class="line"><span class="keyword">if</span>(l[q]==l[p]+<span class="number">1</span>) link[np]=q;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> nq=++cnt;</span><br><span class="line">l[nq]=l[p]+<span class="number">1</span>;</span><br><span class="line">son[nq]=son[q];</span><br><span class="line">link[nq]=link[q];link[q]=link[np]=nq;</span><br><span class="line"><span class="keyword">for</span>(;son[p][s]==q;p=link[p]) son[p][s]=nq;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans+=<span class="number">1ll</span>*(l[np]-l[link[np]]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">last=cnt=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line"><span class="built_in">ins</span>(x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="练习二"><a href="#练习二" class="headerlink" title="练习二"></a>练习二</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span>+<span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="type">int</span> son[N][<span class="number">30</span>],size[N],l[N],link[N];</span><br><span class="line"><span class="type">int</span> last,cnt;</span><br><span class="line"><span class="type">int</span> tong[N],sa[N];</span><br><span class="line"><span class="type">int</span> sum[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> np=++cnt,p=last;</span><br><span class="line">last=np;l[np]=l[p]+<span class="number">1</span>;</span><br><span class="line">size[np]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;p&amp;&amp;!son[p][s];p=link[p]) son[p][s]=np;</span><br><span class="line"><span class="keyword">if</span>(!p) link[np]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> q=son[p][s];</span><br><span class="line"><span class="keyword">if</span>(l[q]==l[p]+<span class="number">1</span>) link[np]=q;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> nq=++cnt;</span><br><span class="line">l[nq]=l[p]+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(son[nq],son[q],<span class="built_in">sizeof</span>(son[q]));</span><br><span class="line">link[nq]=link[q];link[q]=link[np]=nq;</span><br><span class="line"><span class="keyword">for</span>(;son[p][s]==q;p=link[p]) son[p][s]=nq;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> opt,k,n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s%d%d&quot;</span>,s,&amp;opt,&amp;k);</span><br><span class="line">n=<span class="built_in">strlen</span>(s);</span><br><span class="line">last=cnt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">ins</span>(s[i]-<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) tong[l[i]]++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) tong[i]+=tong[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) sa[tong[l[i]]--]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=cnt;i;i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> p=sa[i];</span><br><span class="line"><span class="keyword">if</span>(opt)</span><br><span class="line">size[link[p]]+=size[p];</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">size[p]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">size[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=cnt;i;i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> p=sa[i];</span><br><span class="line">sum[p]=size[p];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++)</span><br><span class="line"><span class="keyword">if</span>(son[p][j]) sum[p]+=sum[son[p][j]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(k&gt;sum[<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> x=<span class="number">1</span>,p;</span><br><span class="line"><span class="keyword">while</span>(k&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">p=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(sum[son[x][p]]&lt;k) k-=sum[son[x][p]],p++;</span><br><span class="line">x=son[x][p];</span><br><span class="line"><span class="built_in">putchar</span>(p+<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">k-=size[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-求各子串出现的次数"><a href="#2-求各子串出现的次数" class="headerlink" title="2.求各子串出现的次数"></a>2.求各子串出现的次数</h2><h3 id="1445-后缀自动机二·重复旋律5-1"><a href="#1445-后缀自动机二·重复旋律5-1" class="headerlink" title="1445 : 后缀自动机二·重复旋律5"></a><a href="http://hihocoder.com/problemset/problem/1445">1445 : 后缀自动机二·重复旋律5</a></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="type">int</span> l[N&lt;&lt;<span class="number">1</span>],link[N&lt;&lt;<span class="number">1</span>],son[N&lt;&lt;<span class="number">1</span>][<span class="number">30</span>],size[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> last=<span class="number">1</span>,cnt=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> np=++cnt,p=last;</span><br><span class="line">last=np;l[np]=l[p]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;p&amp;&amp;!son[p][s];p=link[p]) son[p][s]=np;</span><br><span class="line"><span class="keyword">if</span>(!p) link[np]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> q=son[p][s];</span><br><span class="line"><span class="keyword">if</span>(l[q]==l[p]+<span class="number">1</span>) link[np]=q;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> nq=++cnt;</span><br><span class="line">l[nq]=l[p]+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(son[nq],son[q],<span class="built_in">sizeof</span>(son[q]));</span><br><span class="line">link[nq]=link[q],link[q]=link[np]=nq;</span><br><span class="line"><span class="keyword">for</span>(;son[p][s]==q;p=link[p]) son[p][s]=nq;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">size[np]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tong[N&lt;&lt;<span class="number">1</span>],sa[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> ans[N],n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">n=<span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">ins</span>(s[i]-<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) tong[l[i]]++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) tong[i]+=tong[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) sa[tong[l[i]]--]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=cnt;i;i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> p=sa[i];</span><br><span class="line">size[link[p]]+=size[p];</span><br><span class="line">ans[l[p]]=<span class="built_in">max</span>(ans[l[p]],size[p]);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=n<span class="number">-1</span>;i;i--) ans[i]=<span class="built_in">max</span>(ans[i],ans[i+<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在建完后缀自动机后，-可以先用桶排序将所有节点的长度进行排序，按倒序更新每个节点的size，但是这个size只是以当前节点为结尾的最长子串的出现次数，并没有更新它的后缀的出现次数；"><a href="#在建完后缀自动机后，-可以先用桶排序将所有节点的长度进行排序，按倒序更新每个节点的size，但是这个size只是以当前节点为结尾的最长子串的出现次数，并没有更新它的后缀的出现次数；" class="headerlink" title="在建完后缀自动机后， 可以先用桶排序将所有节点的长度进行排序，按倒序更新每个节点的size，但是这个size只是以当前节点为结尾的最长子串的出现次数，并没有更新它的后缀的出现次数；"></a>在建完后缀自动机后， 可以先用桶排序将所有节点的长度进行排序，按倒序更新每个节点的size，但是这个size只是以当前节点为结尾的最长子串的出现次数，并没有更新它的后缀的出现次数；</h4><h4 id="这时就需要用到一个结论：长度小的子串出现的次数大于等于比它长的子串出现的次数。"><a href="#这时就需要用到一个结论：长度小的子串出现的次数大于等于比它长的子串出现的次数。" class="headerlink" title="这时就需要用到一个结论：长度小的子串出现的次数大于等于比它长的子串出现的次数。"></a>这时就需要用到一个结论：长度小的子串出现的次数大于等于比它长的子串出现的次数。</h4><h4 id="然后只需在最后将ans与后一个取一个max即可。"><a href="#然后只需在最后将ans与后一个取一个max即可。" class="headerlink" title="然后只需在最后将ans与后一个取一个max即可。"></a>然后只需在最后将ans与后一个取一个max即可。</h4><h2 id="3-求多个串之间的信息"><a href="#3-求多个串之间的信息" class="headerlink" title="3.求多个串之间的信息"></a>3.求多个串之间的信息</h2><h3 id="1457-后缀自动机四·重复旋律7"><a href="#1457-后缀自动机四·重复旋律7" class="headerlink" title="1457 : 后缀自动机四·重复旋律7"></a><a href="http://hihocoder.com/problemset/problem/1457">1457 : 后缀自动机四·重复旋律7</a></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">510000</span>;</span><br><span class="line"><span class="type">char</span> s[<span class="number">300000</span>];</span><br><span class="line"><span class="type">int</span> son[N][<span class="number">26</span>],fa[N];</span><br><span class="line"><span class="type">int</span> l[N],last=<span class="number">1</span>,cnt=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> np=++cnt,p=last;</span><br><span class="line">last=np;l[np]=l[p]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;!son[p][s]&amp;&amp;p;p=fa[p]) son[p][s]=np;</span><br><span class="line"><span class="keyword">if</span>(!p) fa[np]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> q=son[p][s];</span><br><span class="line"><span class="keyword">if</span>(l[q]==l[p]+<span class="number">1</span>) fa[np]=q;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> nq=++cnt;</span><br><span class="line">l[nq]=l[p]+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(son[nq],son[q],<span class="built_in">sizeof</span>(son[q]));</span><br><span class="line">fa[nq]=fa[q];fa[q]=fa[np]=nq;</span><br><span class="line"><span class="keyword">for</span>(;son[p][s]==q;p=fa[p]) son[p][s]=nq;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n=<span class="built_in">strlen</span>(s),p=<span class="number">1</span>,len=<span class="number">0</span>,c,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">c=(<span class="type">int</span>)(s[i]-<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(son[p][c]) len++,p=son[p][c];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(;p&amp;&amp;!son[p][c];p=fa[p]);</span><br><span class="line"><span class="keyword">if</span>(p) len=l[p]+<span class="number">1</span>,p=son[p][c];</span><br><span class="line"><span class="keyword">else</span> p=<span class="number">1</span>,len=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans=<span class="built_in">max</span>(ans,len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line"><span class="type">int</span> n=<span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">ins</span>((<span class="type">int</span>)(s[i]-<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line"><span class="built_in">work</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="将每个字符串之间用’-’连接成一个字符串并建立Sam，有一个显然的结论：对于一个节点（状态），能到达它的路径个数便是该节点（状态）中子串的个数。对于这道题我们特判一下，不遍历为’-’的边，因为一个字串的后缀和另一个字串的前缀组成的子串必定包含’-’。"><a href="#将每个字符串之间用’-’连接成一个字符串并建立Sam，有一个显然的结论：对于一个节点（状态），能到达它的路径个数便是该节点（状态）中子串的个数。对于这道题我们特判一下，不遍历为’-’的边，因为一个字串的后缀和另一个字串的前缀组成的子串必定包含’-’。" class="headerlink" title="将每个字符串之间用’:’连接成一个字符串并建立Sam，有一个显然的结论：对于一个节点（状态），能到达它的路径个数便是该节点（状态）中子串的个数。对于这道题我们特判一下，不遍历为’:’的边，因为一个字串的后缀和另一个字串的前缀组成的子串必定包含’:’。"></a>将每个字符串之间用’:’连接成一个字符串并建立Sam，有一个显然的结论：对于一个节点（状态），能到达它的路径个数便是该节点（状态）中子串的个数。对于这道题我们特判一下，不遍历为’:’的边，因为一个字串的后缀和另一个字串的前缀组成的子串必定包含’:’。</h4><h3 id="练习：求n个字符串中本质不同的子串。"><a href="#练习：求n个字符串中本质不同的子串。" class="headerlink" title="练习：求n个字符串中本质不同的子串。"></a>练习：求n个字符串中本质不同的子串。</h3><p>题解：同上，用’:’连接字符串统计即可。</p><h2 id="4-求LCS（字符串匹配）"><a href="#4-求LCS（字符串匹配）" class="headerlink" title="4.求LCS（字符串匹配）"></a>4.求LCS（字符串匹配）</h2><h3 id="SP1811-LCS-Longest-Common-Substring"><a href="#SP1811-LCS-Longest-Common-Substring" class="headerlink" title="SP1811 LCS - Longest Common Substring"></a><a href="https://www.luogu.org/problemnew/show/SP1811">SP1811 LCS - Longest Common Substring</a></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">510000</span>;</span><br><span class="line"><span class="type">char</span> s[<span class="number">300000</span>];</span><br><span class="line"><span class="type">int</span> son[N][<span class="number">26</span>],fa[N];</span><br><span class="line"><span class="type">int</span> l[N],last=<span class="number">1</span>,cnt=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> np=++cnt,p=last;</span><br><span class="line">last=np;l[np]=l[p]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;!son[p][s]&amp;&amp;p;p=fa[p]) son[p][s]=np;</span><br><span class="line"><span class="keyword">if</span>(!p) fa[np]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> q=son[p][s];</span><br><span class="line"><span class="keyword">if</span>(l[q]==l[p]+<span class="number">1</span>) fa[np]=q;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> nq=++cnt;</span><br><span class="line">l[nq]=l[p]+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(son[nq],son[q],<span class="built_in">sizeof</span>(son[q]));</span><br><span class="line">fa[nq]=fa[q];fa[q]=fa[np]=nq;</span><br><span class="line"><span class="keyword">for</span>(;son[p][s]==q;p=fa[p]) son[p][s]=nq;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n=<span class="built_in">strlen</span>(s),p=<span class="number">1</span>,len=<span class="number">0</span>,c,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">c=(<span class="type">int</span>)(s[i]-<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(son[p][c]) len++,p=son[p][c];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(;p&amp;&amp;!son[p][c];p=fa[p]);</span><br><span class="line"><span class="keyword">if</span>(p) len=l[p]+<span class="number">1</span>,p=son[p][c];</span><br><span class="line"><span class="keyword">else</span> p=<span class="number">1</span>,len=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans=<span class="built_in">max</span>(ans,len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line"><span class="type">int</span> n=<span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">ins</span>((<span class="type">int</span>)(s[i]-<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line"><span class="built_in">work</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;KMP&quot;&gt;&lt;a href=&quot;#KMP&quot; class=&quot;headerlink&quot; title=&quot;KMP&quot;&gt;&lt;/a&gt;KMP&lt;/h1&gt;&lt;p&gt;时间复杂度为O(n)的字符串匹配算法。&lt;/p&gt;
&lt;h2 id=&quot;应用：&quot;&gt;&lt;a href=&quot;#应用：&quot; class=&quot;headerlink&quot; title=&quot;应用：&quot;&gt;&lt;/a&gt;应用：&lt;/h2&gt;&lt;h2 id=&quot;1-单一子串和模式串匹配&quot;&gt;&lt;a href=&quot;#1-单一子串和模式串匹配&quot; class=&quot;headerlink&quot; title=&quot;1.单一子串和模式串匹配&quot;&gt;&lt;/a&gt;1.单一子串和模式串匹配&lt;/h2&gt;&lt;h4 id=&quot;P3375-【模板】KMP字符串匹配&quot;&gt;&lt;a href=&quot;#P3375-【模板】KMP字符串匹配&quot; class=&quot;headerlink&quot; title=&quot;P3375 【模板】KMP字符串匹配&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P3375&quot;&gt;P3375 【模板】KMP字符串匹配&lt;/a&gt;&lt;/h4&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; std;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; f[&lt;span class=&quot;number&quot;&gt;1001000&lt;/span&gt;];&lt;span class=&quot;comment&quot;&gt;//fail数组下标从1开始 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; s1[&lt;span class=&quot;number&quot;&gt;1001000&lt;/span&gt;],s2[&lt;span class=&quot;number&quot;&gt;1001000&lt;/span&gt;];&lt;span class=&quot;comment&quot;&gt;//字符串下表从0开始 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; l1,l2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;kmp&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;register&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;i&amp;lt;l2;i++) &lt;span class=&quot;comment&quot;&gt;//处理2~l2的fail数组(f[1]=0) &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; j=f[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(j&amp;amp;&amp;amp;s2[j]!=s2[i]) j=f[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		f[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]=(s2[j]==s2[i])?j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;register&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;=l1;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(j&amp;amp;&amp;amp;s1[i]!=s2[j]) j=f[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(s1[i]==s2[j]) j++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(j==l2) &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;%d&#92;n&amp;quot;&lt;/span&gt;,i-j+&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;%s&amp;quot;&lt;/span&gt;,s1);&lt;span class=&quot;comment&quot;&gt;//主串 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;%s&amp;quot;&lt;/span&gt;,s2);&lt;span class=&quot;comment&quot;&gt;//模式串 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	l1=&lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(s1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	l2=&lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(s2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;kmp&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;get&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;register&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;i&amp;lt;=l2;i++) &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;%d &amp;quot;&lt;/span&gt;,f[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="字符串" scheme="http://syrsteven.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>二分图有关定理</title>
    <link href="http://syrsteven.github.io/post/1effb282.html"/>
    <id>http://syrsteven.github.io/post/1effb282.html</id>
    <published>2019-02-21T13:32:07.000Z</published>
    <updated>2023-09-01T20:06:21.712Z</updated>
    
    <content type="html"><![CDATA[<h4 id="最小点覆盖"><a href="#最小点覆盖" class="headerlink" title="最小点覆盖"></a>最小点覆盖</h4><p>定义：<br>一个点为一条边的任意顶点，则称它为一个点覆盖；用最少点覆盖二分图的所有匹配为二分图的最小点覆盖</p><p>一个二分图的最小点覆盖等于该二分图的最大匹配</p><p>证明：</p><p>反证，若一个二分图的最小点覆盖不等于该二分图的最大匹配，则存在一条边未被覆盖，该二分图存在更大的匹配，不存在，证毕。</p><h4 id="DAG的最小不相交路径覆盖"><a href="#DAG的最小不相交路径覆盖" class="headerlink" title="DAG的最小不相交路径覆盖"></a>DAG的最小不相交路径覆盖</h4><span id="more"></span><p>定义：<br>在一个有向图中，找出最少的不相交路径，使得这些路径经过了所有的点。</p><p>把原图中的每个点V拆成Vx和Vy，如果有一条有向边A−&gt;B，那么就加边(Ax,By)。这样就得到了一个二分图，最小路径覆盖&#x3D;原图的节点数-新图最大匹配。</p><p>证明：<br>一开始每个点都是独立的为一条路径，总共有n条不相交路径。我们每次在二分图里找一条匹配边就相当于把两条路径合成了一条路径，也就相当于路径数减少了1。所以找到了几条匹配边，路径数就减少了多少。所以有最小路径覆盖&#x3D;原图的结点数-新图的最大匹配数。</p><p>因为路径之间不能有公共点，所以加的边之间也不能有公共点，这就是匹配的定义。</p><p><a href="http://poj.org/problem?id=1422">POJ1422</a></p><h4 id="DAG的最小可相交路径覆盖"><a href="#DAG的最小可相交路径覆盖" class="headerlink" title="DAG的最小可相交路径覆盖"></a>DAG的最小可相交路径覆盖</h4><p>定义：<br>在一个有向图中，找出最少的可相交路径，使得这些路径经过了所有的点。</p><p>用Floyd判断任意两点之间的连通性，若X与Y相连通，连接X,Y。然后将其转化为DAG的最小不相交路径覆盖</p><p>证明：<br>为了连通两个点，某条路径可能经过其它路径的中间点。比如1-&gt;3-&gt;4，2-&gt;4-&gt;5。但是如果两个点a和b是连通的，只不过中间需要经过其它的点，那么可以在这两个点之间加边，那么a就可以直达b，不必经过中点的，那么就转化成了最小不相交路径覆盖。</p><p><a href="https://www.cnblogs.com/bofengyu/p/5469040.html">POJ2594</a></p><h4 id="偏序集的最大反链"><a href="#偏序集的最大反链" class="headerlink" title="偏序集的最大反链"></a>偏序集的最大反链</h4><p>定义：在偏序集X中。链是指一个集合SS，SS中的元素互相都有偏序关系。而反链则是指元素相互之间都没有关系的集合。偏序集中的最大反链，其实也就是偏序集中的最大独立集（只要能够到达都算相连）。</p><p>定理：DilworthDilworth定理，对于任何偏序集，都有最大反链&#x3D;最小链的划分，最大链&#x3D;最小反链的划分。</p><p>通过DilworthDilworth定理，我们可以把偏序集中的最大反链问题转化为最小可相交路径覆盖问题。</p><h4 id="无向图的最大独立数："><a href="#无向图的最大独立数：" class="headerlink" title="无向图的最大独立数："></a>无向图的最大独立数：</h4><p>从V个顶点中选出k个顶，使得这k个顶互不相邻。那么最大的k就是这个图的最大独立数</p><h4 id="无向图的最大团："><a href="#无向图的最大团：" class="headerlink" title="无向图的最大团："></a>无向图的最大团：</h4><p>从VV个顶点选出kk个顶点，使得这kk个顶构成一个完全图，即该子图任意两个顶都有直接的边</p><h4 id="最小路径覆盖-原图不一定是二分图，但必须是有向无环图，拆点构造二分图-："><a href="#最小路径覆盖-原图不一定是二分图，但必须是有向无环图，拆点构造二分图-：" class="headerlink" title="最小路径覆盖(原图不一定是二分图，但必须是有向无环图，拆点构造二分图)："></a>最小路径覆盖(原图不一定是二分图，但必须是有向无环图，拆点构造二分图)：</h4><p>在图中找一些路径，使之覆盖了图中的所有顶点，且任何一个顶点有且只有一条路径与之关联<br>最小路径覆盖 &#x3D; |V||V| −− 最大匹配数</p><h4 id="最小边覆盖-原图是二分图-："><a href="#最小边覆盖-原图是二分图-：" class="headerlink" title="最小边覆盖(原图是二分图)："></a>最小边覆盖(原图是二分图)：</h4><p>在图中找一些边，使之覆盖了图中所有顶点，且任何一个顶点有且只有一条边与之关联。<br>最小边覆盖 &#x3D; 最大独立集 &#x3D; |V||V| - 最大匹配数</p><h4 id="最小顶点覆盖："><a href="#最小顶点覆盖：" class="headerlink" title="最小顶点覆盖："></a>最小顶点覆盖：</h4><p>用最少的点（左右两边集合的点）让每条边都至少和其中一个点关联</p><h3 id="一些转换"><a href="#一些转换" class="headerlink" title="一些转换"></a>一些转换</h3><p>最大团 &#x3D; 补图的最大独立集<br>最小边覆盖 &#x3D; 二分图最大独立集 &#x3D; |V||V| - 最小路径覆盖 最大匹配<br>最小路径覆盖 &#x3D; |V||V| - 最大匹配数<br>最小顶点覆盖 &#x3D; 最大匹配数<br>最小顶点覆盖 + 最大独立数 &#x3D; |V||V|<br>最小割 &#x3D; 最小点权覆盖集 &#x3D; 点权和 - 最大点权独立集 &#x3D; 最大流</p><h4 id="本文转载：https-blog-csdn-net-u013043514-article-details-48206577"><a href="#本文转载：https-blog-csdn-net-u013043514-article-details-48206577" class="headerlink" title="本文转载：https://blog.csdn.net/u013043514/article/details/48206577"></a>本文转载：<a href="https://blog.csdn.net/u013043514/article/details/48206577">https://blog.csdn.net/u013043514/article/details/48206577</a></h4>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;最小点覆盖&quot;&gt;&lt;a href=&quot;#最小点覆盖&quot; class=&quot;headerlink&quot; title=&quot;最小点覆盖&quot;&gt;&lt;/a&gt;最小点覆盖&lt;/h4&gt;&lt;p&gt;定义：&lt;br&gt;一个点为一条边的任意顶点，则称它为一个点覆盖；用最少点覆盖二分图的所有匹配为二分图的最小点覆盖&lt;/p&gt;
&lt;p&gt;一个二分图的最小点覆盖等于该二分图的最大匹配&lt;/p&gt;
&lt;p&gt;证明：&lt;/p&gt;
&lt;p&gt;反证，若一个二分图的最小点覆盖不等于该二分图的最大匹配，则存在一条边未被覆盖，该二分图存在更大的匹配，不存在，证毕。&lt;/p&gt;
&lt;h4 id=&quot;DAG的最小不相交路径覆盖&quot;&gt;&lt;a href=&quot;#DAG的最小不相交路径覆盖&quot; class=&quot;headerlink&quot; title=&quot;DAG的最小不相交路径覆盖&quot;&gt;&lt;/a&gt;DAG的最小不相交路径覆盖&lt;/h4&gt;</summary>
    
    
    
    
    <category term="图论" scheme="http://syrsteven.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="网络流" scheme="http://syrsteven.github.io/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>网络流</title>
    <link href="http://syrsteven.github.io/post/89b04f08.html"/>
    <id>http://syrsteven.github.io/post/89b04f08.html</id>
    <published>2019-02-21T11:02:10.000Z</published>
    <updated>2023-09-01T20:06:21.720Z</updated>
    
    <content type="html"><![CDATA[<h2 id="板子"><a href="#板子" class="headerlink" title="板子"></a>板子</h2><h3 id="最大流"><a href="#最大流" class="headerlink" title="最大流"></a><a href="https://www.luogu.org/problemnew/show/P3376">最大流</a></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span>+<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T f=<span class="number">1</span>;a=<span class="number">0</span>;<span class="type">char</span> s=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(s&lt;<span class="string">&#x27;0&#x27;</span>||s&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(s==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(s&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;s&gt;=<span class="string">&#x27;0&#x27;</span>)&#123;a=a*<span class="number">10</span>+s-<span class="string">&#x27;0&#x27;</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">a*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,s,t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ne,to,w;</span><br><span class="line">&#125;edge[<span class="number">200100</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> head[N],cnt=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">edge[++cnt].to=v;</span><br><span class="line">edge[cnt].ne=head[u];</span><br><span class="line">edge[cnt].w=w;</span><br><span class="line">head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> d[N];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fill</span>(d+<span class="number">1</span>,d+<span class="number">1</span>+n,<span class="number">-1</span>);</span><br><span class="line">d[s]=<span class="number">0</span>;</span><br><span class="line">q.<span class="built_in">push</span>(s);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=head[u];i;i=edge[i].ne)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v=edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(d[v]!=<span class="number">-1</span>||edge[i].w&lt;=<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">d[v]=d[u]+<span class="number">1</span>;</span><br><span class="line">q.<span class="built_in">push</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> d[t]!=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> mn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(u==t||mn&lt;=<span class="number">0</span>) <span class="keyword">return</span> mn;</span><br><span class="line"><span class="type">int</span> flow=<span class="number">0</span>,tmpf=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=head[u];i;i=edge[i].ne)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v=edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(d[v]==d[u]+<span class="number">1</span>&amp;&amp;(tmpf=<span class="built_in">dinic</span>(v,<span class="built_in">min</span>(mn,edge[i].w)))&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">mn-=tmpf;</span><br><span class="line">flow+=tmpf;</span><br><span class="line">edge[i].w-=tmpf;</span><br><span class="line">edge[i^<span class="number">1</span>].w+=tmpf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!mn) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flow) d[u]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> u,v,w,ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">read</span>(n),<span class="built_in">read</span>(m),<span class="built_in">read</span>(s),<span class="built_in">read</span>(t);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(u),<span class="built_in">read</span>(v),<span class="built_in">read</span>(w);</span><br><span class="line"><span class="built_in">add</span>(u,v,w);</span><br><span class="line"><span class="built_in">add</span>(v,u,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">bfs</span>()) ans+=<span class="built_in">dinic</span>(s,INF);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="费用流"><a href="#费用流" class="headerlink" title="费用流"></a><a href="https://www.luogu.org/problemnew/show/P3376">费用流</a></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">50100</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5100</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T f=<span class="number">1</span>;a=<span class="number">0</span>;<span class="type">char</span> s=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(s&lt;<span class="string">&#x27;0&#x27;</span>||s&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(s==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(s&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;s&gt;=<span class="string">&#x27;0&#x27;</span>)&#123;a=a*<span class="number">10</span>+s-<span class="string">&#x27;0&#x27;</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">a*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ne,to,w,f;</span><br><span class="line">&#125;edge[M&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> head[N],cnt=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w,<span class="type">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">edge[++cnt].to=v;</span><br><span class="line">edge[cnt].w=w;</span><br><span class="line">edge[cnt].f=f;</span><br><span class="line">edge[cnt].ne=head[u];</span><br><span class="line">head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,s,t;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="type">int</span> vis[N],dis[N],pre[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dis));</span><br><span class="line">dis[s]=<span class="number">0</span>;</span><br><span class="line">vis[s]=<span class="number">1</span>;</span><br><span class="line">q.<span class="built_in">push</span>(s);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">vis[u]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=head[u];i;i=edge[i].ne)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v=edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(dis[v]&gt;dis[u]+edge[i].f&amp;&amp;edge[i].w&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">dis[v]=dis[u]+edge[i].f;</span><br><span class="line">pre[v]=i;</span><br><span class="line"><span class="keyword">if</span>(!vis[v]) vis[v]=<span class="number">1</span>,q.<span class="built_in">push</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dis[t]!=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> flow,cost;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">mcmf</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">spfa</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> mn=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=t;i;i=edge[pre[i]^<span class="number">1</span>].to)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i==s) <span class="keyword">continue</span>;</span><br><span class="line">mn=<span class="built_in">min</span>(mn,edge[pre[i]].w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=t;i;i=edge[pre[i]^<span class="number">1</span>].to)</span><br><span class="line">&#123;</span><br><span class="line">edge[pre[i]].w-=mn;</span><br><span class="line">edge[pre[i]^<span class="number">1</span>].w+=mn;</span><br><span class="line">&#125;</span><br><span class="line">flow+=mn;</span><br><span class="line">cost+=dis[t]*mn;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> u,v,w,f;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">read</span>(n),<span class="built_in">read</span>(m),<span class="built_in">read</span>(s),<span class="built_in">read</span>(t);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(u),<span class="built_in">read</span>(v),<span class="built_in">read</span>(w),<span class="built_in">read</span>(f);</span><br><span class="line"><span class="built_in">add</span>(u,v,w,f);</span><br><span class="line"><span class="built_in">add</span>(v,u,<span class="number">0</span>,-f);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">mcmf</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,flow,cost);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P2756飞行员配对方案问题"><a href="#P2756飞行员配对方案问题" class="headerlink" title="P2756飞行员配对方案问题"></a><a href="https://www.luogu.org/problemnew/show/P2756">P2756飞行员配对方案问题</a></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e4</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="type">int</span> s=<span class="number">0</span>,t,cnt=<span class="number">1</span>,head[N*<span class="number">2</span>+<span class="number">1</span>],m,n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ne,to,w,u;</span><br><span class="line">&#125;edge[N*<span class="number">4</span>+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++cnt].to=v;</span><br><span class="line">    edge[cnt].w=w;</span><br><span class="line">    edge[cnt].ne=head[u];</span><br><span class="line">    edge[cnt].u=u;</span><br><span class="line">    head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> d[N*<span class="number">4</span>+<span class="number">1</span>];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    q.<span class="built_in">push</span>(s);</span><br><span class="line">    <span class="built_in">fill</span>(d+<span class="number">1</span>,d+<span class="number">1</span>+t,<span class="number">-1</span>);</span><br><span class="line">    d[s]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].ne)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v=edge[i].to;</span><br><span class="line">            <span class="keyword">if</span>(d[v]!=<span class="number">-1</span>||edge[i].w&lt;=<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            d[v]=d[u]+<span class="number">1</span>;</span><br><span class="line">            q.<span class="built_in">push</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d[t]!=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> mn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==t||mn==<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> mn;</span><br><span class="line">    <span class="type">int</span> flow=<span class="number">0</span>,tmpf=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].ne)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v=edge[i].to;</span><br><span class="line">        <span class="keyword">if</span>(d[v]==d[u]+<span class="number">1</span>&amp;&amp;(tmpf=<span class="built_in">dinic</span>(v,<span class="built_in">min</span>(mn,edge[i].w)))&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            flow+=tmpf;</span><br><span class="line">            mn-=tmpf;</span><br><span class="line">            edge[i].w-=tmpf;</span><br><span class="line">            edge[i^<span class="number">1</span>].w+=tmpf;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!mn) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!flow) d[u]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;m,&amp;n);</span><br><span class="line">    t=n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">add</span>(s,i,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">add</span>(i,s,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=m+<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">add</span>(i,t,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">add</span>(t,i,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> u,v;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;u,&amp;v)&amp;&amp;u!=<span class="number">-1</span>&amp;&amp;v!=<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">add</span>(u,v,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">add</span>(v,u,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">bfs</span>())</span><br><span class="line">    ans+=<span class="built_in">dinic</span>(s,INF);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=cnt;i+=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(edge[i].w==<span class="number">0</span>&amp;&amp;edge[i].to!=t&amp;&amp;edge[i].u!=s) </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,edge[i].u,edge[i].to);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>裸的二分图匹配，建立超级源点和超级汇点。</strong></p><h3 id="P4016-负载平衡问题"><a href="#P4016-负载平衡问题" class="headerlink" title="P4016 负载平衡问题"></a><a href="https://www.luogu.org/problemnew/show/P4016">P4016 负载平衡问题</a></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// luogu-judger-enable-o2</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ne,to,f,w;</span><br><span class="line">&#125;edge[<span class="number">10100</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[<span class="number">110</span>],sum,s=<span class="number">108</span>,t=<span class="number">109</span>;</span><br><span class="line"><span class="type">int</span> head[<span class="number">110</span>],cnt=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="type">void</span> _add(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w,<span class="type">int</span> f)</span><br><span class="line">&#123;</span><br><span class="line">    edge[++cnt].to=v;</span><br><span class="line">    edge[cnt].w=w;</span><br><span class="line">    edge[cnt].f=f;</span><br><span class="line">    edge[cnt].ne=head[u];</span><br><span class="line">    head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w,<span class="type">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _add(u,v,w,f),_add(v,u,<span class="number">0</span>,-f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> vis[<span class="number">110</span>];</span><br><span class="line"><span class="type">int</span> pre[<span class="number">110</span>],dis[<span class="number">110</span>];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="type">int</span> cost;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dis));</span><br><span class="line">    vis[s]=<span class="number">1</span>;</span><br><span class="line">    dis[s]=<span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(s);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        vis[u]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=head[u];i;i=edge[i].ne)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v=edge[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dis[v]&gt;dis[u]+edge[i].f&amp;&amp;edge[i].w&gt;<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[v]=dis[u]+edge[i].f;</span><br><span class="line">                pre[v]=i;</span><br><span class="line">                <span class="keyword">if</span>(!vis[v]) vis[v]=<span class="number">1</span>,q.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dis[t]!=INF;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">mcmf</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">spfa</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mn=INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=t;i;i=edge[pre[i]^<span class="number">1</span>].to)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==s) <span class="keyword">continue</span>;</span><br><span class="line">            mn=<span class="built_in">min</span>(mn,edge[pre[i]].w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=t;i;i=edge[pre[i]^<span class="number">1</span>].to)</span><br><span class="line">        &#123;</span><br><span class="line">            edge[pre[i]].w-=mn;</span><br><span class="line">            edge[pre[i]^<span class="number">1</span>].w+=mn;</span><br><span class="line">        &#125;</span><br><span class="line">        cost+=<span class="number">1ll</span>*dis[t]*mn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]),sum+=a[i];</span><br><span class="line">    sum/=n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]-=sum;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;<span class="number">0</span>) </span><br><span class="line">            <span class="built_in">add</span>(s,i,a[i],<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;<span class="number">0</span>) </span><br><span class="line">            <span class="built_in">add</span>(i,t,-a[i],<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(i!=<span class="number">1</span>) </span><br><span class="line">            <span class="built_in">add</span>(i,i<span class="number">-1</span>,INF,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(i!=n) </span><br><span class="line">            <span class="built_in">add</span>(i,i+<span class="number">1</span>,INF,<span class="number">1</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">add</span>(<span class="number">1</span>,n,INF,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(n,<span class="number">1</span>,INF,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">mcmf</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,cost);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="https://multifuctional.blog.luogu.org/fu-zai-ping-heng-wen-ti">巨佬的博客</a>讲的非常清楚</strong></p><h3 id="P2765-魔术球问题"><a href="#P2765-魔术球问题" class="headerlink" title="P2765 魔术球问题"></a><a href="https://www.luogu.org/problemnew/show/P2765">P2765 魔术球问题</a></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">500100</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ne,to,w;</span><br><span class="line">&#125;edge[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> head[N],cnt=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="type">void</span> _add(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span><br><span class="line">&#123;</span><br><span class="line">    edge[++cnt].to=v;</span><br><span class="line">    edge[cnt].ne=head[u];</span><br><span class="line">    edge[cnt].w=w;</span><br><span class="line">    head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _add(u,v,w),_add(v,u,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> s=<span class="number">100001</span>,t=<span class="number">100002</span>;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="type">int</span> dis[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dis));</span><br><span class="line">    dis[s]=<span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(s);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=head[u];i;i=edge[i].ne)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v=edge[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dis[v]!=INF||edge[i].w&lt;=<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            dis[v]=dis[u]+<span class="number">1</span>;</span><br><span class="line">            q.<span class="built_in">push</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dis[t]!=INF;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> nex[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">dinic</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> mn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(mn&lt;=<span class="number">0</span>||u==t) <span class="keyword">return</span> mn;</span><br><span class="line">    <span class="type">int</span> flow=<span class="number">0</span>,tmpf=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=head[u];i;i=edge[i].ne)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v=edge[i].to;</span><br><span class="line">        <span class="keyword">if</span>(dis[v]==dis[u]+<span class="number">1</span>&amp;&amp;(tmpf=<span class="built_in">dinic</span>(v,<span class="built_in">min</span>(edge[i].w,mn)))&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            nex[u&gt;&gt;<span class="number">1</span>]=v&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            edge[i].w-=tmpf;</span><br><span class="line">            edge[i^<span class="number">1</span>].w+=tmpf;</span><br><span class="line">            mn-=tmpf;</span><br><span class="line">            flow+=tmpf;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!mn) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!flow) dis[u]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">wll</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> rt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">bfs</span>()) rt+=<span class="built_in">dinic</span>(s,INF);</span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,now,tot,num;</span><br><span class="line"><span class="type">int</span> sta[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">while</span>(now&lt;=n)</span><br><span class="line">    &#123;</span><br><span class="line">        num++;</span><br><span class="line">        <span class="built_in">add</span>(s,num&lt;&lt;<span class="number">1</span>,<span class="number">1</span>),<span class="built_in">add</span>((num&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>,t,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="built_in">sqrt</span>(num)+<span class="number">1</span>;i*i&lt;(num&lt;&lt;<span class="number">1</span>);i++)</span><br><span class="line">        <span class="built_in">add</span>((i*i-num)&lt;&lt;<span class="number">1</span>,(num&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> tmp=<span class="built_in">wll</span>();<span class="comment">//若tmp!=0说明num放到了之前的柱子上，出现了新的流。</span></span><br><span class="line">        <span class="keyword">if</span>(!tmp) sta[++now]=num;<span class="comment">//tmp==0说明num放到了新的柱子上                              </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,--num);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[sta[i]])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> k=sta[i];<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,k);vis[k]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(nex[k]&amp;&amp;nex[k]!=(t)&gt;&gt;<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                k=nex[k];</span><br><span class="line">                vis[k]=<span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,k);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="p2764-最小路径覆盖问题"><a href="#p2764-最小路径覆盖问题" class="headerlink" title="p2764 最小路径覆盖问题"></a><a href="https://www.luogu.org/problemnew/show/P2764#sub">p2764 最小路径覆盖问题</a></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x7ffffffff</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N= <span class="number">6100</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ne,to,w,u;</span><br><span class="line">&#125;edge[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> head[N],cnt=<span class="number">1</span>,d[N],s=<span class="number">0</span>,t,m,n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">edge[++cnt].to=v;</span><br><span class="line">edge[cnt].w=w;</span><br><span class="line">edge[cnt].ne=head[u];</span><br><span class="line">edge[cnt].u=u;</span><br><span class="line">head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">q.<span class="built_in">push</span>(s);</span><br><span class="line"><span class="built_in">fill</span>(d+<span class="number">1</span>,d+<span class="number">1</span>+t,<span class="number">-1</span>);</span><br><span class="line">d[t]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].ne)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v=edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(d[v]!=<span class="number">-1</span>||edge[i].w&lt;=<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">d[v]=d[u]+<span class="number">1</span>;</span><br><span class="line">q.<span class="built_in">push</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> d[t]!=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> mn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(u==t||mn==<span class="number">0</span>) </span><br><span class="line"><span class="keyword">return</span> mn;</span><br><span class="line"><span class="type">int</span> flow=<span class="number">0</span>,tmpf=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].ne)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v=edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(d[v]==d[u]+<span class="number">1</span>&amp;&amp;(tmpf=<span class="built_in">dinic</span>(v,<span class="built_in">min</span>(edge[i].w,mn)))&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">flow+=tmpf;</span><br><span class="line">mn-=tmpf;</span><br><span class="line">edge[i].w-=tmpf;</span><br><span class="line">edge[i^<span class="number">1</span>].w+=tmpf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!mn) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flow) d[u]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">t=<span class="number">2</span>*n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">add</span>(s,i,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">add</span>(i,s,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n+<span class="number">1</span>;i&lt;=n&lt;&lt;<span class="number">2</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">add</span>(i,t,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">add</span>(t,i,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line"><span class="built_in">add</span>(u,v+n,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">add</span>(v+n,u,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">bfs</span>()) ans+=<span class="built_in">dinic</span>(s,INF);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>经典的转换，拆点转换为二分图，然后用<a href="http://syr_steven.coding.me/2019/02/21/%E4%BA%8C%E5%88%86%E5%9B%BE%E6%9C%89%E5%85%B3%E5%AE%9A%E7%90%86/">二分图的定理</a>求解</strong></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;板子&quot;&gt;&lt;a href=&quot;#板子&quot; class=&quot;headerlink&quot; title=&quot;板子&quot;&gt;&lt;/a&gt;板子&lt;/h2&gt;&lt;h3 id=&quot;最大流&quot;&gt;&lt;a href=&quot;#最大流&quot; class=&quot;headerlink&quot; title=&quot;最大流&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P3376&quot;&gt;最大流&lt;/a&gt;&lt;/h3&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; std;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; INF = &lt;span class=&quot;number&quot;&gt;0x7fffffff&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; N = &lt;span class=&quot;number&quot;&gt;1e5&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(T &amp;amp;a)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	T f=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;a=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; s=&lt;span class=&quot;built_in&quot;&gt;getchar&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(s&amp;lt;&lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;||s&amp;gt;&lt;span class=&quot;string&quot;&gt;&amp;#x27;9&amp;#x27;&lt;/span&gt;)&amp;#123;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(s==&lt;span class=&quot;string&quot;&gt;&amp;#x27;-&amp;#x27;&lt;/span&gt;)f=&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;s=&lt;span class=&quot;built_in&quot;&gt;getchar&lt;/span&gt;();&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(s&amp;lt;=&lt;span class=&quot;string&quot;&gt;&amp;#x27;9&amp;#x27;&lt;/span&gt;&amp;amp;&amp;amp;s&amp;gt;=&lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;)&amp;#123;a=a*&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;+s-&lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;;s=&lt;span class=&quot;built_in&quot;&gt;getchar&lt;/span&gt;();&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	a*=f;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; n,m,s,t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;node&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; ne,to,w;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;edge[&lt;span class=&quot;number&quot;&gt;200100&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; head[N],cnt=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; u,&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; v,&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; w)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	edge[++cnt].to=v;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	edge[cnt].ne=head[u];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	edge[cnt].w=w;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	head[u]=cnt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; d[N];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;queue&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt; q;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bfs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;fill&lt;/span&gt;(d+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,d+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;+n,&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	d[s]=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	q.&lt;span class=&quot;built_in&quot;&gt;push&lt;/span&gt;(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(!q.&lt;span class=&quot;built_in&quot;&gt;empty&lt;/span&gt;())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; u=q.&lt;span class=&quot;built_in&quot;&gt;front&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		q.&lt;span class=&quot;built_in&quot;&gt;pop&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;register&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i=head[u];i;i=edge[i].ne)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; v=edge[i].to;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(d[v]!=&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;||edge[i].w&amp;lt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			d[v]=d[u]+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			q.&lt;span class=&quot;built_in&quot;&gt;push&lt;/span&gt;(v);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; d[t]!=&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;dinic&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; u,&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; mn)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(u==t||mn&amp;lt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mn;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; flow=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,tmpf=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;register&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i=head[u];i;i=edge[i].ne)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; v=edge[i].to;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(d[v]==d[u]+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;amp;&amp;amp;(tmpf=&lt;span class=&quot;built_in&quot;&gt;dinic&lt;/span&gt;(v,&lt;span class=&quot;built_in&quot;&gt;min&lt;/span&gt;(mn,edge[i].w)))&amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			mn-=tmpf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			flow+=tmpf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			edge[i].w-=tmpf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			edge[i^&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;].w+=tmpf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!mn) &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!flow) d[u]=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; flow;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; u,v,w,ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt;(n),&lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt;(m),&lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt;(s),&lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt;(t);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;register&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;i&amp;lt;=m;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt;(u),&lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt;(v),&lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt;(w);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;add&lt;/span&gt;(u,v,w);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;add&lt;/span&gt;(v,u,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;bfs&lt;/span&gt;()) ans+=&lt;span class=&quot;built_in&quot;&gt;dinic&lt;/span&gt;(s,INF);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;%d&#92;n&amp;quot;&lt;/span&gt;,ans);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="网络流" scheme="http://syrsteven.github.io/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>题解 P2468 【[SDOI2010]粟粟的书架】</title>
    <link href="http://syrsteven.github.io/post/e1a316a0.html"/>
    <id>http://syrsteven.github.io/post/e1a316a0.html</id>
    <published>2019-02-16T12:40:28.000Z</published>
    <updated>2023-09-01T20:06:21.721Z</updated>
    
    <content type="html"><![CDATA[<p>看了这道题的其他题解，本蒟蒻发现大部分都是将其分成两道题二分加主席树做的，本蒟蒻便来分享一波自己的蒟蒻做法–<strong>用主席树维护二维矩阵的信息</strong>。</p><p>这道题全程用主席树，不过要分情况讨论，对于r&#x3D;1的情况，直接上裸的主席树，对于r&#x3D;200，c&#x3D;200的情况我们用主席树来维护矩阵(0,0)到(x,y)的信息，它由(x-1,y)到(0,0)的信息加上(x,0)到(x,y)的信息得到。代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=r;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=<span class="number">1</span>;j&lt;=c;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,tot,root[i<span class="number">-1</span>][j],root[i][j],m[i][j],tmp[m[i][j]]);</span><br><span class="line"><span class="type">int</span> tt=root[i][j];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> t=<span class="number">1</span>;t&lt;j;t++) </span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,tot,tt,root[i][j],m[i][t],tmp[m[i][t]]),qu[++cnt]=tt,tt=root[i][j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而对于查询，则像二维前缀和一样；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c,<span class="type">int</span> d,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r) </span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> t=tr[a].size+tr[b].size-tr[c].size-tr[d].size;</span><br><span class="line"><span class="keyword">while</span>((<span class="type">int</span>)(t<span class="number">-1</span>)*tmp[l]&gt;=v) t--;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,siz=tr[tr[a].ls].size+tr[tr[b].ls].size-tr[tr[c].ls].size-tr[tr[d].ls].size;</span><br><span class="line"><span class="type">int</span> k=tr[tr[a].ls].sum+tr[tr[b].ls].sum-tr[tr[c].ls].sum-tr[tr[d].ls].sum;</span><br><span class="line"><span class="keyword">if</span>(k&gt;=v)    <span class="keyword">return</span> <span class="built_in">ask</span>(l,mid,tr[a].ls,tr[b].ls,tr[c].ls,tr[d].ls,v);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">ask</span>(mid+<span class="number">1</span>,r,tr[a].rs,tr[b].rs,tr[c].rs,tr[d].rs,v-k)+siz;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>然而！</strong>这样写是过不了这道题的；</p><span id="more"></span><p>对于构建主席树的过程中，我们不停的更新root[x][y],导致大量节点只是一个过程量，空间被大量浪费，所需空间在这道题的极限情况下高达600+MB;</p><p>接下来，蒟蒻将展示代码(带注释)，该问题的解决办法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3e7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T f=<span class="number">1</span>;a=<span class="number">0</span>;<span class="type">char</span> s=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(s&lt;<span class="string">&#x27;0&#x27;</span>||s&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(s==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(s&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;s&gt;=<span class="string">&#x27;0&#x27;</span>)&#123;a=a*<span class="number">10</span>+s-<span class="string">&#x27;0&#x27;</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">a*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ls,size,rs,sum;</span><br><span class="line">&#125;tr[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> root[<span class="number">201</span>][<span class="number">201</span>],tcnt,rt[<span class="number">500001</span>],tot;<span class="comment">//因数据范围不同，分别用root[x][y],rt[x]来记录两种情况下的树根 </span></span><br><span class="line"><span class="type">int</span> m[<span class="number">201</span>][<span class="number">201</span>],mt[<span class="number">500001</span>],tmp[<span class="number">500001</span>];<span class="comment">//m,mt同上记录数据，tmp离散化数组 </span></span><br><span class="line"><span class="type">int</span> qu; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> &amp;y,<span class="type">int</span> k,<span class="type">int</span> v)</span><span class="comment">//k,为离散化后的值，v为离散化之前的值 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(qu)y=qu,qu=<span class="number">0</span>;<span class="comment">//qu记录无用节点，循环利用 </span></span><br><span class="line"><span class="keyword">else</span> y=++tcnt;</span><br><span class="line">tr[y]=tr[x];tr[y].sum+=v,tr[y].size+=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(k&lt;=mid) <span class="built_in">build</span>(l,mid,tr[x].ls,tr[y].ls,k,v);</span><br><span class="line"><span class="keyword">else</span>     <span class="built_in">build</span>(mid+<span class="number">1</span>,r,tr[x].rs,tr[y].rs,k,v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c,<span class="type">int</span> d,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r) </span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> t=tr[a].size+tr[b].size-tr[c].size-tr[d].size;<span class="comment">//一个值可能有多个，我们并不是全部都需要 </span></span><br><span class="line"><span class="keyword">while</span>((<span class="type">int</span>)(t<span class="number">-1</span>)*tmp[l]&gt;=v) t--;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,ss=tr[tr[a].ls].size+tr[tr[b].ls].size-tr[tr[c].ls].size-tr[tr[d].ls].size;</span><br><span class="line"><span class="type">int</span> k=tr[tr[a].ls].sum+tr[tr[b].ls].sum-tr[tr[c].ls].sum-tr[tr[d].ls].sum;</span><br><span class="line"><span class="keyword">if</span>(k&gt;=v)    <span class="keyword">return</span> <span class="built_in">ask</span>(l,mid,tr[a].ls,tr[b].ls,tr[c].ls,tr[d].ls,v);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">ask</span>(mid+<span class="number">1</span>,r,tr[a].rs,tr[b].rs,tr[c].rs,tr[d].rs,v-k)+ss;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> r,c,q;</span><br><span class="line"><span class="type">int</span> a,b,x,y;</span><br><span class="line"><span class="type">int</span> v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">read</span>(r),<span class="built_in">read</span>(c),<span class="built_in">read</span>(q);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=r;i++)<span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=<span class="number">1</span>;j&lt;=c;j++)</span><br><span class="line"><span class="keyword">if</span>(r==<span class="number">1</span>) <span class="built_in">read</span>(mt[j]),tmp[++tot]=mt[j];</span><br><span class="line"><span class="keyword">else</span>     <span class="built_in">read</span>(m[i][j]),tmp[++tot]=m[i][j];</span><br><span class="line"><span class="built_in">sort</span>(tmp+<span class="number">1</span>,tmp+<span class="number">1</span>+tot,<span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());<span class="comment">//从大到小排序 </span></span><br><span class="line">tot=<span class="built_in">unique</span>(tmp+<span class="number">1</span>,tmp+<span class="number">1</span>+tot)-tmp<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(r==<span class="number">1</span>)<span class="comment">//分类讨论 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=c;i++) mt[i]=<span class="built_in">lower_bound</span>(tmp+<span class="number">1</span>,tmp+<span class="number">1</span>+tot,mt[i],<span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;())-tmp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=c;i++) <span class="built_in">build</span>(<span class="number">1</span>,tot,rt[i<span class="number">-1</span>],rt[i],mt[i],tmp[mt[i]]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;<span class="built_in">i</span>&lt;=q;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(y),<span class="built_in">read</span>(x),<span class="built_in">read</span>(b),<span class="built_in">read</span>(a),<span class="built_in">read</span>(v);</span><br><span class="line"><span class="keyword">if</span>(v&gt;(tr[rt[a]].sum-tr[rt[x<span class="number">-1</span>]].sum)) <span class="built_in">printf</span>(<span class="string">&quot;Poor QLW\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">ask</span>(<span class="number">1</span>,tot,rt[a],<span class="number">0</span>,rt[x<span class="number">-1</span>],<span class="number">0</span>,v));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=r;i++)<span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=<span class="number">1</span>;j&lt;=c;j++) m[i][j]=<span class="built_in">lower_bound</span>(tmp+<span class="number">1</span>,tmp+<span class="number">1</span>+tot,m[i][j],<span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;())-tmp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=r;i++)<span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=<span class="number">1</span>;j&lt;=c;j++)</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">if</span>(j&gt;=i)<span class="comment">//root[i][j]无论从root[i-1][j]更新出来，还是从root[i][j-1]都是一样的，但是一个需重建i个节点，另一个需要重建j个节点。我们根据情况来判断那种情况更省空间 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,tot,root[i][j<span class="number">-1</span>],root[i][j],m[i][j],tmp[m[i][j]]);</span><br><span class="line"><span class="type">int</span> tt=root[i][j]; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> t=<span class="number">1</span>;t&lt;i;t++) </span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,tot,tt,root[i][j],m[t][j],tmp[m[t][j]]),qu=tt,tt=root[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,tot,root[i<span class="number">-1</span>][j],root[i][j],m[i][j],tmp[m[i][j]]);</span><br><span class="line"><span class="type">int</span> tt=root[i][j];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> t=<span class="number">1</span>;t&lt;j;t++) </span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,tot,tt,root[i][j],m[i][t],tmp[m[i][t]]),qu=tt,tt=root[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;<span class="built_in">i</span>&lt;=q;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(x),<span class="built_in">read</span>(y),<span class="built_in">read</span>(a),<span class="built_in">read</span>(b),<span class="built_in">read</span>(v);</span><br><span class="line"><span class="keyword">if</span>(v&gt;(tr[root[a][b]].sum+tr[root[x<span class="number">-1</span>][y<span class="number">-1</span>]].sum-tr[root[a][y<span class="number">-1</span>]].sum-tr[root[x<span class="number">-1</span>][b]].sum)) <span class="built_in">printf</span>(<span class="string">&quot;Poor QLW\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">ask</span>(<span class="number">1</span>,tot,root[x<span class="number">-1</span>][y<span class="number">-1</span>],root[a][b],root[a][y<span class="number">-1</span>],root[x<span class="number">-1</span>][b],v));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，题解到此结束。结束撒花！！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;看了这道题的其他题解，本蒟蒻发现大部分都是将其分成两道题二分加主席树做的，本蒟蒻便来分享一波自己的蒟蒻做法–&lt;strong&gt;用主席树维护二维矩阵的信息&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这道题全程用主席树，不过要分情况讨论，对于r&amp;#x3D;1的情况，直接上裸的主席树，对于r&amp;#x3D;200，c&amp;#x3D;200的情况我们用主席树来维护矩阵(0,0)到(x,y)的信息，它由(x-1,y)到(0,0)的信息加上(x,0)到(x,y)的信息得到。代码如下&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;register&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;i&amp;lt;=r;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;register&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;j&amp;lt;=c;j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;build&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,tot,root[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;][j],root[i][j],m[i][j],tmp[m[i][j]]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; tt=root[i][j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;register&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; t=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;t&amp;lt;j;t++) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;build&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,tot,tt,root[i][j],m[i][t],tmp[m[i][t]]),qu[++cnt]=tt,tt=root[i][j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而对于查询，则像二维前缀和一样；&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ask&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; l,&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; r,&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; a,&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; b,&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; c,&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; d,&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; v)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(l==r) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; t=tr[a].size+tr[b].size-tr[c].size-tr[d].size;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;((&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)(t&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)*tmp[l]&amp;gt;=v) t--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; mid=(l+r)&amp;gt;&amp;gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,siz=tr[tr[a].ls].size+tr[tr[b].ls].size-tr[tr[c].ls].size-tr[tr[d].ls].size;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; k=tr[tr[a].ls].sum+tr[tr[b].ls].sum-tr[tr[c].ls].sum-tr[tr[d].ls].sum;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(k&amp;gt;=v)    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;ask&lt;/span&gt;(l,mid,tr[a].ls,tr[b].ls,tr[c].ls,tr[d].ls,v);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;ask&lt;/span&gt;(mid+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,r,tr[a].rs,tr[b].rs,tr[c].rs,tr[d].rs,v-k)+siz;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;然而！&lt;/strong&gt;这样写是过不了这道题的；&lt;/p&gt;</summary>
    
    
    
    
    <category term="题解" scheme="http://syrsteven.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
    <category term="主席树" scheme="http://syrsteven.github.io/tags/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>树链剖分</title>
    <link href="http://syrsteven.github.io/post/7e454910.html"/>
    <id>http://syrsteven.github.io/post/7e454910.html</id>
    <published>2019-01-04T07:56:21.000Z</published>
    <updated>2023-09-01T20:06:21.720Z</updated>
    
    <content type="html"><![CDATA[<h1 id="P3384-【模板】树链剖分"><a href="#P3384-【模板】树链剖分" class="headerlink" title="P3384 【模板】树链剖分"></a><a href="https://www.luogu.org/problemnew/show/P3384">P3384 【模板】树链剖分</a></h1><h3 id="这道是最基础的树链剖分题目。可以当做复习食用。。"><a href="#这道是最基础的树链剖分题目。可以当做复习食用。。" class="headerlink" title="这道是最基础的树链剖分题目。可以当做复习食用。。"></a>这道是最基础的树链剖分题目。可以当做复习食用。。</h3><h4 id="其中维护字数操作：因为它是按照DSF序进行编号的，所以维护序列x到x-siz-x-1便是维护以x为根的子树。"><a href="#其中维护字数操作：因为它是按照DSF序进行编号的，所以维护序列x到x-siz-x-1便是维护以x为根的子树。" class="headerlink" title="其中维护字数操作：因为它是按照DSF序进行编号的，所以维护序列x到x+siz[x]-1便是维护以x为根的子树。"></a>其中维护字数操作：因为它是按照DSF序进行编号的，所以维护序列x到x+siz[x]-1便是维护以x为根的子树。</h4><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T f=<span class="number">1</span>;a=<span class="number">0</span>;<span class="type">char</span> s=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(s&lt;<span class="string">&#x27;0&#x27;</span>||s&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(s==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(s&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;s&gt;=<span class="string">&#x27;0&#x27;</span>)&#123;a=a*<span class="number">10</span>+s-<span class="string">&#x27;0&#x27;</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">a*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ne,to;</span><br><span class="line">&#125;edge[<span class="number">200100</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> cnt,head[<span class="number">100100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">edge[++cnt].ne=head[u];</span><br><span class="line">edge[cnt].to=v;</span><br><span class="line">head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fa[<span class="number">100100</span>],deep[<span class="number">100100</span>],size[<span class="number">100100</span>],son[<span class="number">100100</span>],w[<span class="number">100100</span>];</span><br><span class="line"><span class="type">int</span> id[<span class="number">100100</span>],top[<span class="number">100100</span>],ww[<span class="number">100100</span>],idx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">size[x]=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> maxx=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=head[x];i;i=edge[i].ne)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v=edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(v==fa[x]) <span class="keyword">continue</span>;</span><br><span class="line">deep[v]=deep[x]+<span class="number">1</span>;</span><br><span class="line">fa[v]=x;</span><br><span class="line"><span class="built_in">dfs1</span>(v);</span><br><span class="line">size[x]+=size[v];</span><br><span class="line"><span class="keyword">if</span>(maxx&lt;size[x]) maxx=size[x],son[x]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> topf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">id[x]=++idx;</span><br><span class="line">top[x]=topf;</span><br><span class="line">ww[id[x]]=w[x];</span><br><span class="line"><span class="keyword">if</span>(!son[x]) <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(son[x],topf);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=head[x];i;i=edge[i].ne)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v=edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(v==fa[x]||v==son[x]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(v,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l,r,ls,rs;</span><br><span class="line"><span class="type">int</span> sum,tag;</span><br><span class="line">&#125;tr[<span class="number">200100</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tcnt=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> n,m,r,p;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;tr[x].sum=tr[tr[x].ls].sum+tr[tr[x].rs].sum;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> ls=tr[x].ls,rs=tr[x].rs;</span><br><span class="line"><span class="keyword">if</span>(tr[x].tag)</span><br><span class="line">&#123;</span><br><span class="line">tr[ls].tag+=tr[x].tag;</span><br><span class="line">tr[ls].tag%=p;</span><br><span class="line">tr[ls].sum+=tr[x].tag*(tr[ls].r-tr[ls].l+<span class="number">1</span>)%p;</span><br><span class="line">tr[ls].sum%=p;</span><br><span class="line"></span><br><span class="line">tr[rs].tag+=tr[x].tag;</span><br><span class="line">tr[rs].tag%=p;</span><br><span class="line">tr[rs].sum+=tr[x].tag*(tr[rs].r-tr[rs].l+<span class="number">1</span>)%p;</span><br><span class="line">tr[rs].sum%=p;</span><br><span class="line"></span><br><span class="line">tr[x].tag=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tr[x].l=l,tr[x].r=r;</span><br><span class="line"><span class="keyword">if</span>(l==r)</span><br><span class="line">&#123;</span><br><span class="line">tr[x].sum=ww[l];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">tr[x].ls=++tcnt;<span class="built_in">build</span>(tr[x].ls,l,mid);</span><br><span class="line">tr[x].rs=++tcnt;<span class="built_in">build</span>(tr[x].rs,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">update</span>(x);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=tr[x].l&amp;&amp;tr[x].r&lt;=r)</span><br><span class="line">&#123;</span><br><span class="line">tr[x].sum+=v*(tr[x].r-tr[x].l+<span class="number">1</span>)%p;</span><br><span class="line">tr[x].sum%=p;</span><br><span class="line">tr[x].tag+=v;</span><br><span class="line">tr[x].tag%=p;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(x);</span><br><span class="line"><span class="type">int</span> mid=(tr[x].l+tr[x].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) <span class="built_in">change</span>(tr[x].ls,l,r,v);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid) <span class="built_in">change</span>(tr[x].rs,l,r,v);</span><br><span class="line"><span class="built_in">update</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> rt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=tr[x].l&amp;&amp;tr[x].r&lt;=r) <span class="keyword">return</span> tr[x].sum;</span><br><span class="line"><span class="built_in">pushdown</span>(x);</span><br><span class="line"><span class="type">int</span> mid=(tr[x].l+tr[x].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) rt+=<span class="built_in">query</span>(tr[x].ls,l,r),rt%=p;</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid) rt+=<span class="built_in">query</span>(tr[x].rs,l,r),rt%=p;</span><br><span class="line"><span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">query_add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">v%=p;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(deep[top[x]]&lt;deep[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">change</span>(<span class="number">1</span>,id[top[x]],id[x],v);</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(deep[x]&gt;deep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">change</span>(<span class="number">1</span>,id[x],id[y],v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">query_sum</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> rt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(deep[top[x]]&lt;deep[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">rt+=<span class="built_in">query</span>(<span class="number">1</span>,id[top[x]],id[x]);</span><br><span class="line">rt%=p;</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(deep[x]&gt;deep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">rt+=<span class="built_in">query</span>(<span class="number">1</span>,id[x],id[y]);</span><br><span class="line">rt%=p;</span><br><span class="line"><span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">qson_add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">change</span>(<span class="number">1</span>,id[x],id[x]+size[x]<span class="number">-1</span>,v%p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">qson_sum</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">query</span>(<span class="number">1</span>,id[x],id[x]+size[x]<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> opt,x,y,z;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">read</span>(n),<span class="built_in">read</span>(m),<span class="built_in">read</span>(r),<span class="built_in">read</span>(p);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">read</span>(w[i]);</span><br><span class="line"><span class="type">int</span> u,v;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(u),<span class="built_in">read</span>(v);</span><br><span class="line"><span class="built_in">add</span>(u,v);<span class="built_in">add</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs1</span>(r);</span><br><span class="line"></span><br><span class="line"><span class="built_in">dfs2</span>(r,r);</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(opt);<span class="built_in">read</span>(x);</span><br><span class="line"><span class="keyword">if</span>(opt!=<span class="number">4</span>) <span class="built_in">read</span>(y);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(z);</span><br><span class="line"><span class="built_in">query_add</span>(x,y,z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">query_sum</span>(x,y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">qson_add</span>(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">qson_sum</span>(x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="P2590-ZJOI2008-树的统计"><a href="#P2590-ZJOI2008-树的统计" class="headerlink" title="P2590 [ZJOI2008]树的统计"></a><a href="https://www.luogu.org/problemnew/show/P2590">P2590 [ZJOI2008]树的统计</a></h1><h3 id="一道简单的模板题"><a href="#一道简单的模板题" class="headerlink" title="一道简单的模板题"></a>一道简单的模板题</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T f=<span class="number">1</span>;a=<span class="number">0</span>;<span class="type">char</span> s=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(s&lt;<span class="string">&#x27;0&#x27;</span>||s&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(s==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(s&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;s&gt;=<span class="string">&#x27;0&#x27;</span>)&#123;a=a*<span class="number">10</span>+s-<span class="string">&#x27;0&#x27;</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">a*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ne,to;</span><br><span class="line">&#125;edge[<span class="number">60100</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> head[<span class="number">30100</span>],cnt,w[<span class="number">30100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">edge[++cnt].ne=head[u];</span><br><span class="line">edge[cnt].to=v;</span><br><span class="line">head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fa[<span class="number">30100</span>],siz[<span class="number">30100</span>],son[<span class="number">30100</span>],dep[<span class="number">30100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">siz[x]=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> maxx=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=head[x];i;i=edge[i].ne)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v=edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(v==fa[x]) <span class="keyword">continue</span>;</span><br><span class="line">fa[v]=x;</span><br><span class="line">dep[v]=dep[x]+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(v);</span><br><span class="line">siz[x]+=siz[v];</span><br><span class="line"><span class="keyword">if</span>(maxx&lt;siz[v]) maxx=siz[v],son[x]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> top[<span class="number">30100</span>],wt[<span class="number">30100</span>],id[<span class="number">30100</span>],idx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> topf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">id[x]=++idx;</span><br><span class="line">wt[idx]=w[x];</span><br><span class="line">top[x]=topf;</span><br><span class="line"><span class="keyword">if</span>(!son[x]) <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(son[x],topf);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=head[x];i;i=edge[i].ne)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v=edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(v==fa[x]||v==son[x]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(v,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ls,rs,l,r;</span><br><span class="line"><span class="type">int</span> sum,mx;</span><br><span class="line">&#125;tr[<span class="number">60100</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tcnt=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tr[x].sum=tr[tr[x].ls].sum+tr[tr[x].rs].sum;</span><br><span class="line">tr[x].mx=<span class="built_in">max</span>(tr[tr[x].ls].mx,tr[tr[x].rs].mx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tr[x].l=l;tr[x].r=r;</span><br><span class="line"><span class="keyword">if</span>(l==r)</span><br><span class="line">&#123;</span><br><span class="line">tr[x].sum=tr[x].mx=wt[l];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">tr[x].ls=++tcnt;<span class="built_in">build</span>(tr[x].ls,l,mid);</span><br><span class="line">tr[x].rs=++tcnt;<span class="built_in">build</span>(tr[x].rs,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">update</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query_sum</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> rt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=tr[x].l&amp;&amp;tr[x].r&lt;=r) <span class="keyword">return</span> tr[x].sum;</span><br><span class="line"><span class="type">int</span> mid=(tr[x].l+tr[x].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) rt+=<span class="built_in">query_sum</span>(tr[x].ls,l,r);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid) rt+=<span class="built_in">query_sum</span>(tr[x].rs,l,r);</span><br><span class="line"><span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query_max</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> rt=INT_MIN;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=tr[x].l&amp;&amp;tr[x].r&lt;=r) <span class="keyword">return</span> tr[x].mx;</span><br><span class="line"><span class="type">int</span> mid=(tr[x].l+tr[x].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) rt=<span class="built_in">max</span>(<span class="built_in">query_max</span>(tr[x].ls,l,r),rt);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid) rt=<span class="built_in">max</span>(<span class="built_in">query_max</span>(tr[x].rs,l,r),rt);</span><br><span class="line"><span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> l,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[x].l==tr[x].r) </span><br><span class="line">&#123;</span><br><span class="line">tr[x].sum=tr[x].mx=v;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=(tr[x].l+tr[x].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) <span class="built_in">change</span>(tr[x].ls,l,v);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">change</span>(tr[x].rs,l,v);</span><br><span class="line"><span class="built_in">update</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">query1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> rt=INT_MIN;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">rt=<span class="built_in">max</span>(rt,<span class="built_in">query_max</span>(<span class="number">1</span>,id[top[x]],id[x]));</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&gt;dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">rt=<span class="built_in">max</span>(rt,<span class="built_in">query_max</span>(<span class="number">1</span>,id[x],id[y]));</span><br><span class="line"><span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">query2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> rt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">rt+=<span class="built_in">query_sum</span>(<span class="number">1</span>,id[top[x]],id[x]);</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&gt;dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">rt+=<span class="built_in">query_sum</span>(<span class="number">1</span>,id[x],id[y]);</span><br><span class="line"><span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,q,x,y;</span><br><span class="line"><span class="type">char</span> opt[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">read</span>(n);</span><br><span class="line"><span class="type">int</span> u,v;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(u),<span class="built_in">read</span>(v);</span><br><span class="line"><span class="built_in">add</span>(u,v),<span class="built_in">add</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">read</span>(w[i]);</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="built_in">read</span>(q);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,opt);</span><br><span class="line"><span class="built_in">read</span>(x),<span class="built_in">read</span>(y);</span><br><span class="line"><span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">change</span>(<span class="number">1</span>,id[x],y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt[<span class="number">1</span>]==<span class="string">&#x27;M&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">query1</span>(x,y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">query2</span>(x,y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="P2486-SDOI2011-染色"><a href="#P2486-SDOI2011-染色" class="headerlink" title="P2486 [SDOI2011]染色"></a><a href="https://www.luogu.org/problemnew/show/P2486">P2486 [SDOI2011]染色</a></h1><h3 id="这道题比较有意思，该题的关键是每一次求区间的和时，都要判断拼接的两段区间的端点颜色是否相同。"><a href="#这道题比较有意思，该题的关键是每一次求区间的和时，都要判断拼接的两段区间的端点颜色是否相同。" class="headerlink" title="这道题比较有意思，该题的关键是每一次求区间的和时，都要判断拼接的两段区间的端点颜色是否相同。"></a>这道题比较有意思，该题的关键是每一次求区间的和时，都要判断拼接的两段区间的端点颜色是否相同。</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T f=<span class="number">1</span>;a=<span class="number">0</span>;<span class="type">char</span> s=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(s&lt;<span class="string">&#x27;0&#x27;</span>||s&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(s==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(s&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;s&gt;=<span class="string">&#x27;0&#x27;</span>)&#123;a=a*<span class="number">10</span>+s-<span class="string">&#x27;0&#x27;</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    a*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ne,to;</span><br><span class="line">&#125;edge[<span class="number">201000</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> head[<span class="number">101000</span>],cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++cnt].to=v;</span><br><span class="line">    edge[cnt].ne=head[u];</span><br><span class="line">    head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> son[<span class="number">100100</span>],siz[<span class="number">101000</span>],dep[<span class="number">101000</span>],fa[<span class="number">100100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    siz[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> mx=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=head[x];i;i=edge[i].ne)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v=edge[i].to;</span><br><span class="line">        <span class="keyword">if</span>(v==fa[x]) <span class="keyword">continue</span>;</span><br><span class="line">        dep[v]=dep[x]+<span class="number">1</span>;</span><br><span class="line">        fa[v]=x;</span><br><span class="line">        <span class="built_in">dfs1</span>(v);</span><br><span class="line">        siz[x]+=siz[v];</span><br><span class="line">        <span class="keyword">if</span>(siz[v]&gt;mx) mx=siz[v],son[x]=v; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> top[<span class="number">101000</span>],idx,wt[<span class="number">101000</span>],id[<span class="number">101000</span>],w[<span class="number">101000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> topf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    id[x]=++idx;</span><br><span class="line">    wt[idx]=w[x];</span><br><span class="line">    top[x]=topf;</span><br><span class="line">    <span class="keyword">if</span>(!son[x]) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">dfs2</span>(son[x],topf);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=head[x];i;i=edge[i].ne)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v=edge[i].to;</span><br><span class="line">        <span class="keyword">if</span>(v==fa[x]||v==son[x]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(v,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l,r,ls,rs;</span><br><span class="line">    <span class="type">int</span> tag,sum,lx,rx;</span><br><span class="line">&#125;tr[<span class="number">201000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[x].sum=tr[tr[x].ls].sum+tr[tr[x].rs].sum;</span><br><span class="line">    tr[x].lx=tr[tr[x].ls].lx;</span><br><span class="line">    tr[x].rx=tr[tr[x].rs].rx;</span><br><span class="line">    <span class="keyword">if</span>(tr[tr[x].ls].rx==tr[tr[x].rs].lx) tr[x].sum--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ls=tr[x].ls,rs=tr[x].rs;</span><br><span class="line">    <span class="keyword">if</span>(tr[x].tag)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[ls].tag=tr[x].tag;</span><br><span class="line">        tr[rs].tag=tr[x].tag;</span><br><span class="line">        tr[ls].lx=tr[ls].rx=tr[x].tag;</span><br><span class="line">        tr[rs].lx=tr[rs].rx=tr[x].tag;</span><br><span class="line">        tr[rs].sum=tr[ls].sum=<span class="number">1</span>;</span><br><span class="line">        tr[x].tag=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tcnt=<span class="number">1</span>,ql,qr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[x].l=l,tr[x].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[x].lx=tr[x].rx=wt[l];</span><br><span class="line">        tr[x].sum=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    tr[x].ls=++tcnt;<span class="built_in">build</span>(tr[x].ls,l,mid);</span><br><span class="line">    tr[x].rs=++tcnt;<span class="built_in">build</span>(tr[x].rs,mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="built_in">update</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tr[x].l&amp;&amp;tr[x].r&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[x].tag=v;</span><br><span class="line">        tr[x].lx=tr[x].rx=v;</span><br><span class="line">        tr[x].sum=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(x);</span><br><span class="line">    <span class="type">int</span> mid=(tr[x].l+tr[x].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) <span class="built_in">change</span>(tr[x].ls,l,r,v);</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid) <span class="built_in">change</span>(tr[x].rs,l,r,v);</span><br><span class="line">    <span class="built_in">update</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> rt=<span class="number">0</span>,lx=<span class="number">0</span>,rx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tr[x].l&amp;&amp;tr[x].r&lt;=r) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(l==tr[x].l) ql=tr[x].lx;</span><br><span class="line">        <span class="keyword">if</span>(r==tr[x].r) qr=tr[x].rx;</span><br><span class="line">        <span class="keyword">return</span> tr[x].sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(x);</span><br><span class="line">    <span class="type">int</span> mid=(tr[x].l+tr[x].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) rt+=<span class="built_in">query</span>(tr[x].ls,l,r),rx=tr[tr[x].ls].rx;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid) rt+=<span class="built_in">query</span>(tr[x].rs,l,r),lx=tr[tr[x].rs].lx;</span><br><span class="line">    <span class="keyword">if</span>(rx&amp;&amp;lx&amp;&amp;lx==rx) rt--;</span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">C</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">        <span class="built_in">change</span>(<span class="number">1</span>,id[top[x]],id[x],v);</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dep[x]&gt;dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    <span class="built_in">change</span>(<span class="number">1</span>,id[x],id[y],v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Q</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> rt=<span class="number">0</span>,tmpx=<span class="number">-1</span>,tmpy=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) <span class="built_in">swap</span>(x,y),<span class="built_in">swap</span>(tmpx,tmpy);</span><br><span class="line">        rt+=<span class="built_in">query</span>(<span class="number">1</span>,id[top[x]],id[x]);</span><br><span class="line">        <span class="keyword">if</span>(tmpx&amp;&amp;tmpx==qr) rt--; </span><br><span class="line">        tmpx=ql;</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dep[x]&gt;dep[y]) <span class="built_in">swap</span>(x,y),<span class="built_in">swap</span>(tmpx,tmpy);</span><br><span class="line">    rt+=<span class="built_in">query</span>(<span class="number">1</span>,id[x],id[y]);</span><br><span class="line">    <span class="keyword">if</span>(tmpx&amp;&amp;tmpx==ql) rt--; <span class="comment">//(tmpx==qr)是错的，因为这个我调了一晚上的bug。。。</span></span><br><span class="line">    <span class="keyword">if</span>(tmpy&amp;&amp;tmpy==qr) rt--;</span><br><span class="line">    qr=ql=<span class="number">0</span>;<span class="comment">//全局变量需清零 </span></span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,opt[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n),<span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">read</span>(w[i]);</span><br><span class="line">    <span class="type">int</span> u,v,z;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(u),<span class="built_in">read</span>(v);</span><br><span class="line">        <span class="built_in">add</span>(u,v),<span class="built_in">add</span>(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,opt);</span><br><span class="line">        <span class="built_in">read</span>(u),<span class="built_in">read</span>(v);</span><br><span class="line">        <span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">read</span>(z);</span><br><span class="line">            <span class="built_in">C</span>(u,v,z);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">Q</span>(u,v));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="P4315-月下“毛景树”"><a href="#P4315-月下“毛景树”" class="headerlink" title="P4315 月下“毛景树”"></a><a href="https://www.luogu.org/problemnew/show/P4315">P4315 月下“毛景树”</a></h1><h3 id="一道恶心的码农题。。。该题需要注意的是tag下传的优先级。（遇到将区间修改为某值的题时，可以用两个变量，tag和v分别记录是否被修改以及修改为多少）"><a href="#一道恶心的码农题。。。该题需要注意的是tag下传的优先级。（遇到将区间修改为某值的题时，可以用两个变量，tag和v分别记录是否被修改以及修改为多少）" class="headerlink" title="一道恶心的码农题。。。该题需要注意的是tag下传的优先级。（遇到将区间修改为某值的题时，可以用两个变量，tag和v分别记录是否被修改以及修改为多少）"></a>一道恶心的码农题。。。该题需要注意的是tag下传的优先级。（遇到将区间修改为某值的题时，可以用两个变量，tag和v分别记录是否被修改以及修改为多少）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T f=<span class="number">1</span>;a=<span class="number">0</span>;<span class="type">char</span> s=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(s&lt;<span class="string">&#x27;0&#x27;</span>||s&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(s==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(s&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;s&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;a=a*<span class="number">10</span>+s-<span class="string">&#x27;0&#x27;</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">a*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ne,to,w;</span><br><span class="line">&#125;edge[<span class="number">201000</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> head[<span class="number">100100</span>],cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">edge[++cnt].to=v;</span><br><span class="line">edge[cnt].ne=head[u];</span><br><span class="line">edge[cnt].w=w;</span><br><span class="line">head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,w[<span class="number">100100</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fa[<span class="number">100100</span>],siz[<span class="number">100100</span>],son[<span class="number">100100</span>],dep[<span class="number">100100</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num[<span class="number">100100</span>],wt[<span class="number">100100</span>];<span class="comment">//num[x]第x条边的边权所在点的新编号。 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">siz[x]=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> mx=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=head[x];i;i=edge[i].ne)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v=edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(v==fa[x]) <span class="keyword">continue</span>;</span><br><span class="line">dep[v]=dep[x]+<span class="number">1</span>;</span><br><span class="line">w[v]=edge[i].w;</span><br><span class="line">fa[v]=x;</span><br><span class="line"><span class="built_in">dfs1</span>(v);</span><br><span class="line">siz[x]+=siz[v];</span><br><span class="line"><span class="keyword">if</span>(siz[v]&gt;mx) mx=siz[v],son[x]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> idx,id[<span class="number">100100</span>],top[<span class="number">100100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> topf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">id[x]=++idx;</span><br><span class="line">wt[idx]=w[x];</span><br><span class="line">top[x]=topf;</span><br><span class="line"><span class="keyword">if</span>(!son[x]) <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(son[x],topf);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=head[x];i;i=edge[i].ne)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v=edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(v==fa[x]||v==son[x]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(v,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tcnt=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l,r,rs,ls;</span><br><span class="line"><span class="type">int</span> mx,add,tag,v;<span class="comment">//tag记录该区间是否被修改为同一个值，v为该值。 </span></span><br><span class="line">&#125;tr[<span class="number">200100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;tr[x].mx=<span class="built_in">max</span>(tr[tr[x].ls].mx,tr[tr[x].rs].mx);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> ls=tr[x].ls,rs=tr[x].rs;</span><br><span class="line"><span class="keyword">if</span>(tr[x].tag)</span><br><span class="line">&#123;</span><br><span class="line">tr[ls].tag=tr[rs].tag=<span class="number">1</span>;</span><br><span class="line">tr[ls].add=tr[rs].add=<span class="number">0</span>;</span><br><span class="line">tr[ls].mx=tr[rs].mx=tr[x].v;</span><br><span class="line">tr[ls].v=tr[rs].v=tr[x].v;</span><br><span class="line">tr[x].tag=<span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tr[x].add)</span><br><span class="line">&#123;</span><br><span class="line">tr[ls].add+=tr[x].add;</span><br><span class="line">tr[rs].add+=tr[x].add;</span><br><span class="line">tr[ls].mx+=tr[x].add;</span><br><span class="line">tr[rs].mx+=tr[x].add;</span><br><span class="line">tr[x].add=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tr[x].l=l;tr[x].r=r;</span><br><span class="line"><span class="keyword">if</span>(l==r)</span><br><span class="line">&#123;</span><br><span class="line">tr[x].mx=wt[l];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">tr[x].ls=++tcnt;<span class="built_in">build</span>(tr[x].ls,l,mid);</span><br><span class="line">tr[x].rs=++tcnt;<span class="built_in">build</span>(tr[x].rs,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">update</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">point_modify</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> l,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[x].l==tr[x].r)</span><br><span class="line">&#123;</span><br><span class="line">tr[x].tag=tr[x].v=tr[x].add=<span class="number">0</span>;</span><br><span class="line">tr[x].mx=v;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(x);</span><br><span class="line"><span class="type">int</span> mid=(tr[x].l+tr[x].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) <span class="built_in">point_modify</span>(tr[x].ls,l,v);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">point_modify</span>(tr[x].rs,l,v);</span><br><span class="line"><span class="built_in">update</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query_modify1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=tr[x].l&amp;&amp;tr[x].r&lt;=r)</span><br><span class="line">&#123;</span><br><span class="line">tr[x].tag=<span class="number">1</span>;</span><br><span class="line">tr[x].add=<span class="number">0</span>;</span><br><span class="line">tr[x].v=v;</span><br><span class="line">tr[x].mx=v;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(x);</span><br><span class="line"><span class="type">int</span> mid=(tr[x].l+tr[x].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) <span class="built_in">query_modify1</span>(tr[x].ls,l,r,v);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid) <span class="built_in">query_modify1</span>(tr[x].rs,l,r,v);</span><br><span class="line"><span class="built_in">update</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query_modify2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=tr[x].l&amp;&amp;tr[x].r&lt;=r)</span><br><span class="line">&#123;</span><br><span class="line">tr[x].add+=v;</span><br><span class="line">tr[x].mx+=v;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(x);</span><br><span class="line"><span class="type">int</span> mid=(tr[x].l+tr[x].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) <span class="built_in">query_modify2</span>(tr[x].ls,l,r,v);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid) <span class="built_in">query_modify2</span>(tr[x].rs,l,r,v);</span><br><span class="line"><span class="built_in">update</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query_max</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> mx=<span class="number">-2e9</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=tr[x].l&amp;&amp;tr[x].r&lt;=r) <span class="keyword">return</span> tr[x].mx;</span><br><span class="line"><span class="built_in">pushdown</span>(x);</span><br><span class="line"><span class="type">int</span> mid=(tr[x].l+tr[x].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) mx=<span class="built_in">max</span>(<span class="built_in">query_max</span>(tr[x].ls,l,r),mx);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid) mx=<span class="built_in">max</span>(<span class="built_in">query_max</span>(tr[x].rs,l,r),mx);</span><br><span class="line"><span class="keyword">return</span> mx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">cover</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">query_modify1</span>(<span class="number">1</span>,id[top[x]],id[x],z);</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&gt;dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="keyword">if</span>(x!=y) <span class="built_in">query_modify1</span>(<span class="number">1</span>,id[x]+<span class="number">1</span>,id[y],z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">query_modify2</span>(<span class="number">1</span>,id[top[x]],id[x],z);</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&gt;dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="keyword">if</span>(x!=y) <span class="built_in">query_modify2</span>(<span class="number">1</span>,id[x]+<span class="number">1</span>,id[y],z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> mx=<span class="number">-2e9</span>;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">mx=<span class="built_in">max</span>(mx,<span class="built_in">query_max</span>(<span class="number">1</span>,id[top[x]],id[x]));</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&gt;dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="keyword">if</span>(x!=y) mx=<span class="built_in">max</span>(mx,<span class="built_in">query_max</span>(<span class="number">1</span>,id[x]+<span class="number">1</span>,id[y]));</span><br><span class="line"><span class="keyword">return</span> mx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> u[<span class="number">100100</span>],v[<span class="number">100100</span>];</span><br><span class="line"><span class="type">char</span> opt[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;111.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line"><span class="built_in">read</span>(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(u[i]),<span class="built_in">read</span>(v[i]),<span class="built_in">read</span>(w[i]);</span><br><span class="line"><span class="built_in">add</span>(u[i],v[i],w[i]);<span class="built_in">add</span>(v[i],u[i],w[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(u[i]!=fa[v[i]]) <span class="built_in">swap</span>(u[i],v[i]);</span><br><span class="line">num[i]=id[v[i]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="type">int</span> x,y,z;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,opt)&amp;&amp;opt[<span class="number">0</span>]!=<span class="string">&#x27;S&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(x),<span class="built_in">read</span>(y);</span><br><span class="line"><span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(opt[<span class="number">1</span>]==<span class="string">&#x27;h&#x27;</span>) <span class="built_in">point_modify</span>(<span class="number">1</span>,num[x],y);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(z);</span><br><span class="line"><span class="built_in">cover</span>(x,y,z);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(z);</span><br><span class="line"><span class="built_in">Add</span>(x,y,z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">&#x27;M&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">Max</span>(x,y));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;P3384-【模板】树链剖分&quot;&gt;&lt;a href=&quot;#P3384-【模板】树链剖分&quot; class=&quot;headerlink&quot; title=&quot;P3384 【模板】树链剖分&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P3384&quot;&gt;P3384 【模板】树链剖分&lt;/a&gt;&lt;/h1&gt;&lt;h3 id=&quot;这道是最基础的树链剖分题目。可以当做复习食用。。&quot;&gt;&lt;a href=&quot;#这道是最基础的树链剖分题目。可以当做复习食用。。&quot; class=&quot;headerlink&quot; title=&quot;这道是最基础的树链剖分题目。可以当做复习食用。。&quot;&gt;&lt;/a&gt;这道是最基础的树链剖分题目。可以当做复习食用。。&lt;/h3&gt;&lt;h4 id=&quot;其中维护字数操作：因为它是按照DSF序进行编号的，所以维护序列x到x-siz-x-1便是维护以x为根的子树。&quot;&gt;&lt;a href=&quot;#其中维护字数操作：因为它是按照DSF序进行编号的，所以维护序列x到x-siz-x-1便是维护以x为根的子树。&quot; class=&quot;headerlink&quot; title=&quot;其中维护字数操作：因为它是按照DSF序进行编号的，所以维护序列x到x+siz[x]-1便是维护以x为根的子树。&quot;&gt;&lt;/a&gt;其中维护字数操作：因为它是按照DSF序进行编号的，所以维护序列x到x+siz[x]-1便是维护以x为根的子树。&lt;/h4&gt;</summary>
    
    
    
    
    <category term="树链剖分" scheme="http://syrsteven.github.io/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>平衡树做题总结</title>
    <link href="http://syrsteven.github.io/post/922e70da.html"/>
    <id>http://syrsteven.github.io/post/922e70da.html</id>
    <published>2019-01-02T02:29:10.000Z</published>
    <updated>2023-09-01T20:06:21.718Z</updated>
    
    <content type="html"><![CDATA[<h1 id="总结题前，先上三份平衡树代码"><a href="#总结题前，先上三份平衡树代码" class="headerlink" title="总结题前，先上三份平衡树代码"></a>总结题前，先上三份平衡树代码</h1><span id="more"></span><h3 id="spaly"><a href="#spaly" class="headerlink" title="spaly"></a>spaly</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T f=<span class="number">1</span>;a=<span class="number">0</span>;<span class="type">char</span> s=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(s&lt;<span class="string">&#x27;0&#x27;</span>||s&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(s==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(s&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;s&gt;=<span class="string">&#x27;0&#x27;</span>)&#123;a=a*<span class="number">10</span>+s-<span class="string">&#x27;0&#x27;</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    a*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> v,fa,son[<span class="number">2</span>],siz,cnt;</span><br><span class="line">&#125;tr[<span class="number">500000</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> rt,tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;tr[x].siz=tr[x].cnt+tr[tr[x].son[<span class="number">1</span>]].siz+tr[tr[x].son[<span class="number">0</span>]].siz;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> y=tr[x].fa,z=tr[y].fa;</span><br><span class="line">    <span class="type">bool</span> a=(tr[x].v&gt;tr[y].v);</span><br><span class="line">    <span class="keyword">if</span>(z) tr[z].son[tr[y].v&gt;tr[z].v]=x;</span><br><span class="line">    tr[x].fa=z;</span><br><span class="line">    tr[y].son[a]=tr[x].son[!a];</span><br><span class="line">    tr[tr[x].son[!a]].fa=y;</span><br><span class="line">    tr[x].son[!a]=y;</span><br><span class="line">    tr[y].fa=x;</span><br><span class="line">    <span class="built_in">update</span>(y);</span><br><span class="line">    <span class="built_in">update</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!f) rt=x;</span><br><span class="line">    <span class="keyword">while</span>(tr[x].fa!=f)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> y=tr[x].fa,z=tr[y].fa;</span><br><span class="line">        <span class="keyword">if</span>(z!=f) <span class="built_in">rotate</span>((((x==tr[y].son[<span class="number">1</span>])==(y==tr[z].son[<span class="number">1</span>]))?y:x));</span><br><span class="line">        <span class="built_in">rotate</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=rt,fa=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(tr[x].v-v&amp;&amp;x)</span><br><span class="line">    &#123;</span><br><span class="line">        fa=x;</span><br><span class="line">        x=tr[x].son[v&gt;tr[x].v];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x) tr[x].cnt++,tr[x].siz++;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        x=++tot;</span><br><span class="line">        <span class="built_in">memset</span>(&amp;tr[x],<span class="number">0</span>,<span class="built_in">sizeof</span>(node));</span><br><span class="line">        <span class="keyword">if</span>(fa) tr[fa].son[v&gt;tr[fa].v]=x;</span><br><span class="line">        tr[x].fa=fa;</span><br><span class="line">        tr[x].cnt=tr[x].siz=<span class="number">1</span>;</span><br><span class="line">        tr[x].v=v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">splay</span>(x,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dlt</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=rt;</span><br><span class="line">    <span class="keyword">while</span>(tr[x].v-v&amp;&amp;x)</span><br><span class="line">    &#123;</span><br><span class="line">        x=tr[x].son[v&gt;tr[x].v];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">splay</span>(x,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(tr[x].cnt&gt;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[x].cnt--;</span><br><span class="line">        tr[x].siz--;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> typ=(!tr[x].son[<span class="number">1</span>])+(!tr[x].son[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span>(typ==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        rt=tr[x].son[<span class="number">1</span>]+tr[x].son[<span class="number">0</span>];</span><br><span class="line">        tr[rt].fa=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(typ==<span class="number">2</span>) rt=tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> y=tr[x].son[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">while</span>(tr[y].son[<span class="number">1</span>]) y=tr[y].son[<span class="number">1</span>];</span><br><span class="line">        <span class="built_in">splay</span>(y,x);</span><br><span class="line">        tr[y].son[<span class="number">1</span>]=tr[x].son[<span class="number">1</span>];</span><br><span class="line">        tr[tr[x].son[<span class="number">1</span>]].fa=y;</span><br><span class="line">        tr[y].fa=<span class="number">0</span>;</span><br><span class="line">        rt=y;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">pre</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=rt,nowval;</span><br><span class="line">    <span class="keyword">while</span>(x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tr[x].v&gt;=v) x=tr[x].son[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            nowval=tr[x].v;</span><br><span class="line">            x=tr[x].son[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nowval;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">suf</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=rt,nowval;</span><br><span class="line">    <span class="keyword">while</span>(x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tr[x].v&lt;=v) x=tr[x].son[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            nowval=tr[x].v;</span><br><span class="line">            x=tr[x].son[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nowval;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">rank</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=rt;</span><br><span class="line">    <span class="keyword">while</span>(tr[x].v!=v) x=tr[x].son[v&gt;tr[x].v];</span><br><span class="line">    <span class="built_in">splay</span>(x,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> tr[tr[x].son[<span class="number">0</span>]].siz+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">kth</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=rt;</span><br><span class="line">    <span class="keyword">while</span>(!(tr[x].cnt+tr[tr[x].son[<span class="number">0</span>]].siz&gt;=k&amp;&amp;tr[tr[x].son[<span class="number">0</span>]].siz&lt;k))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tr[tr[x].son[<span class="number">0</span>]].siz&gt;=k) x=tr[x].son[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            k-=tr[x].cnt+tr[tr[x].son[<span class="number">0</span>]].siz;</span><br><span class="line">            x=tr[x].son[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tr[x].v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,opt,x;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(opt),<span class="built_in">read</span>(x);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">1</span>) <span class="built_in">ins</span>(x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>) <span class="built_in">dlt</span>(x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">rank</span>(x));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">4</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">kth</span>(x));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">5</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">pre</span>(x));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">6</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">suf</span>(x));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="treap"><a href="#treap" class="headerlink" title="treap"></a>treap</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span>+<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T f=<span class="number">1</span>;a=<span class="number">0</span>;<span class="type">char</span> s=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(s&lt;<span class="string">&#x27;0&#x27;</span>||s&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(s==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(s&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;s&gt;=<span class="string">&#x27;0&#x27;</span>)&#123;a=a*<span class="number">10</span>+s-<span class="string">&#x27;0&#x27;</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">a*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> son[<span class="number">2</span>],size,v,cnt;</span><br><span class="line"><span class="type">int</span> key;</span><br><span class="line">&#125;tr[<span class="number">100100</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tcnt,rt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;tr[x].size=tr[tr[x].son[<span class="number">1</span>]].size+tr[tr[x].son[<span class="number">0</span>]].size+tr[x].cnt;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> &amp;x,<span class="type">int</span> lr)</span><span class="comment">//lr=0，左旋，lr=1，右旋，将x旋到相应的左右儿子上</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> y=tr[x].son[lr];</span><br><span class="line">tr[x].son[lr]=tr[y].son[!lr];</span><br><span class="line">tr[y].son[!lr]=x;</span><br><span class="line"><span class="built_in">update</span>(x);</span><br><span class="line"><span class="built_in">update</span>(y);</span><br><span class="line">x=y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> &amp;x,<span class="type">int</span> v)</span><span class="comment">//只有在新建节点的时候才可能不满足堆的性质，此时用rotate()维护。</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!x)</span><br><span class="line">&#123;</span><br><span class="line">x=++tcnt;</span><br><span class="line">tr[x].size=tr[x].cnt=<span class="number">1</span>;</span><br><span class="line">tr[x].key=<span class="built_in">rand</span>();</span><br><span class="line">tr[x].v=v;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">tr[x].size++;</span><br><span class="line"><span class="keyword">if</span>(tr[x].v==v) tr[x].cnt++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">bool</span> a=(v&gt;tr[x].v);</span><br><span class="line"><span class="built_in">ins</span>(tr[x].son[a],v);</span><br><span class="line"><span class="keyword">if</span>(tr[tr[x].son[a]].key&lt;tr[x].key) <span class="built_in">rotate</span>(x,a);<span class="comment">//维护堆的性质。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dlt</span><span class="params">(<span class="type">int</span> &amp;x,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!x) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(tr[x].v==v)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[x].cnt&gt;<span class="number">1</span>) </span><br><span class="line">&#123;</span><br><span class="line">tr[x].size--;tr[x].cnt--;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!tr[x].son[<span class="number">1</span>]||!tr[x].son[<span class="number">0</span>]) x=tr[x].son[<span class="number">1</span>]+tr[x].son[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">else</span><span class="comment">//如果x既有左儿子又有右儿子，将其旋转到叶子节点，然后将其删去</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">bool</span> a=(tr[tr[x].son[<span class="number">1</span>]].key&lt;tr[tr[x].son[<span class="number">0</span>]].key);<span class="comment">//根据堆的性质，选取小的儿子代替x</span></span><br><span class="line"><span class="built_in">rotate</span>(x,a);</span><br><span class="line"><span class="built_in">dlt</span>(x,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(tr[x].v&gt;v) tr[x].size--,<span class="built_in">dlt</span>(tr[x].son[<span class="number">0</span>],v);</span><br><span class="line"><span class="keyword">else</span> tr[x].size--,<span class="built_in">dlt</span>(tr[x].son[<span class="number">1</span>],v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//之后的操作和splay相同</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">rnk</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x=rt,rk=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[x].v&gt;=v) x=tr[x].son[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">rk+=tr[x].cnt+tr[tr[x].son[<span class="number">0</span>]].size;</span><br><span class="line">x=tr[x].son[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,rk+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">kth</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x=rt;</span><br><span class="line"><span class="keyword">while</span>(!(tr[x].cnt+tr[tr[x].son[<span class="number">0</span>]].size&gt;=k&amp;&amp;tr[tr[x].son[<span class="number">0</span>]].size&lt;k))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[tr[x].son[<span class="number">0</span>]].size&gt;=k) x=tr[x].son[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">k-=tr[x].cnt+tr[tr[x].son[<span class="number">0</span>]].size;</span><br><span class="line">x=tr[x].son[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,tr[x].v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pre</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x=rt,pre;</span><br><span class="line"><span class="keyword">while</span>(x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[x].v&gt;=v) x=tr[x].son[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">pre=tr[x].v;</span><br><span class="line">x=tr[x].son[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,pre);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">suf</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x=rt,suf;</span><br><span class="line"><span class="keyword">while</span>(x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[x].v&lt;=v) x=tr[x].son[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">suf=tr[x].v;</span><br><span class="line">x=tr[x].son[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,suf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,opt,x;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">read</span>(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(opt),<span class="built_in">read</span>(x);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)      <span class="built_in">ins</span>(rt,x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>)<span class="built_in">dlt</span>(rt,x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">3</span>) <span class="built_in">rnk</span>(x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">4</span>) <span class="built_in">kth</span>(x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">5</span>) <span class="built_in">pre</span>(x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">6</span>) <span class="built_in">suf</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="FHQ-treap"><a href="#FHQ-treap" class="headerlink" title="FHQ treap"></a>FHQ treap</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T &gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T f=<span class="number">1</span>;a=<span class="number">0</span>;<span class="type">char</span> s=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(s&lt;<span class="string">&#x27;0&#x27;</span>||s&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(s==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(s&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;s&gt;=<span class="string">&#x27;0&#x27;</span>)&#123;a=a*<span class="number">10</span>+s-<span class="string">&#x27;0&#x27;</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">a*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ls,rs,size,v;</span><br><span class="line"><span class="type">int</span> key;</span><br><span class="line">&#125;tr[<span class="number">100100</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tcnt,rt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;tr[x].size=tr[tr[x].ls].size+tr[tr[x].rs].size+<span class="number">1</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">split</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> &amp;a,<span class="type">int</span> &amp;b,<span class="type">int</span> v)</span><span class="comment">//重点之一！！！，将以节点x为根的子树，按v为标准，分为a,b两棵树</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!x)&#123;a=b=<span class="number">0</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(tr[x].v&lt;=v)<span class="comment">//x的值小于v，所以x及其左儿子属于a,然后划分x的右子树。</span></span><br><span class="line">a=x,<span class="built_in">split</span>(tr[x].rs,tr[a].rs,b,v);</span><br><span class="line"><span class="keyword">else</span> <span class="comment">//同上</span></span><br><span class="line">b=x,<span class="built_in">split</span>(tr[x].ls,a,tr[b].ls,v);</span><br><span class="line"><span class="built_in">update</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> &amp;x,<span class="type">int</span> a,<span class="type">int</span> b)</span><span class="comment">//重点之二，将树a,b合并，并将根节点的值传给x,注意要是新树满足堆的性质。</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a==<span class="number">0</span>||b==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">x=a+b;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tr[a].key&lt;tr[b].key)<span class="comment">//a的key小于b的，所以将a当做根节点</span></span><br><span class="line">x=a,<span class="built_in">merge</span>(tr[x].rs,tr[a].rs,b);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">x=b,<span class="built_in">merge</span>(tr[x].ls,a,tr[b].ls);</span><br><span class="line"><span class="built_in">update</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">0</span>,z=<span class="number">0</span>;</span><br><span class="line">z=++tcnt;</span><br><span class="line">tr[z].key=<span class="built_in">rand</span>()*<span class="built_in">rand</span>();</span><br><span class="line">tr[z].v=v;</span><br><span class="line">tr[z].size=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">split</span>(rt,x,y,v);</span><br><span class="line"><span class="built_in">merge</span>(x,x,z);</span><br><span class="line"><span class="built_in">merge</span>(rt,x,y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dlt</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">0</span>,z=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">split</span>(rt,x,y,v);</span><br><span class="line"><span class="built_in">split</span>(x,x,z,v<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">merge</span>(z,tr[z].ls,tr[z].rs);<span class="comment">//z是一颗所有值均为v的树，只去一个节点。</span></span><br><span class="line"><span class="built_in">merge</span>(x,x,z);</span><br><span class="line"><span class="built_in">merge</span>(rt,x,y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rnk</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">split</span>(rt,x,y,v<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,tr[x].size+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">merge</span>(rt,x,y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">kth</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(tr[tr[x].ls].size+<span class="number">1</span>!=k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[tr[x].ls].size&gt;=k) x=tr[x].ls;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">k-=tr[tr[x].ls].size+<span class="number">1</span>;</span><br><span class="line">x=tr[x].rs;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,tr[x].v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pre</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">split</span>(rt,x,y,v<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">kth</span>(x,tr[x].size);</span><br><span class="line"><span class="built_in">merge</span>(rt,x,y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">suf</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">split</span>(rt,x,y,v);</span><br><span class="line"><span class="built_in">kth</span>(y,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">merge</span>(rt,x,y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,opt,x;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">read</span>(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(opt),<span class="built_in">read</span>(x);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)      <span class="built_in">ins</span>(x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>)<span class="built_in">dlt</span>(x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">3</span>) <span class="built_in">rnk</span>(x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">4</span>) <span class="built_in">kth</span>(rt,x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">5</span>) <span class="built_in">pre</span>(x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">6</span>) <span class="built_in">suf</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="P2234-HNOI2002-营业额统计"><a href="#P2234-HNOI2002-营业额统计" class="headerlink" title="P2234 [HNOI2002]营业额统计"></a><a href="https://www.luogu.org/problemnew/show/P2234">P2234 [HNOI2002]营业额统计</a></h1><h3 id="题目大意是让你求出每天营业额和之前的营业额的最小差值，然后求和。"><a href="#题目大意是让你求出每天营业额和之前的营业额的最小差值，然后求和。" class="headerlink" title="题目大意是让你求出每天营业额和之前的营业额的最小差值，然后求和。"></a>题目大意是让你求出每天营业额和之前的营业额的最小差值，然后求和。</h3><h3 id="很容易会想到平衡树，找出每一天营业额的前驱和后继，取两者和当天的值的最小差值即可。"><a href="#很容易会想到平衡树，找出每一天营业额的前驱和后继，取两者和当天的值的最小差值即可。" class="headerlink" title="很容易会想到平衡树，找出每一天营业额的前驱和后继，取两者和当天的值的最小差值即可。"></a>很容易会想到平衡树，找出每一天营业额的前驱和后继，取两者和当天的值的最小差值即可。</h3><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> f=<span class="number">1</span>;a=<span class="number">0</span>;<span class="type">char</span> s=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(s&lt;<span class="string">&#x27;0&#x27;</span>||s&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(s==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(s&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;s&gt;=<span class="string">&#x27;0&#x27;</span>)&#123;a=a*<span class="number">10</span>+s-<span class="string">&#x27;0&#x27;</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">a*=f;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>),a=-a;</span><br><span class="line"><span class="keyword">if</span>(a&gt;<span class="number">9</span>)<span class="built_in">write</span>(a/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(a%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> fa,son[<span class="number">2</span>],v;</span><br><span class="line">&#125;tr[<span class="number">50000</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tot,rt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> y=tr[x].fa,z=tr[y].fa;</span><br><span class="line"><span class="type">bool</span> a=(tr[x].v&gt;tr[y].v);</span><br><span class="line"><span class="keyword">if</span>(z) tr[z].son[tr[y].v&gt;tr[z].v]=x;</span><br><span class="line">tr[x].fa=z;</span><br><span class="line">tr[y].son[a]=tr[x].son[!a];</span><br><span class="line">tr[tr[x].son[!a]].fa=y;</span><br><span class="line">tr[x].son[!a]=y;</span><br><span class="line">tr[y].fa=x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!f) rt=x;</span><br><span class="line"><span class="keyword">while</span>(tr[x].fa!=f)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> y=tr[x].fa,z=tr[y].fa;</span><br><span class="line"><span class="keyword">if</span>(z!=f) <span class="built_in">rotate</span>((((tr[x].v&gt;tr[y].v)&amp;&amp;(tr[y].v&gt;tr[z].v))?y:x));</span><br><span class="line"><span class="built_in">rotate</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x=rt,fa=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(tr[x].v-v&amp;&amp;x)</span><br><span class="line">&#123;</span><br><span class="line">fa=x;</span><br><span class="line">x=tr[x].son[v&gt;tr[x].v];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">splay</span>(x,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">x=++tot;</span><br><span class="line"><span class="built_in">memset</span>(&amp;tr[x],<span class="number">0</span>,<span class="built_in">sizeof</span>(node));</span><br><span class="line"><span class="keyword">if</span>(!fa) rt=x;</span><br><span class="line"><span class="keyword">else</span> tr[fa].son[v&gt;tr[fa].v]=x;</span><br><span class="line">tr[x].fa=fa;</span><br><span class="line">tr[x].v=v;</span><br><span class="line"><span class="built_in">splay</span>(x,<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> y=tr[x].son[<span class="number">0</span>],z=tr[x].son[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">while</span>(tr[y].son[<span class="number">1</span>]&amp;&amp;y) y=tr[y].son[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">while</span>(tr[z].son[<span class="number">0</span>]&amp;&amp;z) z=tr[z].son[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">abs</span>(v-tr[y].v),<span class="built_in">abs</span>(tr[z].v-v)); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,x,ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">read</span>(n);</span><br><span class="line"><span class="built_in">read</span>(x);</span><br><span class="line"><span class="built_in">ins</span>(x);</span><br><span class="line">ans+=x;</span><br><span class="line">tr[<span class="number">0</span>].fa=<span class="number">0</span>;</span><br><span class="line">tr[<span class="number">0</span>].v=<span class="number">0x3f3f3f</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(x);</span><br><span class="line">ans+=<span class="built_in">ins</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">write</span>(ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="然而我的splay被玄学的卡了一个点，郁闷ing"><a href="#然而我的splay被玄学的卡了一个点，郁闷ing" class="headerlink" title="然而我的splay被玄学的卡了一个点，郁闷ing"></a>然而我的splay被玄学的卡了一个点，郁闷ing</h4><h1 id="P3391-【模板】文艺平衡树（Splay）"><a href="#P3391-【模板】文艺平衡树（Splay）" class="headerlink" title="P3391 【模板】文艺平衡树（Splay）"></a><a href="https://www.luogu.org/problemnew/show/P3391">P3391 【模板】文艺平衡树（Splay）</a></h1><h3 id="题意极其简单：翻转区间。然而题却不好想。"><a href="#题意极其简单：翻转区间。然而题却不好想。" class="headerlink" title="题意极其简单：翻转区间。然而题却不好想。"></a>题意极其简单：翻转区间。然而题却不好想。</h3><h3 id="我们用splay来维护序列的顺序，splay中排名第k的节点在序列中就是第k个。所以无论我们怎么旋，当前splay所维护的序列顺序是不变的。然后我们考虑翻转。这里有一个神奇的操作，找出l的前驱x和r的后继y，splay-x-0-splay-y-x-。此时y的左儿子及其子树便是区间l到r。我们只需像线段树一样将节点打上标记即可。pushdown时传递标记并交换它的左右儿子。输出按中序遍历即可。"><a href="#我们用splay来维护序列的顺序，splay中排名第k的节点在序列中就是第k个。所以无论我们怎么旋，当前splay所维护的序列顺序是不变的。然后我们考虑翻转。这里有一个神奇的操作，找出l的前驱x和r的后继y，splay-x-0-splay-y-x-。此时y的左儿子及其子树便是区间l到r。我们只需像线段树一样将节点打上标记即可。pushdown时传递标记并交换它的左右儿子。输出按中序遍历即可。" class="headerlink" title="我们用splay来维护序列的顺序，splay中排名第k的节点在序列中就是第k个。所以无论我们怎么旋，当前splay所维护的序列顺序是不变的。然后我们考虑翻转。这里有一个神奇的操作，找出l的前驱x和r的后继y，splay(x,0),splay(y,x)。此时y的左儿子及其子树便是区间l到r。我们只需像线段树一样将节点打上标记即可。pushdown时传递标记并交换它的左右儿子。输出按中序遍历即可。"></a>我们用splay来维护序列的顺序，splay中排名第k的节点在序列中就是第k个。所以无论我们怎么旋，当前splay所维护的序列顺序是不变的。然后我们考虑翻转。这里有一个神奇的操作，找出l的前驱x和r的后继y，splay(x,0),splay(y,x)。此时y的左儿子及其子树便是区间l到r。我们只需像线段树一样将节点打上标记即可。pushdown时传递标记并交换它的左右儿子。输出按中序遍历即可。</h3><p>上代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T f=<span class="number">1</span>;a=<span class="number">0</span>;<span class="type">char</span> s=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(s&lt;<span class="string">&#x27;0&#x27;</span>||s&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(s==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(s&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;s&gt;=<span class="string">&#x27;0&#x27;</span>)&#123;a=a*<span class="number">10</span>+s-<span class="string">&#x27;0&#x27;</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">a*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> fa,v,son[<span class="number">2</span>],tag,siz;</span><br><span class="line">&#125;tr[<span class="number">200000</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tot,rt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;tr[x].siz=tr[tr[x].son[<span class="number">1</span>]].siz+tr[tr[x].son[<span class="number">0</span>]].siz+<span class="number">1</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[x].tag)</span><br><span class="line">&#123;</span><br><span class="line">tr[tr[x].son[<span class="number">1</span>]].tag^=<span class="number">1</span>;</span><br><span class="line">tr[tr[x].son[<span class="number">0</span>]].tag^=<span class="number">1</span>;</span><br><span class="line">tr[x].tag=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">swap</span>(tr[x].son[<span class="number">1</span>],tr[x].son[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> y=tr[x].fa,z=tr[y].fa;</span><br><span class="line"><span class="type">bool</span> a=(tr[y].son[<span class="number">1</span>]==x);</span><br><span class="line"><span class="keyword">if</span>(z) tr[z].son[tr[z].son[<span class="number">1</span>]==y]=x;</span><br><span class="line">tr[x].fa=z;</span><br><span class="line">tr[y].son[a]=tr[x].son[!a];</span><br><span class="line">tr[tr[x].son[!a]].fa=y;</span><br><span class="line">tr[x].son[!a]=y;</span><br><span class="line">tr[y].fa=x;</span><br><span class="line"><span class="built_in">update</span>(y);</span><br><span class="line"><span class="built_in">update</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!f) rt=x;</span><br><span class="line"><span class="keyword">while</span>(tr[x].fa!=f)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> y=tr[x].fa,z=tr[y].fa;</span><br><span class="line"><span class="keyword">if</span>(z!=f) <span class="built_in">rotate</span>((((tr[x].v&gt;tr[y].v)&amp;&amp;(tr[y].v&gt;tr[z].v))?y:x));</span><br><span class="line"><span class="built_in">rotate</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x=rt,fa=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x)fa=x,x=tr[x].son[v&gt;tr[x].v];</span><br><span class="line">x=++tot;</span><br><span class="line"><span class="built_in">memset</span>(&amp;tr[x],<span class="number">0</span>,<span class="built_in">sizeof</span>(node));</span><br><span class="line"><span class="keyword">if</span>(fa) tr[fa].son[v&gt;tr[fa].v]=x;</span><br><span class="line"><span class="keyword">else</span> rt=x;</span><br><span class="line">tr[x].fa=fa;</span><br><span class="line">tr[x].v=v;</span><br><span class="line">tr[x].siz=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">splay</span>(x,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">kth</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x=rt;</span><br><span class="line"><span class="built_in">pushdown</span>(x);</span><br><span class="line"><span class="keyword">while</span>(tr[tr[x].son[<span class="number">0</span>]].siz+<span class="number">1</span>!=v)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[tr[x].son[<span class="number">0</span>]].siz&gt;=v) x=tr[x].son[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">else</span> v-=tr[tr[x].son[<span class="number">0</span>]].siz+<span class="number">1</span>,x=tr[x].son[<span class="number">1</span>];</span><br><span class="line"><span class="built_in">pushdown</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="built_in">kth</span>(l),y=<span class="built_in">kth</span>(r+<span class="number">2</span>);</span><br><span class="line"><span class="built_in">splay</span>(x,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">splay</span>(y,x);</span><br><span class="line">tr[tr[tr[rt].son[<span class="number">1</span>]].son[<span class="number">0</span>]].tag^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!x) <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">pushdown</span>(x);</span><br><span class="line"><span class="built_in">print</span>(tr[x].son[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">if</span>(tr[x].v&gt;<span class="number">1</span>&amp;&amp;tr[x].v&lt;=n+<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,tr[x].v<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">print</span>(tr[x].son[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">read</span>(n),<span class="built_in">read</span>(m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">2</span>;i++) <span class="built_in">ins</span>(i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(l),<span class="built_in">read</span>(r);</span><br><span class="line"><span class="built_in">solve</span>(l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(rt);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="其中有几点需要注意："><a href="#其中有几点需要注意：" class="headerlink" title="其中有几点需要注意："></a>其中有几点需要注意：</h3><ol><li><p><strong>这道题中节点并没有权值，所以不能用权值判断左右儿子。</strong></p></li><li><p><strong>因为有时你要翻转1到n的序列，所以你可以建n+2各节点，第n号节点表示在序列中的n-1的位置。</strong></p></li></ol><h1 id="P1486-NOI2004-郁闷的出纳员"><a href="#P1486-NOI2004-郁闷的出纳员" class="headerlink" title="P1486 [NOI2004]郁闷的出纳员"></a><a href="https://www.luogu.org/problemnew/show/P1486">P1486 [NOI2004]郁闷的出纳员</a></h1><h3 id="这道题的难点主要是之前的每个员工加上了某个工资，然而新加入的员工并不会加上，此时打一个标记显然不行。这是我们可以将新加入的员工工资减去之前员工加过的工资。"><a href="#这道题的难点主要是之前的每个员工加上了某个工资，然而新加入的员工并不会加上，此时打一个标记显然不行。这是我们可以将新加入的员工工资减去之前员工加过的工资。" class="headerlink" title="这道题的难点主要是之前的每个员工加上了某个工资，然而新加入的员工并不会加上，此时打一个标记显然不行。这是我们可以将新加入的员工工资减去之前员工加过的工资。"></a>这道题的难点主要是之前的每个员工加上了某个工资，然而新加入的员工并不会加上，此时打一个标记显然不行。这是我们可以将新加入的员工工资减去之前员工加过的工资。</h3><p>看代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T f=<span class="number">1</span>;a=<span class="number">0</span>;<span class="type">char</span> s=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(s&lt;<span class="string">&#x27;0&#x27;</span>||s&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(s==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(s&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;s&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;a=a*<span class="number">10</span>+s-<span class="string">&#x27;0&#x27;</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">a*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> rt,tot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> fa,v,son[<span class="number">2</span>],siz,cnt;</span><br><span class="line">&#125;tr[<span class="number">500000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;tr[x].siz=tr[x].cnt+tr[tr[x].son[<span class="number">1</span>]].siz+tr[tr[x].son[<span class="number">0</span>]].siz;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> y=tr[x].fa,z=tr[y].fa;</span><br><span class="line"><span class="type">bool</span> a=(tr[x].v&gt;tr[y].v);</span><br><span class="line"><span class="keyword">if</span>(z) tr[z].son[tr[y].v&gt;tr[z].v]=x;</span><br><span class="line">tr[x].fa=z;</span><br><span class="line">tr[y].son[a]=tr[x].son[!a];</span><br><span class="line">tr[tr[x].son[!a]].fa=y;</span><br><span class="line">tr[x].son[!a]=y;</span><br><span class="line">tr[y].fa=x;</span><br><span class="line"><span class="built_in">update</span>(y);</span><br><span class="line"><span class="built_in">update</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!f) rt=x;</span><br><span class="line"><span class="keyword">while</span>(tr[x].fa!=f)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> y=tr[x].fa,z=tr[y].fa;</span><br><span class="line"><span class="keyword">if</span>(z!=f) <span class="built_in">rotate</span>((((tr[x].v&gt;tr[y].v)&amp;&amp;(tr[y].v&gt;tr[z].v))?y:x));</span><br><span class="line"><span class="built_in">rotate</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x=rt,fa=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(tr[x].v-v&amp;&amp;x)</span><br><span class="line">&#123;</span><br><span class="line">fa=x;</span><br><span class="line">x=tr[x].son[v&gt;tr[x].v];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x) tr[x].cnt++,tr[x].siz++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">x=++tot;</span><br><span class="line"><span class="built_in">memset</span>(&amp;tr[x],<span class="number">0</span>,<span class="built_in">sizeof</span>(node));</span><br><span class="line"><span class="keyword">if</span>(fa) tr[fa].son[v&gt;tr[fa].v]=x;</span><br><span class="line"><span class="keyword">else</span> rt=x;</span><br><span class="line">tr[x].fa=fa;</span><br><span class="line">tr[x].siz=tr[x].cnt=<span class="number">1</span>;</span><br><span class="line">tr[x].v=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">splay</span>(x,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">suf</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x=rt,nowval=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[x].v&lt;v) x=tr[x].son[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(tr[x].v==v) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">nowval=x;</span><br><span class="line">x=tr[x].son[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nowval;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dlt</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> y=<span class="built_in">suf</span>(v);</span><br><span class="line"><span class="keyword">if</span>(!y)</span><br><span class="line">&#123;</span><br><span class="line">tot=rt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">splay</span>(y,<span class="number">0</span>);</span><br><span class="line">tr[y].son[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">update</span>(y);</span><br><span class="line"><span class="type">int</span> x=tr[y].son[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">while</span>(tr[x].son[<span class="number">0</span>]) x=tr[x].son[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">splay</span>(x,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">kth</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x=rt;</span><br><span class="line"><span class="keyword">while</span>(!(tr[x].cnt+tr[tr[x].son[<span class="number">1</span>]].siz&gt;=v&amp;&amp;tr[tr[x].son[<span class="number">1</span>]].siz&lt;v))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[tr[x].son[<span class="number">1</span>]].siz&gt;=v) x=tr[x].son[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">v-=tr[x].cnt+tr[tr[x].son[<span class="number">1</span>]].siz;</span><br><span class="line">x=tr[x].son[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">splay</span>(x,<span class="number">0</span>); </span><br><span class="line"><span class="keyword">return</span> tr[x].v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,minn,x,tag,ans;</span><br><span class="line"><span class="type">char</span> opt[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;666.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;66.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line"><span class="built_in">read</span>(n),<span class="built_in">read</span>(minn);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,opt);<span class="built_in">read</span>(x);</span><br><span class="line"><span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">&#x27;I&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;minn) <span class="keyword">continue</span>;</span><br><span class="line">ans++;</span><br><span class="line"><span class="built_in">ins</span>(x-tag);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">&#x27;A&#x27;</span>) tag+=x;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">&#x27;S&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">tag-=x;</span><br><span class="line"><span class="built_in">dlt</span>(minn-tag);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">&#x27;F&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[rt].siz&lt;x) <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">kth</span>(x)+tag);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans-tr[rt].siz);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="还是被卡一个点，90分也许treap能过吧。"><a href="#还是被卡一个点，90分也许treap能过吧。" class="headerlink" title="还是被卡一个点，90分也许treap能过吧。"></a>还是被卡一个点，90分也许treap能过吧。</h4><h1 id="P4146-序列终结者"><a href="#P4146-序列终结者" class="headerlink" title="P4146 序列终结者"></a><a href="https://www.luogu.org/problemnew/show/P4146">P4146 序列终结者</a></h1><h4 id="这道题并不算太难，可以当做splay的模板题。从这道题你可以体会到splay中标记的妙用。"><a href="#这道题并不算太难，可以当做splay的模板题。从这道题你可以体会到splay中标记的妙用。" class="headerlink" title="这道题并不算太难，可以当做splay的模板题。从这道题你可以体会到splay中标记的妙用。"></a>这道题并不算太难，可以当做splay的模板题。从这道题你可以体会到splay中标记的妙用。</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T f=<span class="number">1</span>;a=<span class="number">0</span>;<span class="type">char</span> s=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(s&lt;<span class="string">&#x27;0&#x27;</span>||s&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(s==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(s&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;s&gt;=<span class="string">&#x27;0&#x27;</span>)&#123;a=a*<span class="number">10</span>+s-<span class="string">&#x27;0&#x27;</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">a*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> fa,son[<span class="number">2</span>],siz,mark,tag,mx,v;</span><br><span class="line">&#125;tr[<span class="number">200000</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tot,rt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">maxx</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;<span class="keyword">return</span> (a&gt;b)?a:b;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tr[x].siz=tr[tr[x].son[<span class="number">1</span>]].siz+tr[tr[x].son[<span class="number">0</span>]].siz+<span class="number">1</span>;</span><br><span class="line">tr[x].mx=<span class="built_in">maxx</span>(tr[x].v,<span class="built_in">maxx</span>(tr[tr[x].son[<span class="number">1</span>]].mx,tr[tr[x].son[<span class="number">0</span>]].mx));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[x].tag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[x].son[<span class="number">1</span>]) </span><br><span class="line">&#123;</span><br><span class="line">tr[tr[x].son[<span class="number">1</span>]].tag+=tr[x].tag;</span><br><span class="line">tr[tr[x].son[<span class="number">1</span>]].v+=tr[x].tag;</span><br><span class="line">tr[tr[x].son[<span class="number">1</span>]].mx+=tr[x].tag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tr[x].son[<span class="number">0</span>])</span><br><span class="line">&#123;</span><br><span class="line">tr[tr[x].son[<span class="number">0</span>]].tag+=tr[x].tag;</span><br><span class="line">tr[tr[x].son[<span class="number">0</span>]].v+=tr[x].tag;</span><br><span class="line">tr[tr[x].son[<span class="number">0</span>]].mx+=tr[x].tag;</span><br><span class="line">&#125;</span><br><span class="line">tr[x].tag=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tr[x].mark)</span><br><span class="line">&#123;</span><br><span class="line">tr[tr[x].son[<span class="number">1</span>]].mark^=<span class="number">1</span>;</span><br><span class="line">tr[tr[x].son[<span class="number">0</span>]].mark^=<span class="number">1</span>;</span><br><span class="line">tr[x].mark=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">swap</span>(tr[tr[x].son[<span class="number">1</span>]].son[<span class="number">1</span>],tr[tr[x].son[<span class="number">1</span>]].son[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">swap</span>(tr[tr[x].son[<span class="number">0</span>]].son[<span class="number">1</span>],tr[tr[x].son[<span class="number">0</span>]].son[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> y=tr[x].fa,z=tr[y].fa;</span><br><span class="line"><span class="type">int</span> a=(x==tr[y].son[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span>(z) tr[z].son[y==tr[z].son[<span class="number">1</span>]]=x;</span><br><span class="line">tr[x].fa=z;</span><br><span class="line">tr[y].son[a]=tr[x].son[!a];</span><br><span class="line">tr[tr[x].son[!a]].fa=y;</span><br><span class="line">tr[x].son[!a]=y;</span><br><span class="line">tr[y].fa=x;</span><br><span class="line"><span class="built_in">update</span>(y);</span><br><span class="line"><span class="built_in">update</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!f) rt=x;</span><br><span class="line"><span class="keyword">while</span>(tr[x].fa!=f)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> y=tr[x].fa,z=tr[y].fa;</span><br><span class="line"><span class="keyword">if</span>(z!=f) <span class="built_in">rotate</span>((((y==tr[z].son[<span class="number">1</span>])==(x==tr[y].son[<span class="number">1</span>]))?y:x));</span><br><span class="line"><span class="built_in">rotate</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> x=++tot,mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">tr[x].v=tr[x].mx=<span class="number">0</span>;tr[x].fa=fa,tr[x].siz=<span class="number">1</span>;</span><br><span class="line">tr[x].son[<span class="number">0</span>]=<span class="built_in">ins</span>(l,mid<span class="number">-1</span>,x);</span><br><span class="line">tr[x].son[<span class="number">1</span>]=<span class="built_in">ins</span>(mid+<span class="number">1</span>,r,x);</span><br><span class="line"><span class="built_in">update</span>(x);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">kth</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x=rt;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">pushdown</span>(x);</span><br><span class="line"><span class="keyword">if</span>(tr[tr[x].son[<span class="number">0</span>]].siz&gt;=v) x=tr[x].son[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(tr[tr[x].son[<span class="number">0</span>]].siz+<span class="number">1</span>==v) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">v-=tr[tr[x].son[<span class="number">0</span>]].siz+<span class="number">1</span>;</span><br><span class="line">x=tr[x].son[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="built_in">kth</span>(l),y=<span class="built_in">kth</span>(r+<span class="number">2</span>);</span><br><span class="line"><span class="built_in">splay</span>(x,<span class="number">0</span>),<span class="built_in">splay</span>(y,x);</span><br><span class="line">tr[tr[y].son[<span class="number">0</span>]].tag+=v;</span><br><span class="line">tr[tr[y].son[<span class="number">0</span>]].v+=v;</span><br><span class="line">tr[tr[y].son[<span class="number">0</span>]].mx+=v;</span><br><span class="line"><span class="built_in">pushdown</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="built_in">kth</span>(l),y=<span class="built_in">kth</span>(r+<span class="number">2</span>);</span><br><span class="line"><span class="built_in">splay</span>(x,<span class="number">0</span>),<span class="built_in">splay</span>(y,x);</span><br><span class="line">tr[tr[y].son[<span class="number">0</span>]].mark^=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">swap</span>(tr[tr[y].son[<span class="number">0</span>]].son[<span class="number">1</span>],tr[tr[y].son[<span class="number">0</span>]].son[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">pushdown</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="built_in">kth</span>(l),y=<span class="built_in">kth</span>(r+<span class="number">2</span>);</span><br><span class="line"><span class="built_in">splay</span>(x,<span class="number">0</span>),<span class="built_in">splay</span>(y,x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,tr[tr[y].son[<span class="number">0</span>]].mx);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,opt,l,r,x;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">read</span>(n),<span class="built_in">read</span>(m);</span><br><span class="line">tr[<span class="number">0</span>].mx=tr[<span class="number">1</span>].v=tr[n+<span class="number">2</span>].v=<span class="number">-2e9</span>;</span><br><span class="line">rt=<span class="built_in">ins</span>(<span class="number">1</span>,n+<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(opt);<span class="built_in">read</span>(l);<span class="built_in">read</span>(r);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(x);</span><br><span class="line"><span class="built_in">add</span>(l,r,x); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">2</span>) <span class="built_in">change</span>(l,r);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">3</span>) <span class="built_in">query</span>(l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="P2042-NOI2005-维护数列"><a href="#P2042-NOI2005-维护数列" class="headerlink" title="P2042 [NOI2005]维护数列"></a><a href="https://www.luogu.org/problemnew/show/P2042">P2042 [NOI2005]维护数列</a></h1><h3 id="这道题是上一道题的升级版，需要你来实现六种操作，核心还是split函数，第六个操作稍微难想一点，求一个序列的最长连续子串可以用归并的思想，然后通过update来更新。"><a href="#这道题是上一道题的升级版，需要你来实现六种操作，核心还是split函数，第六个操作稍微难想一点，求一个序列的最长连续子串可以用归并的思想，然后通过update来更新。" class="headerlink" title="这道题是上一道题的升级版，需要你来实现六种操作，核心还是split函数，第六个操作稍微难想一点，求一个序列的最长连续子串可以用归并的思想，然后通过update来更新。"></a>这道题是上一道题的升级版，需要你来实现六种操作，核心还是split函数，第六个操作稍微难想一点，求一个序列的最长连续子串可以用归并的思想，然后通过update来更新。</h3><h3 id="这道题的细节太多了："><a href="#这道题的细节太多了：" class="headerlink" title="这道题的细节太多了："></a>这道题的细节太多了：</h3><ol><li>在翻转区间的时候，$tr[x].l$和$tr[x].r$需交换值。($tr[x].l$表示区间从左端点开始连续最大子串和。tr[x].r同理)</li><li>修改操作中不能用tr[x].tag记录修改后的值，因为可以将其修改为0，只能用它记录是否被修改。</li><li>update的时间，update应在每次更改一个节点的子树后进行，在本题中，应在rotate，MAKE_SAME，REVERSE，DELETE，INSERT，所有的修改操作最后update。</li><li>pushdown只需在kth函数中进行即可。</li><li>不要忘记给tr[x].l和tr[x].r,tr[x].dp赋初值。</li></ol><h4 id="看代码"><a href="#看代码" class="headerlink" title="看代码"></a>看代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T f=<span class="number">1</span>;a=<span class="number">0</span>;<span class="type">char</span> s=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(s&lt;<span class="string">&#x27;0&#x27;</span>||s&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(s==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(s&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;s&gt;=<span class="string">&#x27;0&#x27;</span>)&#123;a=a*<span class="number">10</span>+s-<span class="string">&#x27;0&#x27;</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">a*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> fa,v,son[<span class="number">2</span>],siz;</span><br><span class="line"><span class="type">int</span> tag,rev,sum,dp,l,r;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fa=v=son[<span class="number">1</span>]=son[<span class="number">0</span>]=siz=<span class="number">0</span>;</span><br><span class="line">tag=rev=sum=dp=l=r=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;tr[<span class="number">5000000</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> rt,tot,num[<span class="number">5000000</span>],id[<span class="number">5000000</span>];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; reuse;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> ls=tr[x].son[<span class="number">0</span>],rs=tr[x].son[<span class="number">1</span>];</span><br><span class="line">tr[x].siz=tr[ls].siz+tr[rs].siz+<span class="number">1</span>;</span><br><span class="line">tr[x].sum=tr[ls].sum+tr[rs].sum+tr[x].v;</span><br><span class="line">tr[x].dp=<span class="built_in">max</span>(tr[ls].dp,<span class="built_in">max</span>(tr[rs].dp,tr[ls].r+tr[x].v+tr[rs].l));</span><br><span class="line">tr[x].l=<span class="built_in">max</span>(tr[ls].l,tr[ls].sum+tr[rs].l+tr[x].v);</span><br><span class="line">tr[x].r=<span class="built_in">max</span>(tr[rs].r,tr[rs].sum+tr[ls].r+tr[x].v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> ls=tr[x].son[<span class="number">0</span>],rs=tr[x].son[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(tr[x].tag)</span><br><span class="line">&#123;</span><br><span class="line">tr[x].rev=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(ls)</span><br><span class="line">&#123;</span><br><span class="line">tr[ls].tag=<span class="number">1</span>;</span><br><span class="line">tr[ls].sum=tr[x].v*tr[ls].siz;</span><br><span class="line">tr[ls].v=tr[x].v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(rs)</span><br><span class="line">&#123;</span><br><span class="line">tr[rs].tag=<span class="number">1</span>;</span><br><span class="line">tr[rs].sum=tr[x].v*tr[rs].siz;</span><br><span class="line">tr[rs].v=tr[x].v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tr[x].v&gt;=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">            <span class="keyword">if</span>(ls) tr[ls].l=tr[ls].r=tr[ls].dp=tr[ls].sum;</span><br><span class="line">            <span class="keyword">if</span>(rs) tr[rs].l=tr[rs].r=tr[rs].dp=tr[rs].sum;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">            <span class="keyword">if</span>(ls) tr[ls].l=tr[ls].r=<span class="number">0</span>,tr[ls].dp=tr[x].v;</span><br><span class="line">            <span class="keyword">if</span>(rs) tr[rs].l=tr[rs].r=<span class="number">0</span>,tr[rs].dp=tr[x].v;</span><br><span class="line">        &#125;</span><br><span class="line">tr[x].tag=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tr[x].rev)</span><br><span class="line">&#123;</span><br><span class="line">tr[ls].rev^=<span class="number">1</span>;</span><br><span class="line">tr[rs].rev^=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">swap</span>(tr[ls].l,tr[ls].r);</span><br><span class="line"><span class="built_in">swap</span>(tr[rs].l,tr[rs].r);<span class="comment">//注意，在翻转操作中，前后缀的最长上升子序列都反过来了，很容易错</span></span><br><span class="line"><span class="built_in">swap</span>(tr[ls].son[<span class="number">0</span>],tr[ls].son[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">swap</span>(tr[rs].son[<span class="number">0</span>],tr[rs].son[<span class="number">1</span>]);</span><br><span class="line">tr[x].rev=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> y=tr[x].fa,z=tr[y].fa;</span><br><span class="line"><span class="type">int</span> a=(x==tr[y].son[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span>(z) tr[z].son[y==tr[z].son[<span class="number">1</span>]]=x;</span><br><span class="line"><span class="keyword">else</span> rt=x;</span><br><span class="line">tr[x].fa=z;</span><br><span class="line">tr[y].son[a]=tr[x].son[!a];</span><br><span class="line"><span class="keyword">if</span>(tr[x].son[!a]) tr[tr[x].son[!a]].fa=y;</span><br><span class="line">tr[x].son[!a]=y;</span><br><span class="line">tr[y].fa=x;</span><br><span class="line"><span class="built_in">update</span>(y);</span><br><span class="line"><span class="built_in">update</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!f) rt=x;</span><br><span class="line"><span class="keyword">while</span>(tr[x].fa!=f)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> y=tr[x].fa,z=tr[y].fa;</span><br><span class="line"><span class="keyword">if</span>(z!=f) <span class="built_in">rotate</span>((((x==tr[y].son[<span class="number">1</span>])==(y==tr[z].son[<span class="number">1</span>]))?y:x));</span><br><span class="line"><span class="built_in">rotate</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">kth</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x=rt;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">pushdown</span>(x);</span><br><span class="line"><span class="keyword">if</span>(tr[tr[x].son[<span class="number">0</span>]].siz&gt;=v) x=tr[x].son[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(tr[tr[x].son[<span class="number">0</span>]].siz+<span class="number">1</span>==v) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">v-=tr[tr[x].son[<span class="number">0</span>]].siz+<span class="number">1</span>;</span><br><span class="line">x=tr[x].son[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">recycle</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> &amp;ls=tr[x].son[<span class="number">0</span>],&amp;rs=tr[x].son[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(ls) <span class="built_in">recycle</span>(ls);</span><br><span class="line"><span class="keyword">if</span>(rs) <span class="built_in">recycle</span>(rs);</span><br><span class="line">tr[x].<span class="built_in">clear</span>();</span><br><span class="line">reuse.<span class="built_in">push</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">split</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="built_in">kth</span>(l);</span><br><span class="line"><span class="type">int</span> y=<span class="built_in">kth</span>(r+<span class="number">2</span>);</span><br><span class="line"><span class="built_in">splay</span>(x,<span class="number">0</span>),<span class="built_in">splay</span>(y,x);</span><br><span class="line"><span class="keyword">return</span> tr[y].son[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">query</span><span class="params">(<span class="type">int</span> pos,<span class="type">int</span> cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="built_in">split</span>(pos,pos+cnt<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,tr[x].sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> pos,<span class="type">int</span> cnt,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="built_in">split</span>(pos,pos+cnt<span class="number">-1</span>);</span><br><span class="line">tr[x].tag=<span class="number">1</span>;</span><br><span class="line">tr[x].sum=tr[x].siz*v;</span><br><span class="line">tr[x].v=v;</span><br><span class="line">tr[x].l=tr[x].r=<span class="built_in">max</span>(<span class="number">0</span>,tr[x].sum);</span><br><span class="line">tr[x].dp=<span class="built_in">max</span>(v,tr[x].sum);</span><br><span class="line"><span class="built_in">pushdown</span>(x);</span><br><span class="line"><span class="built_in">update</span>(tr[x].fa);</span><br><span class="line"><span class="built_in">update</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">reserve</span><span class="params">(<span class="type">int</span> pos,<span class="type">int</span> cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="built_in">split</span>(pos,pos+cnt<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">pushdown</span>(x);</span><br><span class="line"><span class="keyword">if</span>(!tr[x].rev)</span><br><span class="line">&#123;</span><br><span class="line">tr[x].rev^=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">swap</span>(tr[x].son[<span class="number">0</span>],tr[x].son[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">swap</span>(tr[x].l,tr[x].r);</span><br><span class="line"><span class="built_in">pushdown</span>(x);</span><br><span class="line"><span class="built_in">update</span>(tr[x].fa);</span><br><span class="line"><span class="built_in">update</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dlt</span><span class="params">(<span class="type">int</span> pos,<span class="type">int</span> cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="built_in">split</span>(pos,pos+cnt<span class="number">-1</span>),y=tr[x].fa;</span><br><span class="line">tr[y].son[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">recycle</span>(x);</span><br><span class="line"><span class="built_in">update</span>(y);</span><br><span class="line"><span class="built_in">update</span>(tr[y].fa);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> x=id[mid];</span><br><span class="line"><span class="keyword">if</span> (l==r)&#123;</span><br><span class="line">        tr[x].dp=tr[x].sum=num[l];</span><br><span class="line">        tr[x].l=tr[x].r=<span class="built_in">max</span>(num[l],<span class="number">0</span>);</span><br><span class="line">        tr[x].rev=tr[x].tag=<span class="number">0</span>;</span><br><span class="line">        tr[x].siz=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">tr[x].v=num[mid];</span><br><span class="line">tr[x].fa=fa;</span><br><span class="line">tr[x].son[<span class="number">0</span>]=<span class="built_in">build</span>(l,mid<span class="number">-1</span>,x);</span><br><span class="line">tr[x].son[<span class="number">1</span>]=<span class="built_in">build</span>(mid+<span class="number">1</span>,r,x);</span><br><span class="line"><span class="built_in">update</span>(x);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> pos,<span class="type">int</span> cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> v,y;</span><br><span class="line"><span class="type">int</span> x=<span class="built_in">kth</span>(pos+<span class="number">1</span>),z=<span class="built_in">kth</span>(pos+<span class="number">2</span>);</span><br><span class="line"><span class="built_in">splay</span>(x,<span class="number">0</span>),<span class="built_in">splay</span>(z,x);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(v);</span><br><span class="line">num[i]=v;</span><br><span class="line"><span class="keyword">if</span>(!reuse.<span class="built_in">empty</span>()) y=reuse.<span class="built_in">front</span>(),reuse.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">else</span> y=++tot;</span><br><span class="line">id[i]=y;</span><br><span class="line">&#125;</span><br><span class="line">tr[z].son[<span class="number">0</span>]=<span class="built_in">build</span>(<span class="number">1</span>,cnt,z);</span><br><span class="line"><span class="built_in">update</span>(z);</span><br><span class="line"><span class="built_in">update</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,cnt,pos,v;</span><br><span class="line"><span class="type">char</span> opt[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">read</span>(n),<span class="built_in">read</span>(m);</span><br><span class="line">tr[<span class="number">0</span>].dp=num[<span class="number">1</span>]=num[n+<span class="number">2</span>]=<span class="number">-2e9</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">read</span>(num[i+<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">2</span>;i++) id[i]=i;</span><br><span class="line">rt=<span class="built_in">build</span>(<span class="number">1</span>,n+<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">tot=n+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">(<span class="type">void</span>)<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,opt);</span><br><span class="line"><span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">&#x27;I&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(pos),<span class="built_in">read</span>(cnt);</span><br><span class="line"><span class="built_in">insert</span>(pos,cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(pos),<span class="built_in">read</span>(cnt);</span><br><span class="line"><span class="built_in">dlt</span>(pos,cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">&#x27;M&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(opt[<span class="number">2</span>]==<span class="string">&#x27;X&#x27;</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,tr[rt].dp);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(pos),<span class="built_in">read</span>(cnt),<span class="built_in">read</span>(v);</span><br><span class="line"><span class="built_in">change</span>(pos,cnt,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">&#x27;R&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(pos),<span class="built_in">read</span>(cnt);</span><br><span class="line"><span class="built_in">reserve</span>(pos,cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">&#x27;G&#x27;</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(pos),<span class="built_in">read</span>(cnt);</span><br><span class="line"><span class="built_in">query</span>(pos,cnt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;总结题前，先上三份平衡树代码&quot;&gt;&lt;a href=&quot;#总结题前，先上三份平衡树代码&quot; class=&quot;headerlink&quot; title=&quot;总结题前，先上三份平衡树代码&quot;&gt;&lt;/a&gt;总结题前，先上三份平衡树代码&lt;/h1&gt;</summary>
    
    
    
    
    <category term="平衡树" scheme="http://syrsteven.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>当小球遇上盒子</title>
    <link href="http://syrsteven.github.io/post/d4bcd452.html"/>
    <id>http://syrsteven.github.io/post/d4bcd452.html</id>
    <published>2018-11-08T02:10:55.000Z</published>
    <updated>2023-09-01T20:06:21.718Z</updated>
    
    <content type="html"><![CDATA[<p>** 众所周知,小球和盒子是一对相爱相杀的好基友，他们的每一次出现都会让本蒟蒻十分痛苦。 下面本蒟蒻将总结一下之前见过的类型 **</p><h2 id="1-球相同，盒子不同，不能有空盒"><a href="#1-球相同，盒子不同，不能有空盒" class="headerlink" title="1.球相同，盒子不同，不能有空盒"></a>1.球相同，盒子不同，不能有空盒</h2><ul><li><p>这类题可以用隔板法来做，等价于在n个数,之间插入m-1个板，将其分为m组。</p></li><li><p>$ans&#x3D;c_{n-1}^{m-1}$</p></li></ul><h2 id="2-球相同，盒子不同，可以有空盒"><a href="#2-球相同，盒子不同，可以有空盒" class="headerlink" title="2.球相同，盒子不同，可以有空盒"></a>2.球相同，盒子不同，可以有空盒</h2><ul><li><p>这个类型其实是上一个类型的翻版，由于隔板法不能有空盒，所以我们先在每一个盒子里放一个小球。然后就等价于将$n+m$各元素放到$m$个盒子里。</p></li><li><p>$ans&#x3D;c_{n+m-1}^{m-1}$</p></li></ul><span id="more"></span><h2 id="3-球不同，盒子不同，可以有空盒"><a href="#3-球不同，盒子不同，可以有空盒" class="headerlink" title="3.球不同，盒子不同，可以有空盒"></a>3.球不同，盒子不同，可以有空盒</h2><ul><li><p>对于每一个球，你都可以放到$1-m$ 的任意一个位置,由于球不同，所以球与球之间是独立的。由乘法原理得：</p></li><li><p>$ans&#x3D;m^n$</p></li></ul><h2 id="4-球不同，盒子不同，不可以有空盒"><a href="#4-球不同，盒子不同，不可以有空盒" class="headerlink" title="4.球不同，盒子不同，不可以有空盒"></a>4.球不同，盒子不同，不可以有空盒</h2><ul><li><p>我们可以用捆绑法将一些小球捆绑成一个小球，这道题可以等价为将$n-m+1$个小球当成一个大球，然后求$m$个球一共有多少种排列。</p></li><li><p>$ans&#x3D;c_{n}^{n-m+1}*A_{m}^{m}$</p></li><li><p>当然我们也可以用容斥原理来做，可以有空盒的情况一共有$m^n$，我们减去有一个一定为空盒的情况$c_{m}^{1}*(m-1)^n$，再加上有两个一定为空盒的情况$c_{m}^{2}(m-2)^n$</p></li><li><p>$$ans&#x3D;\sum_{k&#x3D;0}^{m}(-1)^kc_{m}^{k}*(m-k)^n$$（奇加偶减）</p></li><li><p>其实它还可以由第二类斯特林数推得$ans&#x3D;m!*s(n,m)$</p></li></ul><h2 id="5-球不同，盒子相同，不能有空盒"><a href="#5-球不同，盒子相同，不能有空盒" class="headerlink" title="5.球不同，盒子相同，不能有空盒"></a>5.球不同，盒子相同，不能有空盒</h2><ul><li><p>对于这个问题有一种神奇的东西叫做<a href="https://baike.baidu.com/item/%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0/4938529?fr=aladdin">第二类斯特林数</a></p></li><li><p>$s(n,m)$ 表示n个不同的球，放入m个无区别的盒子，不允许盒子为空。</p></li><li><p>$$ s(i,j)&#x3D;s(i-1,j-1)+s(i-1,j)*j $$ $O(n^2)$</p></li><li><p>$$s(n,m)&#x3D;\frac{1}{m!}*\sum_{k&#x3D;0}^{m}(-1)^k(^m_k)(m-k)^n$$ $O(m)$</p></li></ul><h4 id="注：-frac-1-m-是用来将有序变成无序的（盒子不同变为相同）"><a href="#注：-frac-1-m-是用来将有序变成无序的（盒子不同变为相同）" class="headerlink" title="注：$\frac{1}{m!}$是用来将有序变成无序的（盒子不同变为相同）"></a>注：$\frac{1}{m!}$是用来将有序变成无序的（盒子不同变为相同）</h4><h2 id="6-球不同，盒子相同，可以有空盒"><a href="#6-球不同，盒子相同，可以有空盒" class="headerlink" title="6.球不同，盒子相同，可以有空盒"></a>6.球不同，盒子相同，可以有空盒</h2><ul><li><p>因为可以有空盒，我们可以枚举每次一共用了几个盒子，然后把相应的第二类斯特林数加起来就可以了</p></li><li><p>$$ans&#x3D;\sum_{i&#x3D;1}^{m}s(n,i)$$</p></li></ul><h2 id="7-球相同，盒子相同，可以有空盒"><a href="#7-球相同，盒子相同，可以有空盒" class="headerlink" title="7.球相同，盒子相同，可以有空盒"></a>7.球相同，盒子相同，可以有空盒</h2><ul><li><p>$f(n,m)$表示将n个数放到m个集合中的方案数。</p></li><li><p>$f(i,1)&#x3D;1;f(0,i)&#x3D;1;$</p></li><li><p>$if(i&lt;j) f(i,j)&#x3D;f(i,i);$</p></li><li><p>$ else\ f(i,j)&#x3D;f(i-j,j)+f(i,j-1) $</p></li></ul><h2 id="8-球相同，盒子相同，不能有空盒"><a href="#8-球相同，盒子相同，不能有空盒" class="headerlink" title="8.球相同，盒子相同，不能有空盒"></a>8.球相同，盒子相同，不能有空盒</h2><ul><li><p>有点类似于第一、二种情况之间的关系。</p></li><li><p>我们先假设在每一个盒子里都放上了一个球，就跟上面的情况一样了。</p></li><li><p>$ans&#x3D;f(n-m,m)$</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;** 众所周知,小球和盒子是一对相爱相杀的好基友，他们的每一次出现都会让本蒟蒻十分痛苦。 下面本蒟蒻将总结一下之前见过的类型 **&lt;/p&gt;
&lt;h2 id=&quot;1-球相同，盒子不同，不能有空盒&quot;&gt;&lt;a href=&quot;#1-球相同，盒子不同，不能有空盒&quot; class=&quot;headerlink&quot; title=&quot;1.球相同，盒子不同，不能有空盒&quot;&gt;&lt;/a&gt;1.球相同，盒子不同，不能有空盒&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;这类题可以用隔板法来做，等价于在n个数,之间插入m-1个板，将其分为m组。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;$ans&amp;#x3D;c_{n-1}^{m-1}$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-球相同，盒子不同，可以有空盒&quot;&gt;&lt;a href=&quot;#2-球相同，盒子不同，可以有空盒&quot; class=&quot;headerlink&quot; title=&quot;2.球相同，盒子不同，可以有空盒&quot;&gt;&lt;/a&gt;2.球相同，盒子不同，可以有空盒&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;这个类型其实是上一个类型的翻版，由于隔板法不能有空盒，所以我们先在每一个盒子里放一个小球。然后就等价于将$n+m$各元素放到$m$个盒子里。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;$ans&amp;#x3D;c_{n+m-1}^{m-1}$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="组合数学" scheme="http://syrsteven.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>黑科技——c++负值下标</title>
    <link href="http://syrsteven.github.io/post/20935e93.html"/>
    <id>http://syrsteven.github.io/post/20935e93.html</id>
    <published>2018-11-04T09:01:34.000Z</published>
    <updated>2023-09-01T20:06:21.722Z</updated>
    
    <content type="html"><![CDATA[<ul><li>有时我们会用vis数组来记录一些数的出现次数或是否被访问过，此时我们经常直接将这个数作为vis的下标，但对于负数怎么办呢？</li><li>F1：我们可以将负数加上一个数将其变成正数，然后储存。</li><li>那c++可不可以直接用负下标呢？其实是可以的</li><li>接下来用代码来解释这一黑科技。</li></ul><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1024</span>;i++) a[i]=i;</span><br><span class="line"><span class="type">int</span> *mida=&amp;a[<span class="number">512</span>];</span><br><span class="line">cout&lt;&lt;a[<span class="number">513</span>]&lt;&lt;endl;<span class="comment">//513;</span></span><br><span class="line">cout&lt;&lt;mida[<span class="number">1</span>]&lt;&lt;endl;<span class="comment">//513;</span></span><br><span class="line">cout&lt;&lt;a[<span class="number">511</span>]&lt;&lt;endl;<span class="comment">//511;</span></span><br><span class="line">cout&lt;&lt;mida[<span class="number">-1</span>]&lt;&lt;endl;<span class="comment">//511;</span></span><br><span class="line">    cout&lt;&lt;a[<span class="number">-1</span>]&lt;&lt;endl;<span class="comment">//2289996;炸了qwq</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>最后一行中的负下标可能产生运行时错误，因为它在内存中指向比数组的原点低 1 个字节的地址。 指针 midArray 会初始化为 intArray 的中点；因此可以对其使用正数组和负数组索引。 数组下标错误不会产生编译时错误，但它们会产生不可预知的结果。</li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;有时我们会用vis数组来记录一些数的出现次数或是否被访问过，此时我们经常直接将这个数作为vis的下标，但对于负数怎么办呢？&lt;/li&gt;
&lt;li&gt;F1：我们可以将负数加上一个数将其变成正数，然后储存。&lt;/li&gt;
&lt;li&gt;那c++可不可以直接用负下标呢？其实是可以的&lt;/li&gt;
&lt;li&gt;接下来用代码来解释这一黑科技。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="黑科技" scheme="http://syrsteven.github.io/tags/%E9%BB%91%E7%A7%91%E6%8A%80/"/>
    
  </entry>
  
  <entry>
    <title>哈希</title>
    <link href="http://syrsteven.github.io/post/2e3b1176.html"/>
    <id>http://syrsteven.github.io/post/2e3b1176.html</id>
    <published>2018-10-24T09:00:45.000Z</published>
    <updated>2023-09-01T20:06:21.715Z</updated>
    
    <content type="html"><![CDATA[<h1 id="哈希模板"><a href="#哈希模板" class="headerlink" title="哈希模板"></a>哈希模板</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">gethash</span><span class="params">(<span class="type">int</span> *a)</span><span class="comment">//a为你要哈希的数组（类型可以为char int） </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll rt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;a.<span class="built_in">size</span>();i++)</span><br><span class="line">&#123;</span><br><span class="line">rt=(rt+a[i])*p%mod;<span class="comment">//p为字符集大小，mod为模数； </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rt; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h1 id="字符串哈希"><a href="#字符串哈希" class="headerlink" title="字符串哈希"></a><a href="https://www.luogu.org/problemnew/show/P3370">字符串哈希</a></h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> p = <span class="number">223</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod =<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,ans;</span><br><span class="line"><span class="type">int</span> hash[<span class="number">10010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gethash</span><span class="params">(<span class="type">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> len=<span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="type">int</span> h[<span class="number">2000</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        h[i]=(h[i<span class="number">-1</span>]*p+s[i])%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> h[len<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="type">char</span> s[<span class="number">2000</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">        hash[i]=<span class="built_in">gethash</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(hash+<span class="number">1</span>,hash+<span class="number">1</span>+n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(hash[i<span class="number">-1</span>]!=hash[i]) ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>模板题比较水，单哈希即可通过。</strong></p><p>具体题解我认为<a href="https://www.luogu.org/blog/36075/solution-p1360">题解第一篇</a>挺详细的，我就不再多说了了。</p><h1 id="P2843-暗杀"><a href="#P2843-暗杀" class="headerlink" title="P2843 暗杀"></a><a href="https://www.luogu.org/problemnew/show/P2843">P2843 暗杀</a></h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> mod = <span class="number">1000000000039</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span>  p = <span class="number">200003</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T f=<span class="number">1</span>;a=<span class="number">0</span>;<span class="type">char</span> s=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(s&lt;<span class="string">&#x27;0&#x27;</span>||s&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(s==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(s&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;s&gt;=<span class="string">&#x27;0&#x27;</span>)&#123;a=a*<span class="number">10</span>+s-<span class="string">&#x27;0&#x27;</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">a*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"><span class="type">int</span> have[<span class="number">100100</span>][<span class="number">35</span>],sum[<span class="number">100100</span>][<span class="number">35</span>],c[<span class="number">100100</span>][<span class="number">35</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> hash1[<span class="number">100100</span>],hash2[<span class="number">100100</span>];</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line">map&lt;ll,<span class="type">int</span>&gt; vis1,vis2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">gethash</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=<span class="number">1</span>;j&lt;=k;j++)</span><br><span class="line">&#123;</span><br><span class="line">hash1[i]=((hash1[i]+sum[i][j]-sum[i][<span class="number">1</span>])*p+mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//freopen(&quot;2.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="built_in">read</span>(n);</span><br><span class="line"><span class="built_in">read</span>(k);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>,a;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(a);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=<span class="number">0</span>;j&lt;k;j++)</span><br><span class="line">        sum[i][j+<span class="number">1</span>]=sum[i<span class="number">-1</span>][j+<span class="number">1</span>]+((a&gt;&gt;j)&amp;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">gethash</span>(i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(hash1[i]==<span class="number">0</span>) ans=<span class="built_in">max</span>(ans,i);</span><br><span class="line"><span class="keyword">if</span>(vis1[hash1[i]]) </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//if(vis1[hash1[i]]==vis2[hash2[i]])</span></span><br><span class="line">ans=<span class="built_in">max</span>(ans,i-vis1[hash1[i]]);</span><br><span class="line"><span class="comment">//else ans=max(ans,i-vis2[hash2[i]]);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!vis1[hash1[i]]&amp;&amp;hash1[i]!=<span class="number">0</span>) vis1[hash1[i]]=i;</span><br><span class="line"><span class="comment">//if(!vis2[hash2[i]]&amp;&amp;hash2[i]!=0) vis2[hash2[i]]=i;&amp;&amp;vis2[hash2[i]]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong><br>这道题的字符集大小非常大，需要开到2e5 !</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;哈希模板&quot;&gt;&lt;a href=&quot;#哈希模板&quot; class=&quot;headerlink&quot; title=&quot;哈希模板&quot;&gt;&lt;/a&gt;哈希模板&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; ll;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; ll &lt;span class=&quot;title&quot;&gt;gethash&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; *a)&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//a为你要哈希的数组（类型可以为char int） &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ll rt=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;register&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;a.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;();i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		rt=(rt+a[i])*p%mod;&lt;span class=&quot;comment&quot;&gt;//p为字符集大小，mod为模数； &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; rt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="hash" scheme="http://syrsteven.github.io/tags/hash/"/>
    
  </entry>
  
  <entry>
    <title>NOIp2017</title>
    <link href="http://syrsteven.github.io/post/3a5ac64a.html"/>
    <id>http://syrsteven.github.io/post/3a5ac64a.html</id>
    <published>2018-10-16T08:55:02.000Z</published>
    <updated>2023-09-01T20:06:21.713Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DAY1-T1"><a href="#DAY1-T1" class="headerlink" title="DAY1  T1"></a>DAY1  T1</h1><p><a href="https://www.luogu.org/problemnew/show/P3951#sub">P3951 小凯的疑惑</a></p><h3 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h3><ul><li>对于两个互质的数$a,b$,求最小不能用$x<em>a+y</em>b (x&gt;&#x3D;0,y&gt;&#x3D;0)$表示的数。</li></ul><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><ul><li><p>不妨设$a&lt;b$假设答案为$x$若</p></li><li><p>$x≡ma$  $mod(b)$  (1≤m≤b−1)</p></li><li><p>即</p></li><li><p>$x&#x3D;ma+nb$   (1≤m≤b−1)</p></li><li><p>显然当 $n≥0$ 时 $x$可以用 $a, b$表示出来，不合题意。</p></li><li><p>因此当n&#x3D;−1时$x$取得最大值，此时$x &#x3D; ma - b $。</p></li><li><p>显然当$m$取得最大值$b - 1$时$x$最大，此时$x &#x3D; (b - 1)a - b &#x3D; ab - a - b$</p></li><li><p>因此$ a, b $所表示不出的最大的数是$ab-a-b$</p></li></ul><span id="more"></span><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> x,y;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">    cout&lt;&lt;x*y-x-y&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="DAY1-T2"><a href="#DAY1-T2" class="headerlink" title="DAY1  T2"></a>DAY1  T2</h1><p><a href="https://www.luogu.org/problemnew/show/P3952">P3952 时间复杂度</a></p><p><strong>题目太长，请手动点击链接。。。。。。</strong></p><h3 id="题解：大大大大模拟，请看代码。"><a href="#题解：大大大大模拟，请看代码。" class="headerlink" title="题解：大大大大模拟，请看代码。"></a>题解：大大大大模拟，请看代码。</h3><h3 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> T,n;</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> opt,c;</span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line">&#125;fr[<span class="number">120</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> stf[<span class="number">500</span>],top1;</span><br><span class="line"><span class="type">bool</span> tag[<span class="number">500</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> s[<span class="number">100000</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d &quot;</span>,&amp;n);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s\n&quot;</span>,s);</span><br><span class="line"><span class="type">int</span> len=<span class="built_in">strlen</span>(s),w=<span class="number">0</span>,ww=<span class="number">0</span>,www=<span class="number">0</span>,wwww=<span class="number">0</span>,tp=<span class="number">0</span>;<span class="comment">//tp=1:Yes tp=2:No tp=3:ERR  w为读入的时间复杂度， </span></span><br><span class="line"><span class="type">bool</span> type=<span class="number">0</span>;<span class="comment">//type=0 o(1)  type=1  o(n^w)</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">&#x27;n&#x27;</span>) type=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(s[i]&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;s[i]&lt;=<span class="string">&#x27;9&#x27;</span>) w=w*<span class="number">10</span>+s[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//读入FOR循环 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;fr[i].opt);</span><br><span class="line"><span class="keyword">if</span>(fr[i].opt==<span class="string">&#x27;F&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="type">char</span> tmp;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c &quot;</span>,&amp;fr[i].c);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;tmp);</span><br><span class="line"><span class="keyword">if</span>(tmp==<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">fr[i].l=<span class="number">0x7ffff</span>;</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(tmp&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;tmp&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">fr[i].l=fr[i].l*<span class="number">10</span>+tmp-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">tmp=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;tmp);</span><br><span class="line"><span class="keyword">if</span>(tmp==<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">fr[i].r=<span class="number">0x7ffff</span>;</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(tmp&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;tmp&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">fr[i].r=fr[i].r*<span class="number">10</span>+tmp-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">tmp=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//模拟一个栈，读入F时入栈，E时弹出栈顶。 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(fr[i].opt==<span class="string">&#x27;F&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(top1!=<span class="number">0</span>&amp;&amp;www!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">wwww=<span class="built_in">max</span>(www,wwww);<span class="comment">//wwww记录这一个循环中小循环的最大时间复杂度 </span></span><br><span class="line">www=<span class="number">0</span>;<span class="comment">//记录这一个循环中的小循环的时间复杂度 </span></span><br><span class="line">tag[stf[top1]]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">stf[++top1]=i;</span><br><span class="line"><span class="keyword">if</span>(vis[fr[i].c-<span class="string">&#x27;a&#x27;</span>]) tp=<span class="number">3</span>;</span><br><span class="line">vis[fr[i].c-<span class="string">&#x27;a&#x27;</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!top1)</span><br><span class="line">&#123;</span><br><span class="line">tp=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tag[stf[top1]]==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">www=<span class="built_in">max</span>(www,wwww);</span><br><span class="line">wwww=<span class="number">0</span>;</span><br><span class="line">tag[stf[top1]]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(fr[stf[top1]].l&gt;fr[stf[top1]].r) www=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(fr[stf[top1]].l!=<span class="number">0x7ffff</span>&amp;&amp;fr[stf[top1]].r==<span class="number">0x7ffff</span>) www++;</span><br><span class="line">vis[fr[stf[top1]].c-<span class="string">&#x27;a&#x27;</span>]=<span class="number">0</span>;</span><br><span class="line">top1--;</span><br><span class="line"><span class="keyword">if</span>(top1==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ww=<span class="built_in">max</span>(ww,www);</span><br><span class="line">www=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(top1!=<span class="number">0</span>) tp=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span>(!tp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!type&amp;&amp;!ww) tp=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!type&amp;&amp;ww) tp=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(type&amp;&amp;ww==w) tp=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(type&amp;&amp;ww!=w) tp=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tp==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(tp==<span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(tp==<span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">&quot;ERR\n&quot;</span>);</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line"><span class="built_in">memset</span>(fr,<span class="number">0</span>,<span class="built_in">sizeof</span>(fr));</span><br><span class="line"><span class="built_in">memset</span>(stf,<span class="number">0</span>,<span class="built_in">sizeof</span>(stf));</span><br><span class="line">top1=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="DAY1-T3"><a href="#DAY1-T3" class="headerlink" title="DAY1 T3"></a>DAY1 T3</h1><p><a href="https://www.luogu.org/problemnew/show/P3953">P3953 逛公园</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意:"></a>题意:</h3><ul><li>求$dis(1,n)&lt;&#x3D;MinDis(1,n)+K$的路径数</li></ul><h3 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h3><ul><li>说实话我觉得这道题作为第三题还是很仁慈的。</li><li>对于没有零边的7组数据点，我们可以用$f[i][j]$表示从1到n比它们之间最短路大k的方案数，然后根据与1之间最短路的大小从小到大来dp。<br>这样你就可以拿到70分的好成绩。</li><li>然后我们来考虑有边长为零的边的情况，显然必须按照拓扑序来更新。那-1的情况呢？？我们只需将零边新建一个图，然后跑拓扑排序，找到一个零环，并且其中的点到1和n的最短路之和小于等于1到n的最短路+k;</li><li>根据思路我们要正反建图，跑两遍dijkstra和一遍拓扑排序，然后dp。</li><li>记得清空数组（多组数据。。）</li></ul><h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T f=<span class="number">1</span>;a=<span class="number">0</span>;<span class="type">char</span> s=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(s&lt;<span class="string">&#x27;0&#x27;</span>||s&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(s==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(s&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;s&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;a=a*<span class="number">10</span>+s-<span class="string">&#x27;0&#x27;</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">a*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ne,to,w;</span><br><span class="line">&#125;edge1[<span class="number">200100</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> head1[<span class="number">100100</span>],cnt1;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">edge1[++cnt1].to=v;</span><br><span class="line">edge1[cnt1].ne=head1[u];</span><br><span class="line">edge1[cnt1].w=w;</span><br><span class="line">head1[u]=cnt1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node edge2[<span class="number">200100</span>],edge3[<span class="number">200100</span>];</span><br><span class="line"><span class="type">int</span> head2[<span class="number">100100</span>],cnt2,head3[<span class="number">100100</span>],cnt3;</span><br><span class="line"><span class="type">int</span> in[<span class="number">100100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">edge2[++cnt2].to=v;</span><br><span class="line">edge2[cnt2].ne=head2[u];</span><br><span class="line">edge2[cnt2].w=w;</span><br><span class="line">head2[u]=cnt2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">edge3[++cnt3].to=v;</span><br><span class="line">edge3[cnt3].ne=head3[u];</span><br><span class="line">head3[u]=cnt3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line"><span class="type">int</span> n,m,K,p,id[<span class="number">100100</span>];</span><br><span class="line"><span class="type">int</span> vis[<span class="number">100100</span>],dis1[<span class="number">100100</span>],disn[<span class="number">100100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dijkstra</span><span class="params">(<span class="type">int</span> sta,<span class="type">int</span> *dis,<span class="type">int</span> *head,node *edge)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">priority_queue&lt;pair&lt;<span class="type">int</span> ,<span class="type">int</span>&gt;,vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt;,greater&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt; &gt; q;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">dis[sta]=<span class="number">0</span>;</span><br><span class="line">q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(dis[sta],sta));</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> u=q.<span class="built_in">top</span>().second;</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(vis[u]) <span class="keyword">continue</span>;</span><br><span class="line">vis[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=head[u];i;i=edge[i].ne)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v=edge[i].to,w=edge[i].w;</span><br><span class="line"><span class="keyword">if</span>(dis[u]+w&lt;dis[v])</span><br><span class="line">&#123;</span><br><span class="line">dis[v]=dis[u]+w;</span><br><span class="line"><span class="keyword">if</span>(!vis[v]) q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(dis[v],v));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> que[<span class="number">100100</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">toposort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> top=<span class="number">0</span>,end=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(!in[i]) que[++top]=i;</span><br><span class="line"><span class="keyword">while</span>(top&gt;=end)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> u=que[end++];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=head3[u];i;i=edge3[i].ne)</span><br><span class="line"><span class="keyword">if</span>(!(--in[edge3[i].to])) que[++top]=edge3[i].to;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) id[que[i]]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(in[i]&amp;&amp;dis1[i]+disn[i]&lt;=dis1[n]+K) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;<span class="keyword">return</span> dis1[a]==dis1[b]?id[a]&lt;id[b]:dis1[a]&lt;dis1[b];&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">clean</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head1,<span class="number">0</span>,<span class="built_in">sizeof</span>(head1));</span><br><span class="line"><span class="built_in">memset</span>(head2,<span class="number">0</span>,<span class="built_in">sizeof</span>(head2));</span><br><span class="line"><span class="built_in">memset</span>(head3,<span class="number">0</span>,<span class="built_in">sizeof</span>(head3));</span><br><span class="line"><span class="built_in">memset</span>(in,<span class="number">0</span>,<span class="built_in">sizeof</span>(in));</span><br><span class="line"><span class="built_in">memset</span>(id,<span class="number">0</span>,<span class="built_in">sizeof</span>(id));</span><br><span class="line"><span class="built_in">memset</span>(que,<span class="number">0</span>,<span class="built_in">sizeof</span>(que));</span><br><span class="line">cnt1=cnt2=cnt3=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> f[<span class="number">100100</span>][<span class="number">60</span>],cx[<span class="number">100100</span>],ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">read</span>(T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">clean</span>();</span><br><span class="line"><span class="built_in">read</span>(n),<span class="built_in">read</span>(m),<span class="built_in">read</span>(K),<span class="built_in">read</span>(p);</span><br><span class="line"><span class="type">int</span> u,v,w;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(u);<span class="built_in">read</span>(v);<span class="built_in">read</span>(w);</span><br><span class="line"><span class="built_in">add1</span>(u,v,w),<span class="built_in">add2</span>(v,u,w);</span><br><span class="line"><span class="keyword">if</span>(w==<span class="number">0</span>) <span class="built_in">add</span>(u,v),in[v]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(dis1,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dis1));</span><br><span class="line"><span class="built_in">memset</span>(disn,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(disn));</span><br><span class="line"><span class="built_in">dijkstra</span>(<span class="number">1</span>,dis1,head1,edge1);</span><br><span class="line"><span class="built_in">dijkstra</span>(n,disn,head2,edge2);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">toposort</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line">f[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cx[i]=i;</span><br><span class="line"><span class="built_in">sort</span>(cx+<span class="number">1</span>,cx+<span class="number">1</span>+n,cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> k=<span class="number">0</span>;k&lt;=K;k++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> u=cx[j],i=head1[u];i;i=edge1[i].ne)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> w=edge1[i].w,v=edge1[i].to;</span><br><span class="line"><span class="keyword">if</span>(w+dis1[u]-dis1[v]+k&lt;=K)</span><br><span class="line">f[v][w+dis1[u]-dis1[v]+k]+=f[u][k],f[v][w+dis1[u]-dis1[v]+k]%=p;</span><br><span class="line">&#125;</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;=K;i++) ans+=f[n][i],ans%=p;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>下面将粘一个记忆化搜索的代码，比起dp记忆化搜索简短了许多，也快了许多。我们只需反跑一边dijkstra，然后从1向n dfs。在dfs中记录每个状态是否重复出现，从而来判断-1的情况。</li></ul><h3 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T f=<span class="number">1</span>;a=<span class="number">0</span>;<span class="type">char</span> s=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(s&lt;<span class="string">&#x27;0&#x27;</span>||s&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(s==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(s&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;s&gt;=<span class="string">&#x27;0&#x27;</span>)&#123;a=a*<span class="number">10</span>+s-<span class="string">&#x27;0&#x27;</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">a*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ne,to,w;</span><br><span class="line">&#125;edge[<span class="number">400100</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> head1[<span class="number">100100</span>],head2[<span class="number">100100</span>],cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w,<span class="type">int</span> *head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">edge[++cnt].to=v;</span><br><span class="line">edge[cnt].w=w;</span><br><span class="line">edge[cnt].ne=head[u];</span><br><span class="line">head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> vis[<span class="number">100100</span>],disn[<span class="number">100100</span>],f[<span class="number">100100</span>][<span class="number">60</span>];</span><br><span class="line"><span class="type">bool</span> in[<span class="number">100100</span>][<span class="number">60</span>];<span class="type">int</span> T,n,m,p,K;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dijkstra</span><span class="params">(<span class="type">int</span> sta)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">priority_queue&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;,vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt;,greater&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt; &gt; q;</span><br><span class="line"><span class="built_in">memset</span>(disn,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(disn));</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(disn[sta]=<span class="number">0</span>,sta));</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> u=q.<span class="built_in">top</span>().second;</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(vis[u]) <span class="keyword">continue</span>;</span><br><span class="line">vis[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=head2[u];i;i=edge[i].ne)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v=edge[i].to,w=edge[i].w;</span><br><span class="line"><span class="keyword">if</span>(disn[u]+w&lt;disn[v])</span><br><span class="line">&#123;</span><br><span class="line">disn[v]=disn[u]+w;</span><br><span class="line"><span class="keyword">if</span>(!vis[v]) q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(disn[v],v));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(in[x][k])<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(f[x][k])<span class="keyword">return</span> f[x][k];</span><br><span class="line">in[x][k]=<span class="number">1</span>;x==n?f[x][k]=<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=head1[x];i;i=edge[i].ne)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v=edge[i].to,w=edge[i].w,tmp=disn[v]+w-disn[x];</span><br><span class="line"><span class="keyword">if</span>(tmp&lt;=k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ww=<span class="built_in">dfs</span>(v,k-tmp);</span><br><span class="line"><span class="keyword">if</span>(ww==<span class="number">-1</span>) <span class="keyword">return</span> f[x][k]=<span class="number">-1</span>;</span><br><span class="line">f[x][k]+=ww;</span><br><span class="line">f[x][k]%=p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">in[x][k]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> f[x][k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">clean</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line"><span class="built_in">memset</span>(in,<span class="number">0</span>,<span class="built_in">sizeof</span>(in));</span><br><span class="line"><span class="built_in">memset</span>(head1,<span class="number">0</span>,<span class="built_in">sizeof</span>(head1));</span><br><span class="line"><span class="built_in">memset</span>(head2,<span class="number">0</span>,<span class="built_in">sizeof</span>(head2));</span><br><span class="line">cnt=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">read</span>(T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">clean</span>();</span><br><span class="line"><span class="built_in">read</span>(n);<span class="built_in">read</span>(m);<span class="built_in">read</span>(K);<span class="built_in">read</span>(p);</span><br><span class="line"><span class="type">int</span> u,v,w;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line"><span class="built_in">read</span>(u),<span class="built_in">read</span>(v),<span class="built_in">read</span>(w),<span class="built_in">add</span>(u,v,w,head1),<span class="built_in">add</span>(v,u,w,head2);</span><br><span class="line"><span class="built_in">dijkstra</span>(n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">dfs</span>(<span class="number">1</span>,K));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="DAY2-T1"><a href="#DAY2-T1" class="headerlink" title="DAY2 T1"></a>DAY2 T1</h1><p><a href="https://www.luogu.org/problemnew/show/P3958">P3958 奶酪</a></p><h3 id="题意：-1"><a href="#题意：-1" class="headerlink" title="题意："></a>题意：</h3><ul><li>给定n点及其属性（需自己建图），问是否能从底走到顶。</li></ul><h3 id="题解：-2"><a href="#题解：-2" class="headerlink" title="题解："></a>题解：</h3><ul><li>按照题意建图，跑dfs就能A掉。</li><li>用并查集，能连边的就分在一个集合内，最后查询顶面和地面是不是在一个集合内。</li></ul><h3 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T f=<span class="number">1</span>;a=<span class="number">0</span>;<span class="type">char</span> s=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(s&lt;<span class="string">&#x27;0&#x27;</span>||s&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(s==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(s&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;s&gt;=<span class="string">&#x27;0&#x27;</span>)&#123;a=a*<span class="number">10</span>+s-<span class="string">&#x27;0&#x27;</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">a*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">ll x,y,z;</span><br><span class="line">&#125;cir[<span class="number">1100</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">no</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ne,to,w;</span><br><span class="line">&#125;edge[<span class="number">2002000</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> head[<span class="number">1100</span>],cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">edge[++cnt].to=v;</span><br><span class="line">edge[cnt].ne=head[u];</span><br><span class="line">head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> s,t;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">ll h,r;</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">1100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">double</span> x=<span class="built_in">abs</span>(cir[i].x-cir[j].x);</span><br><span class="line"><span class="type">double</span> y=<span class="built_in">abs</span>(cir[i].y-cir[j].y);</span><br><span class="line"><span class="type">double</span> z=<span class="built_in">abs</span>(cir[i].z-cir[j].z);</span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">sqrt</span>(x*x+y*y+z*z)&lt;=(<span class="type">double</span>)<span class="number">2</span>*r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> sta)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vis[sta]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(sta==t) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=head[sta];i;i=edge[i].ne)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v=edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(vis[v]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">clean</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">0</span>,<span class="built_in">sizeof</span>(head));</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line"><span class="built_in">memset</span>(cir,<span class="number">0</span>,<span class="built_in">sizeof</span>(cir));</span><br><span class="line">cnt=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">read</span>(T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">clean</span>();</span><br><span class="line"><span class="built_in">read</span>(n),<span class="built_in">read</span>(h),<span class="built_in">read</span>(r);</span><br><span class="line">s=n+<span class="number">1</span>,t=n+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(cir[i].x),<span class="built_in">read</span>(cir[i].y),<span class="built_in">read</span>(cir[i].z);</span><br><span class="line"><span class="keyword">if</span>(cir[i].z&lt;=r) <span class="built_in">add</span>(s,i),<span class="built_in">add</span>(i,s);</span><br><span class="line"><span class="keyword">if</span>(cir[i].z+r&gt;=h) <span class="built_in">add</span>(t,i),<span class="built_in">add</span>(i,t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(i,j)) <span class="built_in">add</span>(i,j),<span class="built_in">add</span>(j,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(s);</span><br><span class="line"><span class="keyword">if</span>(vis[t]) <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>并查集</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> x,y,h;</span><br><span class="line">&#125;chess[<span class="number">21</span>][<span class="number">1001</span>];</span><br><span class="line"><span class="type">int</span> fa[<span class="number">10001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getfa</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x==fa[x])?x:fa[x]=<span class="built_in">getfa</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.h&lt;b.h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">getdis</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> k,<span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> x=<span class="built_in">abs</span>(chess[j][i].x-chess[j][k].x);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> y=<span class="built_in">abs</span>(chess[j][i].y-chess[j][k].y);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> h=<span class="built_in">abs</span>(chess[j][i].h-chess[j][k].h);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(x*x+y*y+h*h);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=T;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">bool</span> tag=<span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> h,r;</span><br><span class="line">        <span class="type">int</span> n,s=<span class="number">0</span>,t;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %lld %lld&quot;</span>,&amp;n,&amp;h,&amp;r);</span><br><span class="line">        t=n+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld %lld&quot;</span>,&amp;chess[j][i].x,&amp;chess[j][i].y,&amp;chess[j][i].h),fa[i]=i;</span><br><span class="line">        fa[t]=t;</span><br><span class="line">        <span class="built_in">sort</span>(chess[j]+<span class="number">1</span>,chess[j]+<span class="number">1</span>+n,cmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(chess[j][i].h&lt;=r) fa[i]=s;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=i+<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">getdis</span>(i,k,j)&lt;=(<span class="type">long</span> <span class="type">double</span>)<span class="number">2</span>*r)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="type">int</span> f1=<span class="built_in">getfa</span>(k);</span><br><span class="line">                    <span class="type">int</span> f2=<span class="built_in">getfa</span>(i);</span><br><span class="line">                    <span class="keyword">if</span>(f1&gt;f2) fa[f1]=f2;</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(chess[j][i].h+r&gt;=h) fa[t]=<span class="built_in">getfa</span>(i);</span><br><span class="line">            <span class="keyword">if</span>(fa[t]==s)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">                tag=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!tag) <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="DAY2-T2"><a href="#DAY2-T2" class="headerlink" title="DAY2 T2"></a>DAY2 T2</h1><p><a href="https://www.luogu.org/problemnew/show/P3959">P3959 宝藏</a></p><h3 id="题意：-2"><a href="#题意：-2" class="headerlink" title="题意："></a>题意：</h3><ul><li>有n个点，m条边，可从任意一个点出发，连一条边的代价是这条边的长度乘上从起点到这条边的始点所经过的点数，求最小代价。</li></ul><h3 id="题解：-3"><a href="#题解：-3" class="headerlink" title="题解："></a>题解：</h3><ul><li><p>其实dfs就能拿到一个好分数（60分,如果你还会一些神奇卡常，你就会得到AC的好成绩。但是蒟蒻我并不会。。。。请找这位<a href="https://www.luogu.org/blog/user54022/solution-p3959">巨佬</a> </p></li><li><p>接下来讲记忆化搜索，f[i]表示状态i的最优解,dep[i]表示当前点与起点之间的距离，然后就和dfs很像了。</p></li></ul><h3 id="代码：-4"><a href="#代码：-4" class="headerlink" title="代码："></a>代码：</h3><h4 id="dfs-70分"><a href="#dfs-70分" class="headerlink" title="dfs(70分)"></a>dfs(70分)</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T f=<span class="number">1</span>;a=<span class="number">0</span>;<span class="type">char</span> s=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(s&lt;<span class="string">&#x27;0&#x27;</span>||s&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(s==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(s&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;s&gt;=<span class="string">&#x27;0&#x27;</span>)&#123;a=a*<span class="number">10</span>+s-<span class="string">&#x27;0&#x27;</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    a*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll dis[<span class="number">20</span>][<span class="number">20</span>],ans;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; ve[<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> vis[<span class="number">20</span>],dep[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">minn</span><span class="params">(ll a,ll b)</span></span>&#123;<span class="keyword">return</span> a&lt;b?a:b;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(ll sum,<span class="type">int</span> cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cnt==n)</span><br><span class="line">    &#123;</span><br><span class="line">        ans=<span class="built_in">minn</span>(sum,ans);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans&lt;sum) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=<span class="number">0</span>;j&lt;ve[i].<span class="built_in">size</span>();++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(vis[ve[i][j]]) <span class="keyword">continue</span>;</span><br><span class="line">                vis[ve[i][j]]=<span class="number">1</span>;</span><br><span class="line">                dep[ve[i][j]]=dep[i]+<span class="number">1</span>;</span><br><span class="line">                <span class="built_in">dfs</span>(sum+dep[i]*dis[i][ve[i][j]],cnt+<span class="number">1</span>);</span><br><span class="line">                dep[ve[i][j]]=<span class="number">0</span>;</span><br><span class="line">                vis[ve[i][j]]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> tmpc;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;<span class="keyword">return</span> dis[tmpc][a]&lt;dis[tmpc][b];&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n),<span class="built_in">read</span>(m);</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dis));</span><br><span class="line">    ans=<span class="number">0x7fffffff</span>;</span><br><span class="line">    <span class="type">int</span> u,v;ll w;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(u),<span class="built_in">read</span>(v),<span class="built_in">read</span>(w);</span><br><span class="line">        <span class="keyword">if</span>(dis[u][v]==<span class="number">0x3f3f3f3f3f3f3f3f</span>) </span><br><span class="line">        ve[u].<span class="built_in">push_back</span>(v),ve[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">        dis[u][v]=<span class="built_in">minn</span>(dis[u][v],w);</span><br><span class="line">        dis[v][u]=dis[u][v];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmpc=i;</span><br><span class="line">        <span class="built_in">sort</span>(ve[i].<span class="built_in">begin</span>(),ve[i].<span class="built_in">end</span>(),cmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        vis[i]=<span class="number">1</span>;</span><br><span class="line">        dep[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">        dep[i]=<span class="number">0</span>;</span><br><span class="line">        vis[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="记忆化搜索（100分）"><a href="#记忆化搜索（100分）" class="headerlink" title="记忆化搜索（100分）"></a>记忆化搜索（100分）</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> inf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T f=<span class="number">1</span>;a=<span class="number">0</span>;<span class="type">char</span> s=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(s&lt;<span class="string">&#x27;0&#x27;</span>||s&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(s==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(s&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;s&gt;=<span class="string">&#x27;0&#x27;</span>)&#123;a=a*<span class="number">10</span>+s-<span class="string">&#x27;0&#x27;</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">a*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; ve[<span class="number">20</span>];</span><br><span class="line">ll dis[<span class="number">20</span>][<span class="number">20</span>],f[<span class="number">10000</span>],ans,dep[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">minn</span><span class="params">(ll a,ll b)</span></span>&#123;<span class="keyword">return</span> a&lt;b?a:b;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(num&amp;(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>)))</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=<span class="number">0</span>;j&lt;ve[i].<span class="built_in">size</span>();j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v=ve[i][j];</span><br><span class="line"><span class="keyword">if</span>(!(num&amp;(<span class="number">1</span>&lt;&lt;(v<span class="number">-1</span>))))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(f[num|<span class="number">1</span>&lt;&lt;(v<span class="number">-1</span>)]&gt;f[num]+dep[i]*dis[i][v])</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> tmp=dep[v];</span><br><span class="line">f[num|<span class="number">1</span>&lt;&lt;(v<span class="number">-1</span>)]=f[num]+dep[i]*dis[i][v];</span><br><span class="line">dep[v]=dep[i]+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(num|<span class="number">1</span>&lt;&lt;(v<span class="number">-1</span>));</span><br><span class="line">dep[v]=tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tmpc;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;<span class="keyword">return</span> dis[tmpc][a]&lt;dis[tmpc][b];&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">read</span>(n),<span class="built_in">read</span>(m);</span><br><span class="line"><span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dis));</span><br><span class="line">ans=inf;</span><br><span class="line"><span class="type">int</span> u,v;ll w;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(u),<span class="built_in">read</span>(v),<span class="built_in">read</span>(w);</span><br><span class="line"><span class="keyword">if</span>(dis[u][v]==inf)</span><br><span class="line">ve[u].<span class="built_in">push_back</span>(v),ve[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">dis[u][v]=<span class="built_in">minn</span>(dis[u][v],w);</span><br><span class="line">dis[v][u]=dis[u][v];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">tmpc=i;</span><br><span class="line"><span class="built_in">sort</span>(ve[i].<span class="built_in">begin</span>(),ve[i].<span class="built_in">end</span>(),cmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++) dep[j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=<span class="number">1</span>;j&lt;=(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>;j++) f[j]=inf;</span><br><span class="line">dep[i]=<span class="number">1</span>;</span><br><span class="line">f[<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>)]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>));</span><br><span class="line">ans=<span class="built_in">minn</span>(ans,f[(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;DAY1-T1&quot;&gt;&lt;a href=&quot;#DAY1-T1&quot; class=&quot;headerlink&quot; title=&quot;DAY1  T1&quot;&gt;&lt;/a&gt;DAY1  T1&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P3951#sub&quot;&gt;P3951 小凯的疑惑&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意：&quot;&gt;&lt;a href=&quot;#题意：&quot; class=&quot;headerlink&quot; title=&quot;题意：&quot;&gt;&lt;/a&gt;题意：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;对于两个互质的数$a,b$,求最小不能用$x&lt;em&gt;a+y&lt;/em&gt;b (x&amp;gt;&amp;#x3D;0,y&amp;gt;&amp;#x3D;0)$表示的数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;题解：&quot;&gt;&lt;a href=&quot;#题解：&quot; class=&quot;headerlink&quot; title=&quot;题解：&quot;&gt;&lt;/a&gt;题解：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;不妨设$a&amp;lt;b$假设答案为$x$若&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;$x≡ma$  $mod(b)$  (1≤m≤b−1)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;即&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;$x&amp;#x3D;ma+nb$   (1≤m≤b−1)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;显然当 $n≥0$ 时 $x$可以用 $a, b$表示出来，不合题意。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;因此当n&amp;#x3D;−1时$x$取得最大值，此时$x &amp;#x3D; ma - b $。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;显然当$m$取得最大值$b - 1$时$x$最大，此时$x &amp;#x3D; (b - 1)a - b &amp;#x3D; ab - a - b$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;因此$ a, b $所表示不出的最大的数是$ab-a-b$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="NOIp" scheme="http://syrsteven.github.io/tags/NOIp/"/>
    
  </entry>
  
  <entry>
    <title>树状数组总结</title>
    <link href="http://syrsteven.github.io/post/30ce1405.html"/>
    <id>http://syrsteven.github.io/post/30ce1405.html</id>
    <published>2018-10-10T04:02:25.000Z</published>
    <updated>2023-09-01T20:06:21.719Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面：关于树状数组"><a href="#写在前面：关于树状数组" class="headerlink" title="写在前面：关于树状数组"></a>写在前面：关于树状数组</h1><pre><code>首先，要灵活运用树状数组，必须要弄懂lowbit.lowbit 计算的是一个数二进制的最低位。lowbit(x)=x&amp;-x;这是为什么呢???对于一个正数5，它的二进制为00000000 00000000 00000000 00000101 （longlong范围内）它的负数的原码为 10000000 00000000 00000000 00000101 （在第64位+1）（二进制的64位为符号位，0为正数，1为负数）负数的二进制为它的原码的补码（除符号位按位取反后+1）也就是11111111 11111111 11111111 11111011所以x&amp;-x就是x的最低位</code></pre><p>插一幅图<img src="http://image.mamicode.com/info/201803/20180328233624383726.png"></p><span id="more"></span><p><strong>1.lowbit(x)为x的最低位</strong></p><p><strong>2.tr[x]存的是x及以前的lowbit(x)-1位的值的和</strong></p><p><strong>3.lowbit(x)还可表示tr[x]所维护的区间长度</strong></p><h1 id="一-一维树状数组"><a href="#一-一维树状数组" class="headerlink" title="一.      一维树状数组"></a>一.      一维树状数组</h1><h2 id="1、最简单的单点修改-区间查询"><a href="#1、最简单的单点修改-区间查询" class="headerlink" title="1、最简单的单点修改+区间查询"></a>1、最简单的单点修改+区间查询</h2><h4 id="直接上代码。。。"><a href="#直接上代码。。。" class="headerlink" title="直接上代码。。。"></a>直接上代码。。。</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=x;i&lt;=n;i+=<span class="built_in">lowbit</span>(i))</span><br><span class="line">    tr[i]+=v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">qurey</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> rt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=x;i;i-=<span class="built_in">lowbit</span>(i))</span><br><span class="line">    rt+=tr[i];</span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、-稍微难一点点的区间修改-单点查询"><a href="#2、-稍微难一点点的区间修改-单点查询" class="headerlink" title="2、 稍微难一点点的区间修改+单点查询"></a>2、 稍微难一点点的区间修改+单点查询</h2><h4 id="这里运用了差分和前缀和的思想。"><a href="#这里运用了差分和前缀和的思想。" class="headerlink" title="这里运用了差分和前缀和的思想。"></a>这里运用了差分和前缀和的思想。</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=x;i&lt;=n;i+=<span class="built_in">lowbit</span>(i))</span><br><span class="line">    tr[i]+=v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">qurey</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">//单点查询 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> rt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=x;i;i-=<span class="built_in">lowbit</span>(i))</span><br><span class="line">    rt+=tr[i];</span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> v)</span><span class="comment">//区间修改 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">add</span>(l,v);<span class="built_in">add</span>(r+<span class="number">1</span>,-v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-难一点的区间修改-区间查询"><a href="#3-难一点的区间修改-区间查询" class="headerlink" title="3.难一点的区间修改 + 区间查询"></a>3.难一点的区间修改 + 区间查询</h2><pre><code>(d[i]为差分数组)我们基于问题2的“差分”思路，考虑一下如何在问题2构建的树状数组中求前缀和：位置p的前缀和</code></pre><p><img src="https://cdn.luogu.org/upload/pic/37284.png"></p><pre><code>可变为</code></pre><p><img src="https://cdn.luogu.org/upload/pic/37288.png"></p><pre><code>那么我们可以维护两个数组的前缀和：一个数组是 d1[i](d[i]的前缀和)。另一个数组是 d2[i](d[i]∗i的前缀和)。</code></pre><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><pre><code>位置p的前缀和即： (p + 1) * d1数组中p的前缀和 - d2数组中p的前缀和。区间[l, r]的和即：位置r的前缀和 - 位置l-1的前缀和。</code></pre><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><pre><code>对于d1数组的修改同单点修改。对于d2数组的修改也类似，我们给 d2[l] 加上 l * x，给 d2[r + 1] 减去 (r + 1) * x。解释：修改操作是由查询操作推得的，对于位置l它需要加上一个x，d1已经加上了一个x，d1*(l+1)后需要再减去l*x，所以在位置l加上l*x，后面依次类推。</code></pre><h4 id="上代码："><a href="#上代码：" class="headerlink" title="上代码："></a>上代码：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T f=<span class="number">1</span>;a=<span class="number">0</span>;<span class="type">char</span> s=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(s&lt;<span class="string">&#x27;0&#x27;</span>||s&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(s==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(s&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;s&gt;=<span class="string">&#x27;0&#x27;</span>)&#123;a=a*<span class="number">10</span>+s-<span class="string">&#x27;0&#x27;</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    a*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll d1[<span class="number">100100</span>],d2[<span class="number">100100</span>],a[<span class="number">100100</span>];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,ll v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=x;i&lt;=n;i+=<span class="built_in">lowbit</span>(i))</span><br><span class="line">    d1[i]+=v,d2[i]+=(ll)v*x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">range_add</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,ll v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">add</span>(l,v),<span class="built_in">add</span>(r+<span class="number">1</span>,-v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">ask</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll rt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=p;i;i-=<span class="built_in">lowbit</span>(i)) </span><br><span class="line">rt+=(ll)(p+<span class="number">1</span>)*d1[i]-d2[i];</span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">ask</span>(r)-<span class="built_in">ask</span>(l<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n),<span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">read</span>(a[i]),<span class="built_in">add</span>(i,a[i]-a[i<span class="number">-1</span>]);</span><br><span class="line">    <span class="type">int</span> opt,x,y;</span><br><span class="line">    ll k;</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(opt),<span class="built_in">read</span>(x),<span class="built_in">read</span>(y);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">read</span>(k);</span><br><span class="line">            <span class="built_in">range_add</span>(x,y,k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">query</span>(x,y));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>附一模板题</strong>:<a href="https://www.luogu.org/problemnew/show/P3372">P3372 【模板】线段树 1</a></p><h2 id="4-区间最值"><a href="#4-区间最值" class="headerlink" title="4.区间最值"></a>4.区间最值</h2><p><strong>说明:tr[x]表示的是x-lowbit(x)到 x 的区间最值。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T f=<span class="number">1</span>;a=<span class="number">0</span>;<span class="type">char</span> s=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(s&lt;<span class="string">&#x27;0&#x27;</span>||s&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(s==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(s&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;s&gt;=<span class="string">&#x27;0&#x27;</span>)&#123;a=a*<span class="number">10</span>+s-<span class="string">&#x27;0&#x27;</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">a*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">ll tr[<span class="number">100100</span>],a[<span class="number">100100</span>]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">tr[i]=a[i];</span><br><span class="line"><span class="type">int</span> tmp=(i&amp;-i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=<span class="number">1</span>;j&lt;tmp;j&lt;&lt;=<span class="number">1</span>) tr[i]=<span class="built_in">max</span>(tr[i],tr[i-j]);<span class="comment">//更新tr[i]的值； </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,ll v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a[x]=v;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=n)</span><br><span class="line">&#123;</span><br><span class="line">tr[x]=a[x];</span><br><span class="line"><span class="type">int</span> tmp=x&amp;-x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=<span class="number">1</span>;j&lt;tmp;j&lt;&lt;=<span class="number">1</span>) tr[x]=<span class="built_in">max</span>(tr[x],tr[x-j]);<span class="comment">//tr[x]表示的是x-lowbit(x)到 x 的区间最值。 </span></span><br><span class="line">x+=(x&amp;-x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll ans=a[r];</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans=<span class="built_in">max</span>(ans,a[r]);</span><br><span class="line"><span class="keyword">if</span>(r==l) <span class="keyword">break</span>;r--;</span><br><span class="line"><span class="keyword">while</span>(r-l&gt;=(r&amp;-r)) ans=<span class="built_in">max</span>(ans,tr[r]),r-=(r&amp;-r);<span class="comment">//(r&amp;-r)为tr[r]维护的区间最值，当 r-l&gt;=(r&amp;-r)时可直接转移。 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">read</span>(n),<span class="built_in">read</span>(m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">read</span>(a[i]);</span><br><span class="line"><span class="built_in">build</span>();</span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(l),<span class="built_in">read</span>(r);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">query</span>(l,r));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二-二维树状数组"><a href="#二-二维树状数组" class="headerlink" title="二.      二维树状数组"></a>二.      二维树状数组</h1><h2 id="1、单点修改-区间查询"><a href="#1、单点修改-区间查询" class="headerlink" title="1、单点修改+区间查询"></a>1、单点修改+区间查询</h2><pre><code>其实多了一维并没有想象中的那么难，我们可以开两颗树状数组，一颗维护一维的值，另一颗维护前一颗树状数组的值。可以开一个二维数组，tr[x][y]表示从（1,1）到（x，y）的区间和。不多说上代码</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T f=<span class="number">1</span>;a=<span class="number">0</span>;<span class="type">char</span> s=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(s&lt;<span class="string">&#x27;0&#x27;</span>||s&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(s==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(s&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;s&gt;=<span class="string">&#x27;0&#x27;</span>)&#123;a=a*<span class="number">10</span>+s-<span class="string">&#x27;0&#x27;</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">a*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll tr[<span class="number">1030</span>][<span class="number">1030</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> (x&amp;-x);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,ll v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> tmp=y;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=n)</span><br><span class="line">&#123;</span><br><span class="line">y=tmp;</span><br><span class="line"><span class="keyword">while</span>(y&lt;=n) tr[x][y]+=v,y+=<span class="built_in">lowbit</span>(y);</span><br><span class="line">x+=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">range_sum</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll rt=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> tmp=y;</span><br><span class="line"><span class="keyword">while</span>(x)</span><br><span class="line">&#123;</span><br><span class="line">y=tmp;</span><br><span class="line"><span class="keyword">while</span>(y) rt+=tr[x][y],y-=<span class="built_in">lowbit</span>(y);</span><br><span class="line">x-=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> x1,<span class="type">int</span> y1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">range_sum</span>(x1,y1)-<span class="built_in">range_sum</span>(x1,y<span class="number">-1</span>)-<span class="built_in">range_sum</span>(x<span class="number">-1</span>,y1)+<span class="built_in">range_sum</span>(x<span class="number">-1</span>,y<span class="number">-1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> opt,x,y,a,x1,y1;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;opt))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">3</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">0</span>) <span class="built_in">read</span>(n);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>) <span class="built_in">read</span>(x),<span class="built_in">read</span>(y),<span class="built_in">read</span>(a),<span class="built_in">add</span>(++x,++y,a);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">2</span>) <span class="built_in">read</span>(x),<span class="built_in">read</span>(y),<span class="built_in">read</span>(x1),<span class="built_in">read</span>(y1),<span class="built_in">query</span>(++x,++y,++x1,++y1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目：<a href="http://poj.org/problem?id=1195">POJ 1195</a></p><h2 id="2、区间修改-单点查询"><a href="#2、区间修改-单点查询" class="headerlink" title="2、区间修改+单点查询"></a>2、区间修改+单点查询</h2><pre><code>对与区间修改单点查询，我们还沿用一维的套路——差分。由二维前缀和：sum[i][j]=sum[i-1][j]+sum[i][j-1]-sum[i-1][j-1]+a[i][j]可推的。d[i][j](二维差分数组)=a[i][j]-a[i-1][j]-sum[i][j-1]+a[i-1][j-1]</code></pre><p>来一道题目：<a href="http://poj.org/problem?id=2155">POJ2155Matrix</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) x&amp;-x</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T f=<span class="number">1</span>;a=<span class="number">0</span>;<span class="type">char</span> s=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(s&lt;<span class="string">&#x27;0&#x27;</span>||s&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(s==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(s&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;s&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;a=a*<span class="number">10</span>+s-<span class="string">&#x27;0&#x27;</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">a*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> T,n,m;</span><br><span class="line"><span class="type">int</span> tr[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=x;i&lt;=n;i+=<span class="built_in">lowbit</span>(i))</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=y;j&lt;=n;j+=<span class="built_in">lowbit</span>(j))</span><br><span class="line">tr[i][j]+=v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> rt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=x;i;i-=<span class="built_in">lowbit</span>(i))</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=y;j;j-=<span class="built_in">lowbit</span>(j))</span><br><span class="line">rt+=tr[i][j];</span><br><span class="line"><span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">read</span>(T);</span><br><span class="line"><span class="type">char</span> s;</span><br><span class="line"><span class="type">int</span> x1,y1,x2,y2;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(n),<span class="built_in">read</span>(m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;s);</span><br><span class="line"><span class="keyword">if</span>(s==<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(x1),<span class="built_in">read</span>(y1),<span class="built_in">read</span>(x2),<span class="built_in">read</span>(y2);</span><br><span class="line"><span class="built_in">add</span>(x1,y1,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">add</span>(x1,y2+<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">add</span>(x2+<span class="number">1</span>,y2+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">add</span>(x2+<span class="number">1</span>,y1,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s==<span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(x1),<span class="built_in">read</span>(y1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">query</span>(x1,y1)&amp;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(tr,<span class="number">0</span>,<span class="built_in">sizeof</span>(tr));</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-区间修改-区间查询"><a href="#3-区间修改-区间查询" class="headerlink" title="3.区间修改+区间查询"></a>3.区间修改+区间查询</h2><pre><code>(d[i][j]为差分数组)</code></pre><p>$$ sum[i][j]&#x3D;\sum_{x&#x3D;1}^{i}\sum_{y&#x3D;1}^{j}\sum_{a&#x3D;1}^{x}\sum_{b&#x3D;1}^{y}d[a][b] $$</p><p>整理可得：</p><p>$$ sum[i][j]&#x3D;\sum_{x&#x3D;1}^{i}\sum_{y&#x3D;1}^{j}d[x][y]<em>(i+1-x)</em>(j+1-y) $$</p><p>$$ sum[i][j]&#x3D;(i+1)*(j+1)\sum_{x&#x3D;1}^{i}\sum_{y&#x3D;1}^{j}d[x][y]-(i+1)\sum_{x&#x3D;1}^{i}\sum_{y&#x3D;1}^{j}d[x][y]*y-(j+1)\sum_{x&#x3D;1}^{i}\sum_{y&#x3D;1}^{j}d[x][y]*x+\sum_{x&#x3D;1}^{i}\sum_{y&#x3D;1}^{j}d[x][y]<em>x</em>y$$</p><p>由上式可的我们须用四个树状数组分别记录d[i][j]*i,d[i][j]*j,d[i][j]<em>i</em>j,和d[i][j]。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) x&amp;-x</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T f=<span class="number">1</span>;a=<span class="number">0</span>;<span class="type">char</span> s=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(s&lt;<span class="string">&#x27;0&#x27;</span>||s&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(s==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(s&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;s&gt;=<span class="string">&#x27;0&#x27;</span>)&#123;a=a*<span class="number">10</span>+s-<span class="string">&#x27;0&#x27;</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">a*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> d1[<span class="number">1010</span>][<span class="number">1010</span>],d2[<span class="number">1010</span>][<span class="number">1010</span>],d3[<span class="number">1000</span>][<span class="number">1010</span>],d4[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=x;i&lt;=n;i+=<span class="built_in">lowbit</span>(i))</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=y;j&lt;=m;j+=<span class="built_in">lowbit</span>(j))</span><br><span class="line">&#123;</span><br><span class="line">d1[i][j]+=v;</span><br><span class="line">d2[i][j]+=y*v;</span><br><span class="line">d3[i][j]+=x*v;</span><br><span class="line">d4[i][j]+=x*y*v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=x;i;i-=<span class="built_in">lowbit</span>(i))</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=y;j;j-=<span class="built_in">lowbit</span>(j))</span><br><span class="line">&#123;</span><br><span class="line">ans+=(x+<span class="number">1</span>)*(y+<span class="number">1</span>)*d1[i][j]-(x+<span class="number">1</span>)*d2[i][j]-(y+<span class="number">1</span>)*d3[i][j]+d4[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">matrix_ask</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> x1,<span class="type">int</span> y1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">query</span>(x1,y1)-<span class="built_in">query</span>(x1,y<span class="number">-1</span>)-<span class="built_in">query</span>(x<span class="number">-1</span>,y1)+<span class="built_in">query</span>(x<span class="number">-1</span>,y<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> s;</span><br><span class="line"><span class="type">int</span> a,b,c,d,v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;s);</span><br><span class="line"><span class="keyword">if</span>(s==<span class="string">&#x27;X&#x27;</span>) <span class="built_in">read</span>(n),<span class="built_in">read</span>(m);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;s)&amp;&amp;((s==<span class="string">&#x27;L&#x27;</span>)||(s==<span class="string">&#x27;k&#x27;</span>)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s==<span class="string">&#x27;L&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(a),<span class="built_in">read</span>(b),<span class="built_in">read</span>(c),<span class="built_in">read</span>(d),<span class="built_in">read</span>(v);</span><br><span class="line"><span class="built_in">add</span>(a,b,v);</span><br><span class="line"><span class="built_in">add</span>(c+<span class="number">1</span>,d+<span class="number">1</span>,v);</span><br><span class="line"><span class="built_in">add</span>(a,d+<span class="number">1</span>,-v);</span><br><span class="line"><span class="built_in">add</span>(c+<span class="number">1</span>,b,-v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(s==<span class="string">&#x27;k&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(a),<span class="built_in">read</span>(b),<span class="built_in">read</span>(c),<span class="built_in">read</span>(d);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">matrix_ask</span>(a,b,c,d));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;写在前面：关于树状数组&quot;&gt;&lt;a href=&quot;#写在前面：关于树状数组&quot; class=&quot;headerlink&quot; title=&quot;写在前面：关于树状数组&quot;&gt;&lt;/a&gt;写在前面：关于树状数组&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;首先，要灵活运用树状数组，必须要弄懂lowbit.
lowbit 计算的是一个数二进制的最低位。
lowbit(x)=x&amp;amp;-x;
这是为什么呢???
对于一个正数5，它的二进制为00000000 00000000 00000000 00000101 （longlong范围内）
它的负数的原码为 10000000 00000000 00000000 00000101 （在第64位+1）
（二进制的64位为符号位，0为正数，1为负数）
负数的二进制为它的原码的补码（除符号位按位取反后+1）
也就是11111111 11111111 11111111 11111011
所以x&amp;amp;-x就是x的最低位
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;插一幅图&lt;img src=&quot;http://image.mamicode.com/info/201803/20180328233624383726.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="BIT" scheme="http://syrsteven.github.io/tags/BIT/"/>
    
  </entry>
  
  <entry>
    <title>搜索专题</title>
    <link href="http://syrsteven.github.io/post/c4637555.html"/>
    <id>http://syrsteven.github.io/post/c4637555.html</id>
    <published>2018-08-21T06:50:11.000Z</published>
    <updated>2023-09-01T20:06:21.719Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搜索专题"><a href="#搜索专题" class="headerlink" title="搜索专题"></a>搜索专题</h1><h2 id="一-DFS"><a href="#一-DFS" class="headerlink" title="一.DFS"></a>一.DFS</h2><h3 id="1-递归"><a href="#1-递归" class="headerlink" title="1.递归"></a>1.递归</h3><h5 id="小练手"><a href="#小练手" class="headerlink" title="小练手"></a>小练手</h5><hr><p>**<br>输出1到n的所有排列，要求按照字典序从到<br>输出。** </p><p>输入</p><p>3</p><p>输出</p><p>123<br>132<br>213<br>231<br>312<br>321</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span>  std;</span><br><span class="line"><span class="type">int</span> n,vis[<span class="number">10000000</span>],b[<span class="number">10000000</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">qpl</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> tmp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tmp==n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">cout&lt;&lt;b[j]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])</span><br><span class="line">&#123;</span><br><span class="line">vis[i]=<span class="number">1</span>;</span><br><span class="line">b[a]=i;</span><br><span class="line"><span class="built_in">qpl</span>(a+<span class="number">1</span>,tmp+<span class="number">1</span>);</span><br><span class="line">vis[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="built_in">qpl</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><span id="more"></span><h3 id="2-深度优先搜索"><a href="#2-深度优先搜索" class="headerlink" title="2.深度优先搜索"></a>2.深度优先搜索</h3><h5 id="小练手-1"><a href="#小练手-1" class="headerlink" title="小练手"></a>小练手</h5><hr><p>给定一个n行m列的迷宫，0代表障碍物，1代<br>表可以行走的区域。<br>每次可以朝着上下左右4个方向移动<br>起点在迷宫的左上⻆，终点在迷宫的右下⻆，问是否存在一条路径从起点到终点。</p><p>输入</p><p>36<br>100100<br>110111<br>011101<br>000011</p><p>输出</p><p>YES</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">char</span> a[<span class="number">10000</span>][<span class="number">10000</span>];</span><br><span class="line"><span class="type">int</span> vis[<span class="number">10000</span>][<span class="number">10000</span>],ans;</span><br><span class="line"><span class="type">int</span> tmp[<span class="number">5</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==m&amp;&amp;y==n)</span><br><span class="line">&#123;</span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(x+tmp[i][<span class="number">0</span>]&gt;<span class="number">0</span>&amp;&amp;x+tmp[i][<span class="number">0</span>]&lt;=m&amp;&amp;y+tmp[i][<span class="number">1</span>]&gt;<span class="number">0</span>&amp;&amp;y+tmp[i][<span class="number">1</span>]&lt;=n)</span><br><span class="line"><span class="keyword">if</span>(!vis[x+tmp[i][<span class="number">0</span>]][y+tmp[i][<span class="number">1</span>]]&amp;&amp;a[x+tmp[i][<span class="number">0</span>]][y+tmp[i][<span class="number">1</span>]]==<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">vis[x+tmp[i][<span class="number">0</span>]][y+tmp[i][<span class="number">1</span>]]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(x+tmp[i][<span class="number">0</span>],y+tmp[i][<span class="number">1</span>]);</span><br><span class="line">vis[x+tmp[i][<span class="number">0</span>]][y+tmp[i][<span class="number">1</span>]]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;m,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a[i]+<span class="number">1</span>);</span><br><span class="line">vis[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(ans&gt;=<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><a href="https://www.luogu.org/problemnew/show/P1219">八皇后 </a></p><p>一道经典老题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line">&#125;ans[<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> h[<span class="number">20</span>],l[<span class="number">20</span>],an,n;</span><br><span class="line"><span class="type">int</span> vis[<span class="number">3</span>][<span class="number">50</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==n+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">an++;</span><br><span class="line"><span class="keyword">if</span>(an&lt;=<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,ans[i].y);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[<span class="number">1</span>][x+i]&amp;&amp;!vis[<span class="number">2</span>][x-i+<span class="number">15</span>]&amp;&amp;!h[i])</span><br><span class="line">&#123;</span><br><span class="line">vis[<span class="number">1</span>][x+i]=vis[<span class="number">2</span>][x-i+<span class="number">15</span>]=<span class="number">1</span>;</span><br><span class="line">h[i]=<span class="number">1</span>;</span><br><span class="line">ans[x].x=x;</span><br><span class="line">ans[x].y=i;</span><br><span class="line"><span class="built_in">dfs</span>(x+<span class="number">1</span>);</span><br><span class="line">h[i]=<span class="number">0</span>;</span><br><span class="line">vis[<span class="number">1</span>][x+i]=vis[<span class="number">2</span>][x-i+<span class="number">15</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,an); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="反思："><a href="#反思：" class="headerlink" title="反思："></a>反思：</h5><p>这道题并不难，但是想要一次AC并不容易，用for循环进行判断的话只能得90分。所以要想其他判断方法，如用数组进行判断：如果(x1,y1)与(x2,y2)共线，x1-x2&#x3D;y1-y2 &#x3D;&gt; x1-y1&#x3D;x2-y1 或 x1-x2&#x3D;y2-y1 &#x3D;&gt; x1+y1&#x3D;x2+y2;</p><hr><h3 id="3-迭代加深搜索"><a href="#3-迭代加深搜索" class="headerlink" title="3.迭代加深搜索"></a>3.迭代加深搜索</h3><p>实质还是一种DFS。迭代加深搜索本质上还是一种DFS，只不过每次给DFS的层数加上了限制。每次搜到指定的层数，即使能继续往下搜索也不再向下了，而是回溯回去。指定的层数依次增加，知道找到最优解。</p><h5 id="小练手-2"><a href="#小练手-2" class="headerlink" title="小练手"></a>小练手</h5><p>跳房子是大家小时候的体育游戏之一，游戏的规则简单易懂、具有可变性。我<br>们在地上画出一个个房子，然后扔石子，根据石子的落地位置确定跳到哪个<br>房子。我们将房子抽象为x轴上的连续的正整数坐标点，第i个房子的坐标为<br>i，并假设房子个数无限。<br>我们的游戏规则如下：<br>1.石子落到房子内，记为H，我们可以跳到当前坐标的3倍坐标位置。<br>2.石子落到房子外，记为O，我们需跳回当前坐标折半并向下取整的坐标位<br>置。<br>例如，初始在第1个房子，要想到达第6个房子，既可以HHHOO，也可以<br>HHOHO。<br>请你编一个程序，给出从第n个房子到第m个房子所需要的最少跳跃次数k和<br>石子的扔法。<br>若最少跳跃次数下存在多种扔法，则选取字典序最小的扔法。</p><p>输入</p><p>16</p><p>输出</p><p>5<br>HHHOO</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,ans=<span class="number">1</span>,a[<span class="number">30</span>],an;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> ans,<span class="type">int</span> tmp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tmp&gt;ans) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">a[tmp]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">3</span>*x==m) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">dfs</span>(<span class="number">3</span>*x,ans,tmp+<span class="number">1</span>))</span><br><span class="line">&#123;</span><br><span class="line">a[tmp]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x/<span class="number">2</span>==m) <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line"><span class="built_in">dfs</span>(x/<span class="number">2</span>,ans,tmp+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">dfs</span>(n,ans,<span class="number">1</span>)&amp;&amp;!an)</span><br><span class="line">&#123;</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=ans;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;H&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;O&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="作业："><a href="#作业：" class="headerlink" title="作业："></a>作业：</h5><ol><li><p><a href="https://www.luogu.org/problemnew/show/P2346">四子连棋</a>  </p></li><li><p>**埃及分数Problem<br>在古埃及，人们使用单位分数的和(形如1&#x2F;a的, a是自然数)表示一切有理 数。如：2&#x2F;3&#x3D;1&#x2F;2+1&#x2F;6,但不允许2&#x2F;3&#x3D;1&#x2F;3+1&#x2F;3,因为加数中有相同的。<br>对于一个分数a&#x2F;b,表示方法有很多种，但是哪种最好呢？<br>首先，加数少的比加数多的好，其次，加数个数相同的，最小的分数越大越好。<br>如： **</p><p><strong>19&#x2F;45&#x3D;1&#x2F;3 + 1&#x2F;12 + 1&#x2F;180</strong></p><p>**19&#x2F;45&#x3D;1&#x2F;3 + 1&#x2F;15 + 1&#x2F;45 **</p><p> <strong>19&#x2F;45&#x3D;1&#x2F;3 + 1&#x2F;18 + 1&#x2F;30</strong></p><p> **19&#x2F;45&#x3D;1&#x2F;4 + 1&#x2F;6 + 1&#x2F;180 **</p><p> <strong>19&#x2F;45&#x3D;1&#x2F;5 + 1&#x2F;6 + 1&#x2F;18.</strong></p><p> **最好的是最后一种，因为1&#x2F;18比1&#x2F;180,1&#x2F;45,1&#x2F;30,1&#x2F;180都大。<br> 给出a,b(0〈a〈b〈1000),编程计算最好的表达方式。 **</p><p> **Input</p></li></ol><p>  第一行:N 表示有N组测试数据，每组测试数据为一行包a,b(0〈a〈b〈1000)。** </p><p>  **Output<br>  每组测试数据若干个数，自小到大排列，依次是单位分数的分母。 **</p><p>  <strong>Sample Input</strong></p><p>  1</p><p>  19 45</p><p>  <strong>Sample Output</strong></p><p>  5 6 18</p><hr><h2 id="二-BFS"><a href="#二-BFS" class="headerlink" title="二.BFS"></a>二.BFS</h2><h3 id="1-广度优先搜索"><a href="#1-广度优先搜索" class="headerlink" title="1. 广度优先搜索"></a>1. 广度优先搜索</h3><h5 id="小练手-3"><a href="#小练手-3" class="headerlink" title="小练手"></a>小练手</h5><p>国际象棋中，马的走法为日字形，n*m的棋盘中有k个障碍物，马不能跳到这些上面，求从给定起点跳到终点的最短步数。</p><h3 id="2-双向BFS"><a href="#2-双向BFS" class="headerlink" title="2. 双向BFS"></a>2. 双向BFS</h3><p>BFS的时间复杂度随层数增加而呈指数递增，双向BFS能极大的优化时间复杂度</p><h5 id="小练手-4"><a href="#小练手-4" class="headerlink" title="小练手"></a>小练手</h5><p>给定一个n行m列的迷宫，0代表障碍物，1代<br>表可以行走的区域。<br>每次可以朝着上下左右4个方向移动<br>起点在迷宫的左上⻆，终点在迷宫的右下⻆，问<br>最少走多少步能够走到迷宫的终点？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">char</span> a[<span class="number">10000</span>][<span class="number">10000</span>];</span><br><span class="line"><span class="type">int</span> vis1[<span class="number">10000</span>][<span class="number">10000</span>],vis2[<span class="number">10000</span>][<span class="number">10000</span>],ans;</span><br><span class="line"><span class="type">int</span> tmp[<span class="number">5</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">two_way_bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">queue&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt; q1,q2;</span><br><span class="line">q1.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">q2.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(n,m));</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x=q1.<span class="built_in">front</span>().first,y=q1.<span class="built_in">front</span>().second;</span><br><span class="line">q1.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[x+tmp[i][<span class="number">0</span>]][y+tmp[i][<span class="number">1</span>]]==<span class="string">&#x27;1&#x27;</span>&amp;&amp;!vis1[x+tmp[i][<span class="number">0</span>]][y+tmp[i][<span class="number">1</span>]])</span><br><span class="line">&#123;</span><br><span class="line">q1.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(x+tmp[i][<span class="number">0</span>],y+tmp[i][<span class="number">1</span>]));</span><br><span class="line">vis1[x+tmp[i][<span class="number">0</span>]][y+tmp[i][<span class="number">1</span>]]=vis1[x][y]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(vis2[x+tmp[i][<span class="number">0</span>]][y+tmp[i][<span class="number">1</span>]]) <span class="keyword">return</span> vis1[x+tmp[i][<span class="number">0</span>]][y+tmp[i][<span class="number">1</span>]]+vis2[x+tmp[i][<span class="number">0</span>]][y+tmp[i][<span class="number">1</span>]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">x=q2.<span class="built_in">front</span>().first,y=q2.<span class="built_in">front</span>().second;</span><br><span class="line">q2.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[x+tmp[i][<span class="number">0</span>]][y+tmp[i][<span class="number">1</span>]]==<span class="string">&#x27;1&#x27;</span>&amp;&amp;!vis2[x+tmp[i][<span class="number">0</span>]][y+tmp[i][<span class="number">1</span>]])</span><br><span class="line">&#123;</span><br><span class="line">q2.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(x+tmp[i][<span class="number">0</span>],y+tmp[i][<span class="number">1</span>]));</span><br><span class="line">vis2[x+tmp[i][<span class="number">0</span>]][y+tmp[i][<span class="number">1</span>]]=vis2[x][y]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(vis1[x+tmp[i][<span class="number">0</span>]][y+tmp[i][<span class="number">1</span>]]) <span class="keyword">return</span> vis1[x+tmp[i][<span class="number">0</span>]][y+tmp[i][<span class="number">1</span>]]+vis2[x+tmp[i][<span class="number">0</span>]][y+tmp[i][<span class="number">1</span>]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a[i]+<span class="number">1</span>);</span><br><span class="line">vis1[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">vis2[n][m]=<span class="number">0</span>;</span><br><span class="line">ans=<span class="built_in">two_way_bfs</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>在双向BFS中，两个方向同扩一个点等同于同时扩一层。</p><h2 id="三-搜索的优化小技巧"><a href="#三-搜索的优化小技巧" class="headerlink" title="三.搜索的优化小技巧"></a>三.搜索的优化小技巧</h2><ol><li>搜索的顺序：从大到小或者从小到大排序之后再进行搜索，可能会达到意想不到结果。</li><li>最优化剪枝：如果当前的步骤加上后面都是最优的选择，还不能已有的答案更优就直接退出。</li><li>可行性剪枝的应用。</li><li>不同的题有不同的优化技巧，需要大家自己领会</li></ol><h3 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h3><ol><li><p><a href="https://www.luogu.org/problemnew/show/P1784">数独</a></p></li><li><p>如果两个相邻像素灰度的差值不超过M，这两个像素就算同个区<br>域。如果像素a和像素b是1个区域，像素b和像素c是1个区域，那么a和<br>c也是1个区域请注意，若两个相邻像素灰度的差值1于M，也未必不是1个区域。<br>给定1个灰度图和M，问这个图像可以分割成多少个不同的</p><p> <strong>输入</strong></p><p> 341</p></li></ol><p><br>2000<br>0022<br>0022</p><pre><code>**输出**3</code></pre><hr><h2 id="四-模拟退火"><a href="#四-模拟退火" class="headerlink" title="四.模拟退火"></a>四.模拟退火</h2><p>模拟退火算法描述：</p><pre><code>     若J( Y(i+1) )&gt;= J( Y(i) )  (即移动后得到更优解)，则总是接受该移动     若J( Y(i+1) )&lt; J( Y(i) )  (即移动后的解比当前解要差)，则以一定的概率接受移动，而且这个概率随着时间推移逐渐降低（逐渐降低才能趋向稳定）     </code></pre><h3 id="任务-1"><a href="#任务-1" class="headerlink" title="任务"></a>任务</h3><ol><li><a href="https://www.luogu.org/problemnew/show/P2503">均分数据</a></li></ol><h1 id="搜索测试反思"><a href="#搜索测试反思" class="headerlink" title="搜索测试反思"></a>搜索测试反思</h1><h3 id="1-ping"><a href="#1-ping" class="headerlink" title="1.ping"></a>1.ping</h3><pre><code>这道题与跳石头(P2678)类似，用二分答案就能AC。</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a,b,s[<span class="number">10000000</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> tmp[<span class="number">100000</span>],cnt=<span class="number">1</span>;</span><br><span class="line">tmp[cnt]=s[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=a;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]-tmp[cnt]&gt;=mid) tmp[++cnt]=s[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt&gt;=b) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;ping.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;ping.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=a;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;s[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> l=<span class="number">1</span>,mid,r=s[a];</span><br><span class="line"><span class="keyword">while</span>(l&lt;r)</span><br><span class="line">&#123;</span><br><span class="line">mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(mid)) l=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r=mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans=r;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="教训："><a href="#教训：" class="headerlink" title="教训："></a>教训：</h5><pre><code>以后码完代码，在提交前一定要检查freopen写对没！！！，血的教训！！</code></pre><hr><h3 id="2-map"><a href="#2-map" class="headerlink" title="2.map"></a>2.map</h3><pre><code>这道题并不难，因为边长为一，所以不必用spfa或Dijkstra，直接用BFS一层一层的更新顺带记录一下次数就行了。</code></pre> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,ans[<span class="number">10000000</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ne,to;</span><br><span class="line">&#125;edge[<span class="number">10000000</span>];</span><br><span class="line"><span class="type">int</span> head[<span class="number">10000000</span>],cnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">edge[++cnt].to=v;</span><br><span class="line">edge[cnt].ne=head[u];</span><br><span class="line">head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> vis[<span class="number">10000000</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> sta)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt;q;</span><br><span class="line">q.<span class="built_in">push</span>(sta);</span><br><span class="line">vis[sta]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].ne)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v=edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(!vis[v]) </span><br><span class="line">&#123;</span><br><span class="line">q.<span class="built_in">push</span>(v);</span><br><span class="line">ans[v]=ans[u];</span><br><span class="line">vis[v]=vis[u]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(vis[v]&gt;vis[u])</span><br><span class="line">&#123;</span><br><span class="line">ans[v]+=ans[u];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;map.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;map.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line"><span class="built_in">add</span>(u,v);</span><br><span class="line"><span class="built_in">add</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line">ans[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">bfs</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="教训：每道题两个代码，一个暴力，一个算法，对拍。"><a href="#教训：每道题两个代码，一个暴力，一个算法，对拍。" class="headerlink" title="教训：每道题两个代码，一个暴力，一个算法，对拍。"></a>教训：每道题两个代码，一个暴力，一个算法，对拍。</h5><hr><h3 id="3-move"><a href="#3-move" class="headerlink" title="3.move"></a>3.move</h3><pre><code>第三题才是重头戏。有两种思路：1.重构图，像网络流一样，分点，将点分为k+1个。</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line"><span class="type">int</span> ne,to,w;</span><br><span class="line">&#125;edge[<span class="number">10000000</span>];</span><br><span class="line"><span class="type">int</span> cnt,head[<span class="number">1000000</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">edge[++cnt].to=v;</span><br><span class="line">edge[cnt].ne=head[u];</span><br><span class="line">edge[cnt].w=w;</span><br><span class="line">head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,k,s,t,ans=<span class="number">0x7ffffff</span>;</span><br><span class="line"><span class="type">int</span> vis[<span class="number">1000000</span>],dis[<span class="number">1000000</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">spfa</span><span class="params">(<span class="type">int</span> sta)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dis));<span class="comment">//本题存在编号为0的点； </span></span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">q.<span class="built_in">push</span>(sta);</span><br><span class="line">vis[sta]=<span class="number">1</span>;</span><br><span class="line">dis[sta]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">vis[u]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].ne)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v=edge[i].to,w=edge[i].w;</span><br><span class="line"><span class="keyword">if</span>(dis[v]&gt;dis[u]+w)</span><br><span class="line">&#123;</span><br><span class="line">dis[v]=dis[u]+w;</span><br><span class="line"><span class="keyword">if</span>(!vis[v])</span><br><span class="line">&#123;</span><br><span class="line">q.<span class="built_in">push</span>(v);</span><br><span class="line">vis[v]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;move.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;move.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;s,&amp;t);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v,w;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=k;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">add</span>(u*(k+<span class="number">1</span>)+j,v*(k+<span class="number">1</span>)+j,w);</span><br><span class="line"><span class="built_in">add</span>(v*(k+<span class="number">1</span>)+j,u*(k+<span class="number">1</span>)+j,w);</span><br><span class="line"><span class="comment">//printf(&quot;  %d  %d\n&quot;,u*(k+1)+j,v*(k+1)+j);</span></span><br><span class="line"><span class="keyword">if</span>(j!=k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">add</span>(u*(k+<span class="number">1</span>)+j,v*(k+<span class="number">1</span>)+j+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">add</span>(v*(k+<span class="number">1</span>)+j,u*(k+<span class="number">1</span>)+j+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="comment">//add(v*(k+1)+j+1,u*(k+1)+j,0);</span></span><br><span class="line"><span class="comment">//printf(&quot;  %d  %d\n&quot;,u*(k+1)+j,v*(k+1)+j+1);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">spfa</span>(s*(k+<span class="number">1</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=k;i++);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,dis[t*(k+<span class="number">1</span>)+k]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 6 1</span></span><br><span class="line"><span class="comment">0 4</span></span><br><span class="line"><span class="comment">0 1 5</span></span><br><span class="line"><span class="comment">1 2 5</span></span><br><span class="line"><span class="comment">2 3 5</span></span><br><span class="line"><span class="comment">3 4 5</span></span><br><span class="line"><span class="comment">2 3 3</span></span><br><span class="line"><span class="comment">0 2 100</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">边长为零的边是单向的；</span></span><br><span class="line"><span class="comment">否则会出现  0 =&gt; 5 =&gt; 7 =&gt; 4 =&gt; 6 =&gt; 9 的情况 （算出来为6，答案为8） </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><pre><code>不过会有两个测试点TLE qwq.2.状态转移，最短路+dis[v][i]=min(dis[u][i]+w,dis[u][i+1]);（dis[i][j]表示到i点，还有k次免费没用时的最短路径）</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ne,to,w;</span><br><span class="line">&#125;edge[<span class="number">1000000</span>];</span><br><span class="line"><span class="type">int</span> cnt,head[<span class="number">1000000</span>],ans=<span class="number">0x7ffffff</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">edge[++cnt].to=v;</span><br><span class="line">edge[cnt].w=w;</span><br><span class="line">edge[cnt].ne=head[u];</span><br><span class="line">head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,k,s,t;</span><br><span class="line"><span class="type">int</span> dis[<span class="number">1000000</span>][<span class="number">11</span>],vis[<span class="number">10000000</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">spfa</span><span class="params">(<span class="type">int</span> sta)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dis));<span class="comment">//本题存在编号为0的点； </span></span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">q.<span class="built_in">push</span>(sta);</span><br><span class="line">vis[sta]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=k;i++)</span><br><span class="line">dis[sta][i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">vis[u]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].ne)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v=edge[i].to,w=edge[i].w;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=k;i++)</span><br><span class="line"><span class="keyword">if</span>(dis[v][i]&gt;dis[u][i]+w||(i+<span class="number">1</span>&lt;=k&amp;&amp;dis[v][i]&gt;dis[u][i+<span class="number">1</span>]))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i+<span class="number">1</span>&lt;=k)</span><br><span class="line">dis[v][i]=<span class="built_in">min</span>(dis[u][i]+w,dis[u][i+<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">else</span> dis[v][i]=dis[u][i]+w;</span><br><span class="line"><span class="keyword">if</span>(!vis[v])</span><br><span class="line">&#123;</span><br><span class="line">q.<span class="built_in">push</span>(v);</span><br><span class="line">vis[v]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> tot)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tot==k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">spfa</span>(s);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">2</span>;(cnt-j+<span class="number">1</span>)/<span class="number">2</span>&gt;=(k-tot);j+=<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> tmp=edge[j].w;</span><br><span class="line">edge[j].w=edge[j+<span class="number">1</span>].w=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">dfs</span>(j,tot+<span class="number">1</span>);</span><br><span class="line">edge[j].w=edge[j+<span class="number">1</span>].w=tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;move.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;move.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;s,&amp;t);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v,w;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line"><span class="built_in">add</span>(u,v,w);</span><br><span class="line"><span class="built_in">add</span>(v,u,w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">spfa</span>(s);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,dis[t][<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;搜索专题&quot;&gt;&lt;a href=&quot;#搜索专题&quot; class=&quot;headerlink&quot; title=&quot;搜索专题&quot;&gt;&lt;/a&gt;搜索专题&lt;/h1&gt;&lt;h2 id=&quot;一-DFS&quot;&gt;&lt;a href=&quot;#一-DFS&quot; class=&quot;headerlink&quot; title=&quot;一.DFS&quot;&gt;&lt;/a&gt;一.DFS&lt;/h2&gt;&lt;h3 id=&quot;1-递归&quot;&gt;&lt;a href=&quot;#1-递归&quot; class=&quot;headerlink&quot; title=&quot;1.递归&quot;&gt;&lt;/a&gt;1.递归&lt;/h3&gt;&lt;h5 id=&quot;小练手&quot;&gt;&lt;a href=&quot;#小练手&quot; class=&quot;headerlink&quot; title=&quot;小练手&quot;&gt;&lt;/a&gt;小练手&lt;/h5&gt;&lt;hr&gt;
&lt;p&gt;**&lt;br&gt;输出1到n的所有排列，要求按照字典序从到&lt;br&gt;输出。** &lt;/p&gt;
&lt;p&gt;输入&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;输出&lt;/p&gt;
&lt;p&gt;1	2	3	&lt;br&gt;1	3	2	&lt;br&gt;2	1	3	&lt;br&gt;2	3	1	&lt;br&gt;3	1	2	&lt;br&gt;3	2	1&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt;  std;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; n,vis[&lt;span class=&quot;number&quot;&gt;10000000&lt;/span&gt;],b[&lt;span class=&quot;number&quot;&gt;10000000&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;qpl&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; a,&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; tmp)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;i&amp;lt;=n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(tmp==n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;j&amp;lt;=n;j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			cout&amp;lt;&amp;lt;b[j]&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			cout&amp;lt;&amp;lt;endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!vis[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			vis[i]=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			b[a]=i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;qpl&lt;/span&gt;(a+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,tmp+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			vis[i]=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cin&amp;gt;&amp;gt;n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;qpl&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;hr&gt;</summary>
    
    
    
    
    <category term="诸暨培训" scheme="http://syrsteven.github.io/tags/%E8%AF%B8%E6%9A%A8%E5%9F%B9%E8%AE%AD/"/>
    
    <category term="总结" scheme="http://syrsteven.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="搜索" scheme="http://syrsteven.github.io/tags/%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>Day4</title>
    <link href="http://syrsteven.github.io/post/a36e876b.html"/>
    <id>http://syrsteven.github.io/post/a36e876b.html</id>
    <published>2018-08-21T06:49:11.000Z</published>
    <updated>2023-09-01T20:06:21.710Z</updated>
    
    <content type="html"><![CDATA[<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="1-nember"><a href="#1-nember" class="headerlink" title="1.nember"></a>1.nember</h2><p>   给定一个1~n的排列，每次可以对该排列进行这样的操作：<br>从排列中任意拿出一个数，放在该序列的最前面。<br>问至少经过多少次操作，可以使该排列变为1，2，3……n-1，n。</p><h3 id="输入："><a href="#输入：" class="headerlink" title="输入："></a>输入：</h3><pre><code>244 1 2 351 2 3 4 5</code></pre><h3 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h3><pre><code>30</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">1000000</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;number.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;number.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line"><span class="type">int</span> opt;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;opt);</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=opt;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="type">int</span> ans=n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=n;j&gt;=<span class="number">1</span>;j--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j]==n)</span><br><span class="line">&#123;</span><br><span class="line">n--;</span><br><span class="line">ans--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="n-与-n-连续的最长长度就是答案。另可用next-permutation（a-a-n）来求全排列。"><a href="#n-与-n-连续的最长长度就是答案。另可用next-permutation（a-a-n）来求全排列。" class="headerlink" title="n - 与 n 连续的最长长度就是答案。另可用next_permutation（a,a+n）来求全排列。"></a>n - 与 n 连续的最长长度就是答案。另可用next_permutation（a,a+n）来求全排列。</h4><span id="more"></span><hr><h2 id="2-sort"><a href="#2-sort" class="headerlink" title="2. sort"></a>2. sort</h2><p>   <a href="https://www.luogu.org/problemnew/show/CF510C">sort</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">char</span> s[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"><span class="type">int</span> n,in[<span class="number">26</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ne,to;</span><br><span class="line">&#125;edge[<span class="number">1000000</span>];</span><br><span class="line"><span class="type">int</span> head[<span class="number">1000</span>],cnt,tmp;</span><br><span class="line"><span class="type">char</span> ans[<span class="number">26</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">edge[++cnt].to=v;</span><br><span class="line">edge[cnt].ne=head[u];</span><br><span class="line">head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">topu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">priority_queue&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;,greater&lt;<span class="type">int</span>&gt; &gt; q;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line"><span class="keyword">if</span>(!in[i]) q.<span class="built_in">push</span>(i);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> u=q.<span class="built_in">top</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">ans[tmp++]=u+<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].ne)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v=edge[i].to;</span><br><span class="line">in[v]--;</span><br><span class="line"><span class="keyword">if</span>(!in[v]) q.<span class="built_in">push</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;sort.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;sort.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> len=<span class="built_in">strlen</span>(s[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;len;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i][j]!=s[i+<span class="number">1</span>][j])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">add</span>(s[i][j]-<span class="string">&#x27;a&#x27;</span>,s[i+<span class="number">1</span>][j]-<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">in[s[i+<span class="number">1</span>][j]-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">topu</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strlen</span>(ans)&lt;<span class="number">26</span>) <span class="built_in">printf</span>(<span class="string">&quot;Impossible\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="这是一道topo排序的题，用小根堆维护其字典序最小。"><a href="#这是一道topo排序的题，用小根堆维护其字典序最小。" class="headerlink" title="这是一道topo排序的题，用小根堆维护其字典序最小。"></a>这是一道topo排序的题，用小根堆维护其字典序最小。</h4><hr><h2 id="3-seq"><a href="#3-seq" class="headerlink" title="3.seq"></a>3.seq</h2><p>   给定一个长度为n的序列， A与B 随机从序列中拿一个数（放回）谁的大算<br>谁赢，比赛三局两胜，已知A与B的比赛结果为前两局A胜，第三局B胜。求这<br>三局B取得数的和比A取得数的和大的概率。</p><h3 id="输入：-1"><a href="#输入：-1" class="headerlink" title="输入："></a>输入：</h3><pre><code>31 2 10</code></pre><h3 id="输出：-1"><a href="#输出：-1" class="headerlink" title="输出："></a>输出：</h3><pre><code>0.0741（保留4位小数）</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">2001</span>],maxx;</span><br><span class="line"><span class="type">double</span> f[<span class="number">10000</span>],F[<span class="number">10000</span>],ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;seq.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;seq.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp);</span><br><span class="line">maxx=a[<span class="number">1</span>]-a[n];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;a[j]) f[a[i]-a[j]]++;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=maxx;i++)</span><br><span class="line">f[i]/=(<span class="type">double</span>)(n*(n<span class="number">-1</span>)/<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=maxx;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;i;j++)</span><br><span class="line">F[i]+=f[i-j]*f[j];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=maxx;i++) F[i]+=F[i<span class="number">-1</span>];<span class="comment">//前缀和</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=maxx;i++)</span><br><span class="line">ans+=F[i<span class="number">-1</span>]*f[i];<span class="comment">//相当于f[i]*(F[0]+F[1]+....+F[i-1]);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.4f&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="概率DP题QWQ，f-i-记录第一局A比B-大i的概率，F-i-则记录第二局的。用f-i-来推F-i-，最后F-i-并枚举第三局B的得分（其实就是f-i-）"><a href="#概率DP题QWQ，f-i-记录第一局A比B-大i的概率，F-i-则记录第二局的。用f-i-来推F-i-，最后F-i-并枚举第三局B的得分（其实就是f-i-）" class="headerlink" title="概率DP题QWQ，f[i]记录第一局A比B 大i的概率，F[i]则记录第二局的。用f[i]来推F[i]，最后F[i]并枚举第三局B的得分（其实就是f[i]）;"></a>概率DP题QWQ，f[i]记录第一局A比B 大i的概率，F[i]则记录第二局的。用f[i]来推F[i]，最后F[i]并枚举第三局B的得分（其实就是f[i]）;</h4>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h1&gt;&lt;h2 id=&quot;1-nember&quot;&gt;&lt;a href=&quot;#1-nember&quot; class=&quot;headerlink&quot; title=&quot;1.nember&quot;&gt;&lt;/a&gt;1.nember&lt;/h2&gt;&lt;p&gt;   给定一个1~n的排列，每次可以对该排列进行这样的操作：&lt;br&gt;从排列中任意拿出一个数，放在该序列的最前面。&lt;br&gt;问至少经过多少次操作，可以使该排列变为1，2，3……n-1，n。&lt;/p&gt;
&lt;h3 id=&quot;输入：&quot;&gt;&lt;a href=&quot;#输入：&quot; class=&quot;headerlink&quot; title=&quot;输入：&quot;&gt;&lt;/a&gt;输入：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;2
4
4 1 2 3
5
1 2 3 4 5
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;输出：&quot;&gt;&lt;a href=&quot;#输出：&quot; class=&quot;headerlink&quot; title=&quot;输出：&quot;&gt;&lt;/a&gt;输出：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;3
0
&lt;/code&gt;&lt;/pre&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; std;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; a[&lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;freopen&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;number.in&amp;quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;,stdin);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;freopen&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;number.out&amp;quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&amp;quot;w&amp;quot;&lt;/span&gt;,stdout);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; opt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;,&amp;amp;opt);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;i&amp;lt;=opt;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;,&amp;amp;n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; ans=n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;j&amp;lt;=n;j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;,&amp;amp;a[j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; j=n;j&amp;gt;=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;j--)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(a[j]==n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				n--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				ans--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;%d&#92;n&amp;quot;&lt;/span&gt;,ans);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;n-与-n-连续的最长长度就是答案。另可用next-permutation（a-a-n）来求全排列。&quot;&gt;&lt;a href=&quot;#n-与-n-连续的最长长度就是答案。另可用next-permutation（a-a-n）来求全排列。&quot; class=&quot;headerlink&quot; title=&quot;n - 与 n 连续的最长长度就是答案。另可用next_permutation（a,a+n）来求全排列。&quot;&gt;&lt;/a&gt;n - 与 n 连续的最长长度就是答案。另可用next_permutation（a,a+n）来求全排列。&lt;/h4&gt;</summary>
    
    
    
    
    <category term="诸暨培训" scheme="http://syrsteven.github.io/tags/%E8%AF%B8%E6%9A%A8%E5%9F%B9%E8%AE%AD/"/>
    
    <category term="题解" scheme="http://syrsteven.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
</feed>
